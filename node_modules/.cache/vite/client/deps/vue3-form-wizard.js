import "./chunk-PLDDJCW6.js";

// node_modules/vue3-form-wizard/dist/vue3-form-wizard.es.js
import { openBlock as o, createElementBlock as d, renderSlot as l, normalizeClass as h, createElementVNode as c, normalizeStyle as b, toDisplayString as u, resolveComponent as p, withKeys as T, createCommentVNode as g, Fragment as P, renderList as A, createVNode as m, normalizeProps as f, guardReactiveProps as v, withCtx as S, createTextVNode as C, withDirectives as L, vShow as V } from "vue";
var x = (t, a) => {
  const e = t.__vccOpts || t;
  for (const [n, s] of a)
    e[n] = s;
  return e;
};
var N = {};
var F = {
  class: "wizard-btn",
  tabindex: "-1",
  type: "button"
};
function O(t, a, e, n, s, i) {
  return o(), d("button", F, [
    l(t.$slots, "default")
  ]);
}
var _ = x(N, [["render", O]]);
var K = {
  name: "wizard-step",
  props: {
    tab: {
      type: Object,
      default: () => {
      }
    },
    transition: {
      type: String,
      default: ""
    },
    index: {
      type: Number,
      default: 0
    }
  },
  computed: {
    iconActiveStyleBg() {
      return {
        backgroundColor: this.tab.color
      };
    },
    iconActiveStyle() {
      if (!this.tab.active)
        return { color: this.tab.color };
    },
    stepCheckedStyle() {
      return {
        borderColor: this.tab.color
      };
    },
    errorStyle() {
      return {
        borderColor: this.tab.errorColor,
        backgroundColor: this.tab.errorColor
      };
    },
    stepTitleStyle() {
      return {
        color: this.tab.validationError ? this.tab.errorColor : this.tab.color
      };
    },
    isStepSquare() {
      return this.tab.shape === "square";
    },
    isTabShape() {
      return this.tab.shape === "tab";
    }
  }
};
var R = ["tabindex", "id", "aria-controls", "aria-disabled", "aria-selected"];
var q = ["innerHTML"];
var M = ["innerHTML"];
function W(t, a, e, n, s, i) {
  return o(), d("li", {
    class: h({ active: e.tab.active })
  }, [
    c("a", {
      href: "javascript:void(0)",
      class: h({ disabled: !e.tab.checked })
    }, [
      c("div", {
        class: h(["wizard-icon-circle md", {
          checked: e.tab.checked,
          square_shape: i.isStepSquare,
          tab_shape: i.isTabShape
        }]),
        role: "tab",
        tabindex: e.tab.checked ? 0 : "",
        id: `step-${e.tab.tabId}`,
        "aria-controls": e.tab.tabId,
        "aria-disabled": e.tab.active,
        "aria-selected": e.tab.active,
        style: b([
          e.tab.checked ? i.stepCheckedStyle : {},
          e.tab.validationError ? i.errorStyle : {}
        ])
      }, [
        e.tab.active ? (o(), d("div", {
          key: 0,
          class: h(["wizard-icon-container", { square_shape: i.isStepSquare, tab_shape: i.isTabShape }]),
          style: b([i.iconActiveStyleBg, e.tab.validationError ? i.errorStyle : {}])
        }, [
          l(t.$slots, "active-step", {}, () => [
            e.tab.customIcon ? (o(), d("span", {
              key: 0,
              class: "wizard-icon",
              innerHTML: e.tab.customIcon
            }, null, 8, q)) : (o(), d("i", {
              key: 1,
              class: h([e.tab.icon ? e.tab.icon : "", "wizard-icon"]),
              style: b(e.tab.checked ? i.iconActiveStyle : "")
            }, u(e.tab.icon ? null : e.index + 1), 7))
          ])
        ], 6)) : l(t.$slots, "default", { key: 1 }, () => [
          e.tab.customIcon ? (o(), d("span", {
            key: 0,
            class: "wizard-icon",
            innerHTML: e.tab.customIcon
          }, null, 8, M)) : (o(), d("i", {
            key: 1,
            class: h([e.tab.icon ? e.tab.icon : "", "wizard-icon"]),
            style: b(e.tab.checked ? i.iconActiveStyle : "")
          }, u(e.tab.icon ? null : e.index + 1), 7))
        ])
      ], 14, R),
      l(t.$slots, "title", {}, () => [
        c("span", {
          class: h(["stepTitle", { active: e.tab.active, has_error: e.tab.validationError }]),
          style: b([e.tab.active || e.tab.checked ? i.stepTitleStyle : {}, { "margin-top": "5px" }])
        }, u(e.tab.title), 7)
      ]),
      l(t.$slots, "customIcon")
    ], 2)
  ], 2);
}
var w = x(K, [["render", W]]);
function j() {
  return document.activeElement.id;
}
function z(t = []) {
  let a = j();
  return t.findIndex((n) => n.tabId === a);
}
function k(t) {
  document.getElementById(t).focus();
}
function H(t) {
  return t.then && typeof t.then == "function";
}
var D = {
  name: "form-wizard",
  components: {
    WizardButton: _,
    WizardStep: w
  },
  props: {
    id: {
      type: String,
      default: "fw_" + (/* @__PURE__ */ new Date()).valueOf()
    },
    title: {
      type: String,
      default: "Awesome Wizard"
    },
    subtitle: {
      type: String,
      default: "Split a complicated flow in multiple steps"
    },
    nextButtonText: {
      type: String,
      default: "Next"
    },
    backButtonText: {
      type: String,
      default: "Back"
    },
    finishButtonText: {
      type: String,
      default: "Finish"
    },
    hideButtons: {
      type: Boolean,
      default: false
    },
    validateOnBack: Boolean,
    color: {
      type: String,
      default: "#e74c3c"
    },
    errorColor: {
      type: String,
      default: "#8b0000"
    },
    shape: {
      type: String,
      default: "circle"
    },
    layout: {
      type: String,
      default: "horizontal"
    },
    stepsClasses: {
      type: [String, Array],
      default: ""
    },
    stepSize: {
      type: String,
      default: "md",
      validator: (t) => ["xs", "sm", "md", "lg"].indexOf(t) !== -1
    },
    transition: {
      type: String,
      default: ""
    },
    startIndex: {
      type: Number,
      default: 0,
      validator: (t) => t >= 0
    }
  },
  provide() {
    return {
      addTab: this.addTab,
      removeTab: this.removeTab
    };
  },
  data() {
    return {
      activeTabIndex: 0,
      currentPercentage: 0,
      maxStep: 0,
      loading: false,
      tabs: []
    };
  },
  computed: {
    slotProps() {
      return {
        nextTab: this.nextTab,
        prevTab: this.prevTab,
        activeTabIndex: this.activeTabIndex,
        isLastStep: this.isLastStep,
        fillButtonStyle: this.fillButtonStyle
      };
    },
    tabCount() {
      return this.tabs.length;
    },
    isLastStep() {
      return this.activeTabIndex === this.tabCount - 1;
    },
    isVertical() {
      return this.layout === "vertical";
    },
    displayPrevButton() {
      return this.activeTabIndex !== 0;
    },
    stepPercentage() {
      return 1 / (this.tabCount * 2) * 100;
    },
    progressBarStyle() {
      return {
        backgroundColor: this.color,
        width: `${this.progress}%`,
        color: this.color
      };
    },
    fillButtonStyle() {
      return {
        backgroundColor: this.color,
        borderColor: this.color,
        color: "white"
      };
    },
    progress() {
      let t = 0;
      if (this.activeTabIndex > 0) {
        let a = 1, e = 2;
        t = this.stepPercentage * (this.activeTabIndex * e + a);
      } else
        t = this.stepPercentage;
      return t;
    }
  },
  methods: {
    emitTabChange(t, a) {
      this.$emit("on-change", t, a), this.$emit("update:startIndex", a);
    },
    addTab(t) {
      const a = this.tabCount;
      t.tabId = `${t.title.replace(/ /g, "")}${a}`, this.tabs.splice(a, 0, t), a < this.activeTabIndex + 1 && (this.maxStep = a, this.changeTab(this.activeTabIndex + 1, a));
    },
    removeTab(t) {
      const a = this.tabs, e = a.indexOf(t);
      e > -1 && (e === this.activeTabIndex && (this.maxStep = this.activeTabIndex - 1, this.changeTab(this.activeTabIndex, this.activeTabIndex - 1)), e < this.activeTabIndex && (this.maxStep = this.activeTabIndex - 1, this.activeTabIndex = this.activeTabIndex - 1, this.emitTabChange(this.activeTabIndex + 1, this.activeTabIndex)), a.splice(e, 1));
    },
    reset() {
      this.maxStep = 0, this.tabs.forEach((t) => {
        t.checked = false;
      }), this.navigateToTab(0);
    },
    activateAll() {
      this.maxStep = this.tabs.length - 1, this.tabs.forEach((t) => {
        t.checked = true;
      });
    },
    navigateToTab(t) {
      let a = t > this.activeTabIndex;
      if (t <= this.maxStep) {
        let e = () => {
          a && t - this.activeTabIndex > 1 ? (this.changeTab(this.activeTabIndex, this.activeTabIndex + 1), this.beforeTabChange(this.activeTabIndex, e)) : (this.changeTab(this.activeTabIndex, t), this.afterTabChange(this.activeTabIndex));
        };
        a ? this.beforeTabChange(this.activeTabIndex, e) : (this.setValidationError(null), e());
      }
      return t <= this.maxStep;
    },
    nextTab() {
      let t = () => {
        this.activeTabIndex < this.tabCount - 1 ? (this.changeTab(this.activeTabIndex, this.activeTabIndex + 1), this.afterTabChange(this.activeTabIndex)) : this.$emit("on-complete");
      };
      this.beforeTabChange(this.activeTabIndex, t);
    },
    prevTab() {
      let t = () => {
        this.activeTabIndex > 0 && (this.setValidationError(null), this.changeTab(this.activeTabIndex, this.activeTabIndex - 1));
      };
      this.validateOnBack ? this.beforeTabChange(this.activeTabIndex, t) : t();
    },
    focusNextTab() {
      let t = z(this.tabs);
      if (t !== -1 && t < this.tabs.length - 1) {
        let a = this.tabs[t + 1];
        a.checked && k(a.tabId);
      }
    },
    focusPrevTab() {
      let t = z(this.tabs);
      if (t !== -1 && t > 0) {
        let a = this.tabs[t - 1].tabId;
        k(a);
      }
    },
    setLoading(t) {
      this.loading = t, this.$emit("on-loading", t);
    },
    setValidationError(t) {
      this.tabs[this.activeTabIndex].validationError = t, this.$emit("on-error", t);
    },
    validateBeforeChange(t, a) {
      if (this.setValidationError(null), H(t))
        this.setLoading(true), t.then((e) => {
          this.setLoading(false);
          let n = e === true;
          this.executeBeforeChange(n, a);
        }).catch((e) => {
          this.setLoading(false), this.setValidationError(e);
        });
      else {
        let e = t === true;
        this.executeBeforeChange(e, a);
      }
    },
    executeBeforeChange(t, a) {
      this.$emit("on-validate", t, this.activeTabIndex), t ? a() : this.tabs[this.activeTabIndex].validationError = "error";
    },
    beforeTabChange(t, a) {
      if (this.loading)
        return;
      let e = this.tabs[t];
      if (e && e.beforeChange !== void 0) {
        let n = e.beforeChange();
        this.validateBeforeChange(n, a);
      } else
        a();
    },
    afterTabChange(t) {
      if (this.loading)
        return;
      let a = this.tabs[t];
      a && a.afterChange !== void 0 && a.afterChange();
    },
    changeTab(t, a, e = true) {
      let n = this.tabs[t], s = this.tabs[a];
      return n && (n.active = false), s && (s.active = true), e && this.activeTabIndex !== a && this.emitTabChange(t, a), this.activeTabIndex = a, this.activateTabAndCheckStep(this.activeTabIndex), true;
    },
    tryChangeRoute(t) {
      this.$router && t.route && this.$router.push(t.route);
    },
    checkRouteChange(t) {
      let a = -1, e = this.tabs.find((n, s) => {
        let i = n.route === t;
        return i && (a = s), i;
      });
      if (e && !e.active) {
        const n = a > this.activeTabIndex;
        this.navigateToTab(a, n);
      }
    },
    deactivateTabs() {
      this.tabs.forEach((t) => {
        t.active = false;
      });
    },
    activateTab(t) {
      this.deactivateTabs();
      let a = this.tabs[t];
      a && (a.active = true, a.checked = true, this.tryChangeRoute(a));
    },
    activateTabAndCheckStep(t) {
      this.activateTab(t), t > this.maxStep && (this.maxStep = t), this.activeTabIndex = t;
    },
    initializeTabs() {
      this.tabs.length > 0 && this.startIndex === 0 && this.activateTab(this.activeTabIndex), this.startIndex < this.tabs.length ? this.activateTabAndCheckStep(this.startIndex) : window.console.warn(`Prop startIndex set to ${this.startIndex} is greater than the number of tabs - ${this.tabs.length}. Make sure that the starting index is less than the number of tabs registered`);
    }
  },
  mounted() {
    this.initializeTabs();
  },
  watch: {
    "$route.path"(t) {
      this.checkRouteChange(t);
    }
  }
};
var G = ["id"];
var J = {
  key: 0,
  class: "wizard-header"
};
var Q = { class: "wizard-title" };
var U = { class: "category" };
var X = { class: "wizard-navigation" };
var Y = {
  key: 0,
  class: "wizard-progress-with-circle"
};
var Z = { class: "wizard-tab-content" };
var $ = {
  key: 1,
  class: "wizard-card-footer clearfix"
};
var tt = { class: "wizard-footer-left" };
var et = { class: "wizard-footer-right" };
function at(t, a, e, n, s, i) {
  const B = p("wizard-step"), I = p("wizard-button");
  return o(), d("div", {
    id: e.id ? e.id : "",
    class: h(["vue-form-wizard", [e.stepSize, { vertical: i.isVertical }]]),
    onKeyup: [
      a[6] || (a[6] = T((...r) => i.focusNextTab && i.focusNextTab(...r), ["right"])),
      a[7] || (a[7] = T((...r) => i.focusPrevTab && i.focusPrevTab(...r), ["left"]))
    ]
  }, [
    t.$slots.title ? (o(), d("div", J, [
      l(t.$slots, "title", {}, () => [
        c("h4", Q, u(e.title), 1),
        c("p", U, u(e.subtitle), 1)
      ])
    ])) : g("", true),
    c("div", X, [
      i.isVertical ? g("", true) : (o(), d("div", Y, [
        c("div", {
          class: "wizard-progress-bar",
          style: b(i.progressBarStyle)
        }, null, 4)
      ])),
      c("ul", {
        class: h(["wizard-nav wizard-nav-pills", e.stepsClasses]),
        role: "tablist"
      }, [
        (o(true), d(P, null, A(s.tabs, (r, y) => l(t.$slots, "step", {
          tab: r,
          index: y,
          navigateToTab: i.navigateToTab,
          stepSize: e.stepSize,
          transition: e.transition
        }, () => [
          m(B, {
            tab: r,
            "step-size": e.stepSize,
            onClick: (E) => i.navigateToTab(y),
            onKeyup: T((E) => i.navigateToTab(y), ["enter"]),
            transition: e.transition,
            index: y
          }, null, 8, ["tab", "step-size", "onClick", "onKeyup", "transition", "index"])
        ])), 256))
      ], 2),
      c("div", Z, [
        l(t.$slots, "default", f(v(i.slotProps)))
      ])
    ]),
    e.hideButtons ? g("", true) : (o(), d("div", $, [
      l(t.$slots, "footer", f(v(i.slotProps)), () => [
        c("div", tt, [
          i.displayPrevButton ? (o(), d("span", {
            key: 0,
            onClick: a[0] || (a[0] = (...r) => i.prevTab && i.prevTab(...r)),
            onKeyup: a[1] || (a[1] = T((...r) => i.prevTab && i.prevTab(...r), ["enter"])),
            role: "button",
            tabindex: "0"
          }, [
            l(t.$slots, "prev", f(v(i.slotProps)), () => [
              m(I, {
                style: b(i.fillButtonStyle),
                disabled: s.loading
              }, {
                default: S(() => [
                  C(u(e.backButtonText), 1)
                ]),
                _: 1
              }, 8, ["style", "disabled"])
            ])
          ], 32)) : g("", true),
          l(t.$slots, "custom-buttons-left", f(v(i.slotProps)))
        ]),
        c("div", et, [
          l(t.$slots, "custom-buttons-right", f(v(i.slotProps))),
          i.isLastStep ? (o(), d("span", {
            key: 0,
            onClick: a[2] || (a[2] = (...r) => i.nextTab && i.nextTab(...r)),
            onKeyup: a[3] || (a[3] = T((...r) => i.nextTab && i.nextTab(...r), ["enter"])),
            role: "button",
            tabindex: "0"
          }, [
            l(t.$slots, "finish", f(v(i.slotProps)), () => [
              m(I, {
                style: b(i.fillButtonStyle)
              }, {
                default: S(() => [
                  C(u(e.finishButtonText), 1)
                ]),
                _: 1
              }, 8, ["style"])
            ])
          ], 32)) : (o(), d("span", {
            key: 1,
            onClick: a[4] || (a[4] = (...r) => i.nextTab && i.nextTab(...r)),
            onKeyup: a[5] || (a[5] = T((...r) => i.nextTab && i.nextTab(...r), ["enter"])),
            role: "button",
            tabindex: "0"
          }, [
            l(t.$slots, "next", f(v(i.slotProps)), () => [
              m(I, {
                style: b(i.fillButtonStyle),
                disabled: s.loading
              }, {
                default: S(() => [
                  C(u(e.nextButtonText), 1)
                ]),
                _: 1
              }, 8, ["style", "disabled"])
            ])
          ], 32))
        ])
      ])
    ]))
  ], 42, G);
}
var it = x(D, [["render", at]]);
var st = {
  name: "tab-content",
  props: {
    title: {
      type: String,
      default: ""
    },
    icon: {
      type: String,
      default: ""
    },
    customIcon: {
      type: String,
      default: ""
    },
    lazy: {
      type: Boolean,
      default: false
    },
    beforeChange: {
      type: Function
    },
    afterChange: {
      type: Function
    },
    route: {
      type: [String, Object]
    },
    additionalInfo: {
      type: Object,
      default: () => {
      }
    }
  },
  inject: ["addTab", "removeTab"],
  data() {
    return {
      active: false,
      validationError: null,
      checked: false,
      tabId: ""
    };
  },
  computed: {
    shape() {
      return this.$parent.shape;
    },
    color() {
      return this.$parent.color;
    },
    errorColor() {
      return this.$parent.errorColor;
    }
  },
  mounted() {
    this.addTab(this);
  },
  destroyed() {
    this.$el && this.$el.parentNode && this.$el.parentNode.removeChild(this.$el), this.removeTab(this);
  }
};
var nt = ["id", "aria-hidden", "aria-labelledby"];
function rt(t, a, e, n, s, i) {
  return !e.lazy || s.active ? L((o(), d("div", {
    key: 0,
    class: "wizard-tab-container",
    role: "tabpanel",
    id: s.tabId,
    "aria-hidden": !s.active,
    "aria-labelledby": `step-${s.tabId}`
  }, [
    l(t.$slots, "default", { active: s.active }),
    l(t.$slots, "customIcon")
  ], 8, nt)), [
    [V, s.active]
  ]) : g("", true);
}
var lt = x(st, [["render", rt]]);
var dt = {
  install(t) {
    t.component("form-wizard", it), t.component("tab-content", lt), t.component("wizard-button", _), t.component("wizard-step", w);
  }
};
export {
  it as FormWizard,
  lt as TabContent,
  _ as WizardButton,
  w as WizardStep,
  dt as default
};
//# sourceMappingURL=vue3-form-wizard.js.map
