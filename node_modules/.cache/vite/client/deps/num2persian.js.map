{
  "version": 3,
  "sources": ["../../../../num2persian/src/num2persian.js"],
  "sourcesContent": ["/**\n *\n * @type {string}\n */\nconst delimiter = ' و ';\n\n/**\n *\n * @type {string}\n */\nconst zero = 'صفر';\n\n/**\n *\n * @type {string}\n */\nconst negative = 'منفی ';\n\n/**\n *\n * @type {*[]}\n */\nconst letters = [\n  ['', 'یک', 'دو', 'سه', 'چهار', 'پنج', 'شش', 'هفت', 'هشت', 'نه'],\n  ['ده', 'یازده', 'دوازده', 'سیزده', 'چهارده', 'پانزده', 'شانزده', 'هفده', 'هجده', 'نوزده', 'بیست'],\n  ['', '', 'بیست', 'سی', 'چهل', 'پنجاه', 'شصت', 'هفتاد', 'هشتاد', 'نود'],\n  ['', 'یکصد', 'دویست', 'سیصد', 'چهارصد', 'پانصد', 'ششصد', 'هفتصد', 'هشتصد', 'نهصد'],\n  ['', ' هزار', ' میلیون', ' میلیارد', ' بیلیون', ' بیلیارد', ' تریلیون', ' تریلیارد',\n    ' کوآدریلیون', ' کادریلیارد', ' کوینتیلیون', ' کوانتینیارد', ' سکستیلیون', ' سکستیلیارد', ' سپتیلیون',\n    ' سپتیلیارد', ' اکتیلیون', ' اکتیلیارد', ' نانیلیون', ' نانیلیارد', ' دسیلیون', ' دسیلیارد'\n  ],\n];\n\n/**\n * Decimal suffixes for decimal part\n * @type {string[]}\n */\nconst decimalSuffixes = [\n  '',\n  'دهم',\n  'صدم',\n  'هزارم',\n  'ده‌هزارم',\n  'صد‌هزارم',\n  'میلیونوم',\n  'ده‌میلیونوم',\n  'صدمیلیونوم',\n  'میلیاردم',\n  'ده‌میلیاردم',\n  'صد‌‌میلیاردم'\n];\n\n/**\n * Clear number and split to 3 sections\n * @param {*} num\n */\nconst prepareNumber = (num) => {\n  let out = num;\n  if (typeof out === 'number') {\n    out = out.toString();\n  }\n\n  //make first part 3 chars\n  if (out.length % 3 === 1) {\n    out = `00${out}`;\n  } else if (out.length % 3 === 2) {\n    out = `0${out}`;\n  }\n  // Explode to array\n  return out.replace(/\\d{3}(?=\\d)/g, '$&*').split('*');\n};\n\n//tinyNumToWord convert 3tiny parts to word\nconst tinyNumToWord = (num) => {\n  // return zero\n  if (parseInt(num, 0) === 0) {\n    return '';\n  }\n  const parsedInt = parseInt(num, 0);\n  if (parsedInt < 10) {\n    return letters[0][parsedInt];\n  }\n  if (parsedInt <= 20) {\n    return letters[1][parsedInt - 10];\n  }\n  if (parsedInt < 100) {\n    const one = parsedInt % 10;\n    const ten = (parsedInt - one) / 10;\n    if (one > 0) {\n      return letters[2][ten] + delimiter + letters[0][one];\n    }\n    return letters[2][ten];\n  }\n  const one = parsedInt % 10;\n  const hundreds = (parsedInt - (parsedInt % 100)) / 100;\n  const ten = (parsedInt - ((hundreds * 100) + one)) / 10;\n  const out = [letters[3][hundreds]];\n  const secondPart = ((ten * 10) + one);\n\n  if (secondPart === 0) {\n    return out.join(delimiter);\n  }\n\n  if (secondPart < 10) {\n    out.push(letters[0][secondPart]);\n  } else if (secondPart <= 20) {\n    out.push(letters[1][secondPart - 10]);\n  } else {\n    out.push(letters[2][ten]);\n    if (one > 0) {\n      out.push(letters[0][one]);\n    }\n  }\n  \n  return out.join(delimiter);\n};\n\n\n/**\n * Convert Decimal part\n * @param decimalPart\n * @returns {string}\n * @constructor\n */\nconst convertDecimalPart = (decimalPart) => {\n  // Clear right zero\n  decimalPart = decimalPart.replace(/0*$/, \"\");\n\n  if (decimalPart === '') {\n    return '';\n  }\n\n  if (decimalPart.length > 11) {\n    decimalPart = decimalPart.substr(0, 11);\n  }\n  return ' ممیز ' + Num2persian(decimalPart) + ' ' + decimalSuffixes[decimalPart.length];\n};\n\n/**\n * Main function\n * @param input\n * @returns {string}\n * @constructor\n */\nconst Num2persian = (input) => {\n  // Clear Non digits\n  input = input.toString().replace(/[^0-9.-]/g, '');\n  let isNegative = false;\n  const floatParse = parseFloat(input);\n  // return zero if this isn't a valid number\n  if (isNaN(floatParse)) {\n    return zero;\n  }\n  // check for zero\n  if (floatParse === 0){\n    return zero;\n  }\n  // set negative flag:true if the number is less than 0\n  if (floatParse < 0){\n    isNegative = true;\n    input = input.replace(/-/g, '');\n  }\n\n  // Declare Parts\n  let decimalPart = '';\n  let integerPart = input;\n  let pointIndex = input.indexOf('.');\n  // Check for float numbers form string and split Int/Dec\n  if (pointIndex > -1) {\n    integerPart = input.substring(0, pointIndex);\n    decimalPart = input.substring(pointIndex + 1, input.length);\n  }\n\n  if (integerPart.length > 66) {\n    return 'خارج از محدوده';\n  }\n\n  // Split to sections\n  const slicedNumber = prepareNumber(integerPart);\n  // Fetch Sections and convert\n  const out = [];\n  for (let i = 0; i < slicedNumber.length; i += 1) {\n    const converted = tinyNumToWord(slicedNumber[i]);\n    if (converted !== '') {\n      out.push(converted + letters[4][slicedNumber.length - (i + 1)]);\n    }\n  }\n\n  // Convert Decimal part\n  if (decimalPart.length > 0) {\n    decimalPart = convertDecimalPart(decimalPart);\n  }\n\n  return (isNegative?negative:'') + out.join(delimiter) + decimalPart;\n};\n\n//@depercated\nString.prototype.toPersianLetter = function () {\n  return Num2persian(this);\n};\n\n//@depercated\nNumber.prototype.toPersianLetter = function () {\n  return Num2persian(parseFloat(this).toString());\n};\n\nString.prototype.num2persian = function () {\n  return Num2persian(this);\n};\n\nNumber.prototype.num2persian = function () {\n  return Num2persian(parseFloat(this).toString());\n};\n\nexport default Num2persian\n"],
  "mappings": "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",
  "names": ["one", "ten"]
}
