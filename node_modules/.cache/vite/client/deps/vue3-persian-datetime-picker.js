import {
  require_vue
} from "./chunk-4YYRLCFG.js";
import {
  __commonJS,
  __esm,
  __export,
  __require,
  __toCommonJS
} from "./chunk-PLDDJCW6.js";

// node_modules/moment/moment.js
var require_moment = __commonJS({
  "node_modules/moment/moment.js"(exports, module2) {
    (function(global, factory) {
      typeof exports === "object" && typeof module2 !== "undefined" ? module2.exports = factory() : typeof define === "function" && define.amd ? define(factory) : global.moment = factory();
    })(exports, function() {
      "use strict";
      var hookCallback2;
      function hooks2() {
        return hookCallback2.apply(null, arguments);
      }
      function setHookCallback2(callback) {
        hookCallback2 = callback;
      }
      function isArray2(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === "[object Array]";
      }
      function isObject2(input) {
        return input != null && Object.prototype.toString.call(input) === "[object Object]";
      }
      function hasOwnProp2(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
      }
      function isObjectEmpty2(obj) {
        if (Object.getOwnPropertyNames) {
          return Object.getOwnPropertyNames(obj).length === 0;
        } else {
          var k;
          for (k in obj) {
            if (hasOwnProp2(obj, k)) {
              return false;
            }
          }
          return true;
        }
      }
      function isUndefined2(input) {
        return input === void 0;
      }
      function isNumber2(input) {
        return typeof input === "number" || Object.prototype.toString.call(input) === "[object Number]";
      }
      function isDate2(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === "[object Date]";
      }
      function map2(arr, fn) {
        var res = [], i, arrLen = arr.length;
        for (i = 0; i < arrLen; ++i) {
          res.push(fn(arr[i], i));
        }
        return res;
      }
      function extend2(a, b) {
        for (var i in b) {
          if (hasOwnProp2(b, i)) {
            a[i] = b[i];
          }
        }
        if (hasOwnProp2(b, "toString")) {
          a.toString = b.toString;
        }
        if (hasOwnProp2(b, "valueOf")) {
          a.valueOf = b.valueOf;
        }
        return a;
      }
      function createUTC2(input, format3, locale3, strict) {
        return createLocalOrUTC2(input, format3, locale3, strict, true).utc();
      }
      function defaultParsingFlags2() {
        return {
          empty: false,
          unusedTokens: [],
          unusedInput: [],
          overflow: -2,
          charsLeftOver: 0,
          nullInput: false,
          invalidEra: null,
          invalidMonth: null,
          invalidFormat: false,
          userInvalidated: false,
          iso: false,
          parsedDateParts: [],
          era: null,
          meridiem: null,
          rfc2822: false,
          weekdayMismatch: false
        };
      }
      function getParsingFlags2(m) {
        if (m._pf == null) {
          m._pf = defaultParsingFlags2();
        }
        return m._pf;
      }
      var some2;
      if (Array.prototype.some) {
        some2 = Array.prototype.some;
      } else {
        some2 = function(fun) {
          var t = Object(this), len = t.length >>> 0, i;
          for (i = 0; i < len; i++) {
            if (i in t && fun.call(this, t[i], i, t)) {
              return true;
            }
          }
          return false;
        };
      }
      function isValid2(m) {
        var flags = null, parsedParts = false, isNowValid = m._d && !isNaN(m._d.getTime());
        if (isNowValid) {
          flags = getParsingFlags2(m);
          parsedParts = some2.call(flags.parsedDateParts, function(i) {
            return i != null;
          });
          isNowValid = flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
          if (m._strict) {
            isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === void 0;
          }
        }
        if (Object.isFrozen == null || !Object.isFrozen(m)) {
          m._isValid = isNowValid;
        } else {
          return isNowValid;
        }
        return m._isValid;
      }
      function createInvalid2(flags) {
        var m = createUTC2(NaN);
        if (flags != null) {
          extend2(getParsingFlags2(m), flags);
        } else {
          getParsingFlags2(m).userInvalidated = true;
        }
        return m;
      }
      var momentProperties2 = hooks2.momentProperties = [], updateInProgress2 = false;
      function copyConfig2(to3, from3) {
        var i, prop, val, momentPropertiesLen = momentProperties2.length;
        if (!isUndefined2(from3._isAMomentObject)) {
          to3._isAMomentObject = from3._isAMomentObject;
        }
        if (!isUndefined2(from3._i)) {
          to3._i = from3._i;
        }
        if (!isUndefined2(from3._f)) {
          to3._f = from3._f;
        }
        if (!isUndefined2(from3._l)) {
          to3._l = from3._l;
        }
        if (!isUndefined2(from3._strict)) {
          to3._strict = from3._strict;
        }
        if (!isUndefined2(from3._tzm)) {
          to3._tzm = from3._tzm;
        }
        if (!isUndefined2(from3._isUTC)) {
          to3._isUTC = from3._isUTC;
        }
        if (!isUndefined2(from3._offset)) {
          to3._offset = from3._offset;
        }
        if (!isUndefined2(from3._pf)) {
          to3._pf = getParsingFlags2(from3);
        }
        if (!isUndefined2(from3._locale)) {
          to3._locale = from3._locale;
        }
        if (momentPropertiesLen > 0) {
          for (i = 0; i < momentPropertiesLen; i++) {
            prop = momentProperties2[i];
            val = from3[prop];
            if (!isUndefined2(val)) {
              to3[prop] = val;
            }
          }
        }
        return to3;
      }
      function Moment2(config) {
        copyConfig2(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
          this._d = /* @__PURE__ */ new Date(NaN);
        }
        if (updateInProgress2 === false) {
          updateInProgress2 = true;
          hooks2.updateOffset(this);
          updateInProgress2 = false;
        }
      }
      function isMoment2(obj) {
        return obj instanceof Moment2 || obj != null && obj._isAMomentObject != null;
      }
      function warn2(msg) {
        if (hooks2.suppressDeprecationWarnings === false && typeof console !== "undefined" && console.warn) {
          console.warn("Deprecation warning: " + msg);
        }
      }
      function deprecate2(msg, fn) {
        var firstTime = true;
        return extend2(function() {
          if (hooks2.deprecationHandler != null) {
            hooks2.deprecationHandler(null, msg);
          }
          if (firstTime) {
            var args = [], arg, i, key, argLen = arguments.length;
            for (i = 0; i < argLen; i++) {
              arg = "";
              if (typeof arguments[i] === "object") {
                arg += "\n[" + i + "] ";
                for (key in arguments[0]) {
                  if (hasOwnProp2(arguments[0], key)) {
                    arg += key + ": " + arguments[0][key] + ", ";
                  }
                }
                arg = arg.slice(0, -2);
              } else {
                arg = arguments[i];
              }
              args.push(arg);
            }
            warn2(
              msg + "\nArguments: " + Array.prototype.slice.call(args).join("") + "\n" + new Error().stack
            );
            firstTime = false;
          }
          return fn.apply(this, arguments);
        }, fn);
      }
      var deprecations2 = {};
      function deprecateSimple2(name, msg) {
        if (hooks2.deprecationHandler != null) {
          hooks2.deprecationHandler(name, msg);
        }
        if (!deprecations2[name]) {
          warn2(msg);
          deprecations2[name] = true;
        }
      }
      hooks2.suppressDeprecationWarnings = false;
      hooks2.deprecationHandler = null;
      function isFunction2(input) {
        return typeof Function !== "undefined" && input instanceof Function || Object.prototype.toString.call(input) === "[object Function]";
      }
      function set2(config) {
        var prop, i;
        for (i in config) {
          if (hasOwnProp2(config, i)) {
            prop = config[i];
            if (isFunction2(prop)) {
              this[i] = prop;
            } else {
              this["_" + i] = prop;
            }
          }
        }
        this._config = config;
        this._dayOfMonthOrdinalParseLenient = new RegExp(
          (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source
        );
      }
      function mergeConfigs2(parentConfig, childConfig) {
        var res = extend2({}, parentConfig), prop;
        for (prop in childConfig) {
          if (hasOwnProp2(childConfig, prop)) {
            if (isObject2(parentConfig[prop]) && isObject2(childConfig[prop])) {
              res[prop] = {};
              extend2(res[prop], parentConfig[prop]);
              extend2(res[prop], childConfig[prop]);
            } else if (childConfig[prop] != null) {
              res[prop] = childConfig[prop];
            } else {
              delete res[prop];
            }
          }
        }
        for (prop in parentConfig) {
          if (hasOwnProp2(parentConfig, prop) && !hasOwnProp2(childConfig, prop) && isObject2(parentConfig[prop])) {
            res[prop] = extend2({}, res[prop]);
          }
        }
        return res;
      }
      function Locale2(config) {
        if (config != null) {
          this.set(config);
        }
      }
      var keys2;
      if (Object.keys) {
        keys2 = Object.keys;
      } else {
        keys2 = function(obj) {
          var i, res = [];
          for (i in obj) {
            if (hasOwnProp2(obj, i)) {
              res.push(i);
            }
          }
          return res;
        };
      }
      var defaultCalendar2 = {
        sameDay: "[Today at] LT",
        nextDay: "[Tomorrow at] LT",
        nextWeek: "dddd [at] LT",
        lastDay: "[Yesterday at] LT",
        lastWeek: "[Last] dddd [at] LT",
        sameElse: "L"
      };
      function calendar2(key, mom, now3) {
        var output = this._calendar[key] || this._calendar["sameElse"];
        return isFunction2(output) ? output.call(mom, now3) : output;
      }
      function zeroFill2(number, targetLength, forceSign) {
        var absNumber = "" + Math.abs(number), zerosToFill = targetLength - absNumber.length, sign3 = number >= 0;
        return (sign3 ? forceSign ? "+" : "" : "-") + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
      }
      var formattingTokens2 = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, localFormattingTokens2 = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, formatFunctions2 = {}, formatTokenFunctions2 = {};
      function addFormatToken2(token3, padded, ordinal3, callback) {
        var func = callback;
        if (typeof callback === "string") {
          func = function() {
            return this[callback]();
          };
        }
        if (token3) {
          formatTokenFunctions2[token3] = func;
        }
        if (padded) {
          formatTokenFunctions2[padded[0]] = function() {
            return zeroFill2(func.apply(this, arguments), padded[1], padded[2]);
          };
        }
        if (ordinal3) {
          formatTokenFunctions2[ordinal3] = function() {
            return this.localeData().ordinal(
              func.apply(this, arguments),
              token3
            );
          };
        }
      }
      function removeFormattingTokens2(input) {
        if (input.match(/\[[\s\S]/)) {
          return input.replace(/^\[|\]$/g, "");
        }
        return input.replace(/\\/g, "");
      }
      function makeFormatFunction2(format3) {
        var array = format3.match(formattingTokens2), i, length;
        for (i = 0, length = array.length; i < length; i++) {
          if (formatTokenFunctions2[array[i]]) {
            array[i] = formatTokenFunctions2[array[i]];
          } else {
            array[i] = removeFormattingTokens2(array[i]);
          }
        }
        return function(mom) {
          var output = "", i2;
          for (i2 = 0; i2 < length; i2++) {
            output += isFunction2(array[i2]) ? array[i2].call(mom, format3) : array[i2];
          }
          return output;
        };
      }
      function formatMoment2(m, format3) {
        if (!m.isValid()) {
          return m.localeData().invalidDate();
        }
        format3 = expandFormat2(format3, m.localeData());
        formatFunctions2[format3] = formatFunctions2[format3] || makeFormatFunction2(format3);
        return formatFunctions2[format3](m);
      }
      function expandFormat2(format3, locale3) {
        var i = 5;
        function replaceLongDateFormatTokens(input) {
          return locale3.longDateFormat(input) || input;
        }
        localFormattingTokens2.lastIndex = 0;
        while (i >= 0 && localFormattingTokens2.test(format3)) {
          format3 = format3.replace(
            localFormattingTokens2,
            replaceLongDateFormatTokens
          );
          localFormattingTokens2.lastIndex = 0;
          i -= 1;
        }
        return format3;
      }
      var defaultLongDateFormat2 = {
        LTS: "h:mm:ss A",
        LT: "h:mm A",
        L: "MM/DD/YYYY",
        LL: "MMMM D, YYYY",
        LLL: "MMMM D, YYYY h:mm A",
        LLLL: "dddd, MMMM D, YYYY h:mm A"
      };
      function longDateFormat2(key) {
        var format3 = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
        if (format3 || !formatUpper) {
          return format3;
        }
        this._longDateFormat[key] = formatUpper.match(formattingTokens2).map(function(tok) {
          if (tok === "MMMM" || tok === "MM" || tok === "DD" || tok === "dddd") {
            return tok.slice(1);
          }
          return tok;
        }).join("");
        return this._longDateFormat[key];
      }
      var defaultInvalidDate2 = "Invalid date";
      function invalidDate2() {
        return this._invalidDate;
      }
      var defaultOrdinal2 = "%d", defaultDayOfMonthOrdinalParse2 = /\d{1,2}/;
      function ordinal2(number) {
        return this._ordinal.replace("%d", number);
      }
      var defaultRelativeTime2 = {
        future: "in %s",
        past: "%s ago",
        s: "a few seconds",
        ss: "%d seconds",
        m: "a minute",
        mm: "%d minutes",
        h: "an hour",
        hh: "%d hours",
        d: "a day",
        dd: "%d days",
        w: "a week",
        ww: "%d weeks",
        M: "a month",
        MM: "%d months",
        y: "a year",
        yy: "%d years"
      };
      function relativeTime2(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction2(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
      }
      function pastFuture2(diff3, output) {
        var format3 = this._relativeTime[diff3 > 0 ? "future" : "past"];
        return isFunction2(format3) ? format3(output) : format3.replace(/%s/i, output);
      }
      var aliases2 = {
        D: "date",
        dates: "date",
        date: "date",
        d: "day",
        days: "day",
        day: "day",
        e: "weekday",
        weekdays: "weekday",
        weekday: "weekday",
        E: "isoWeekday",
        isoweekdays: "isoWeekday",
        isoweekday: "isoWeekday",
        DDD: "dayOfYear",
        dayofyears: "dayOfYear",
        dayofyear: "dayOfYear",
        h: "hour",
        hours: "hour",
        hour: "hour",
        ms: "millisecond",
        milliseconds: "millisecond",
        millisecond: "millisecond",
        m: "minute",
        minutes: "minute",
        minute: "minute",
        M: "month",
        months: "month",
        month: "month",
        Q: "quarter",
        quarters: "quarter",
        quarter: "quarter",
        s: "second",
        seconds: "second",
        second: "second",
        gg: "weekYear",
        weekyears: "weekYear",
        weekyear: "weekYear",
        GG: "isoWeekYear",
        isoweekyears: "isoWeekYear",
        isoweekyear: "isoWeekYear",
        w: "week",
        weeks: "week",
        week: "week",
        W: "isoWeek",
        isoweeks: "isoWeek",
        isoweek: "isoWeek",
        y: "year",
        years: "year",
        year: "year"
      };
      function normalizeUnits2(units) {
        return typeof units === "string" ? aliases2[units] || aliases2[units.toLowerCase()] : void 0;
      }
      function normalizeObjectUnits2(inputObject) {
        var normalizedInput = {}, normalizedProp, prop;
        for (prop in inputObject) {
          if (hasOwnProp2(inputObject, prop)) {
            normalizedProp = normalizeUnits2(prop);
            if (normalizedProp) {
              normalizedInput[normalizedProp] = inputObject[prop];
            }
          }
        }
        return normalizedInput;
      }
      var priorities2 = {
        date: 9,
        day: 11,
        weekday: 11,
        isoWeekday: 11,
        dayOfYear: 4,
        hour: 13,
        millisecond: 16,
        minute: 14,
        month: 8,
        quarter: 7,
        second: 15,
        weekYear: 1,
        isoWeekYear: 1,
        week: 5,
        isoWeek: 5,
        year: 1
      };
      function getPrioritizedUnits2(unitsObj) {
        var units = [], u;
        for (u in unitsObj) {
          if (hasOwnProp2(unitsObj, u)) {
            units.push({ unit: u, priority: priorities2[u] });
          }
        }
        units.sort(function(a, b) {
          return a.priority - b.priority;
        });
        return units;
      }
      var match12 = /\d/, match22 = /\d\d/, match32 = /\d{3}/, match42 = /\d{4}/, match62 = /[+-]?\d{6}/, match1to22 = /\d\d?/, match3to42 = /\d\d\d\d?/, match5to62 = /\d\d\d\d\d\d?/, match1to32 = /\d{1,3}/, match1to42 = /\d{1,4}/, match1to62 = /[+-]?\d{1,6}/, matchUnsigned2 = /\d+/, matchSigned2 = /[+-]?\d+/, matchOffset2 = /Z|[+-]\d\d:?\d\d/gi, matchShortOffset2 = /Z|[+-]\d\d(?::?\d\d)?/gi, matchTimestamp2 = /[+-]?\d+(\.\d{1,3})?/, matchWord2 = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i, match1to2NoLeadingZero2 = /^[1-9]\d?/, match1to2HasZero2 = /^([1-9]\d|\d)/, regexes2;
      regexes2 = {};
      function addRegexToken2(token3, regex, strictRegex) {
        regexes2[token3] = isFunction2(regex) ? regex : function(isStrict, localeData3) {
          return isStrict && strictRegex ? strictRegex : regex;
        };
      }
      function getParseRegexForToken2(token3, config) {
        if (!hasOwnProp2(regexes2, token3)) {
          return new RegExp(unescapeFormat2(token3));
        }
        return regexes2[token3](config._strict, config._locale);
      }
      function unescapeFormat2(s) {
        return regexEscape2(
          s.replace("\\", "").replace(
            /\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
            function(matched, p1, p2, p3, p4) {
              return p1 || p2 || p3 || p4;
            }
          )
        );
      }
      function regexEscape2(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
      }
      function absFloor2(number) {
        if (number < 0) {
          return Math.ceil(number) || 0;
        } else {
          return Math.floor(number);
        }
      }
      function toInt2(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion, value = 0;
        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
          value = absFloor2(coercedNumber);
        }
        return value;
      }
      var tokens2 = {};
      function addParseToken2(token3, callback) {
        var i, func = callback, tokenLen;
        if (typeof token3 === "string") {
          token3 = [token3];
        }
        if (isNumber2(callback)) {
          func = function(input, array) {
            array[callback] = toInt2(input);
          };
        }
        tokenLen = token3.length;
        for (i = 0; i < tokenLen; i++) {
          tokens2[token3[i]] = func;
        }
      }
      function addWeekParseToken2(token3, callback) {
        addParseToken2(token3, function(input, array, config, token4) {
          config._w = config._w || {};
          callback(input, config._w, config, token4);
        });
      }
      function addTimeToArrayFromToken2(token3, input, config) {
        if (input != null && hasOwnProp2(tokens2, token3)) {
          tokens2[token3](input, config._a, config, token3);
        }
      }
      function isLeapYear2(year) {
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
      }
      var YEAR2 = 0, MONTH2 = 1, DATE2 = 2, HOUR2 = 3, MINUTE2 = 4, SECOND2 = 5, MILLISECOND2 = 6, WEEK2 = 7, WEEKDAY2 = 8;
      addFormatToken2("Y", 0, 0, function() {
        var y = this.year();
        return y <= 9999 ? zeroFill2(y, 4) : "+" + y;
      });
      addFormatToken2(0, ["YY", 2], 0, function() {
        return this.year() % 100;
      });
      addFormatToken2(0, ["YYYY", 4], 0, "year");
      addFormatToken2(0, ["YYYYY", 5], 0, "year");
      addFormatToken2(0, ["YYYYYY", 6, true], 0, "year");
      addRegexToken2("Y", matchSigned2);
      addRegexToken2("YY", match1to22, match22);
      addRegexToken2("YYYY", match1to42, match42);
      addRegexToken2("YYYYY", match1to62, match62);
      addRegexToken2("YYYYYY", match1to62, match62);
      addParseToken2(["YYYYY", "YYYYYY"], YEAR2);
      addParseToken2("YYYY", function(input, array) {
        array[YEAR2] = input.length === 2 ? hooks2.parseTwoDigitYear(input) : toInt2(input);
      });
      addParseToken2("YY", function(input, array) {
        array[YEAR2] = hooks2.parseTwoDigitYear(input);
      });
      addParseToken2("Y", function(input, array) {
        array[YEAR2] = parseInt(input, 10);
      });
      function daysInYear2(year) {
        return isLeapYear2(year) ? 366 : 365;
      }
      hooks2.parseTwoDigitYear = function(input) {
        return toInt2(input) + (toInt2(input) > 68 ? 1900 : 2e3);
      };
      var getSetYear2 = makeGetSet2("FullYear", true);
      function getIsLeapYear2() {
        return isLeapYear2(this.year());
      }
      function makeGetSet2(unit, keepTime) {
        return function(value) {
          if (value != null) {
            set$12(this, unit, value);
            hooks2.updateOffset(this, keepTime);
            return this;
          } else {
            return get2(this, unit);
          }
        };
      }
      function get2(mom, unit) {
        if (!mom.isValid()) {
          return NaN;
        }
        var d = mom._d, isUTC = mom._isUTC;
        switch (unit) {
          case "Milliseconds":
            return isUTC ? d.getUTCMilliseconds() : d.getMilliseconds();
          case "Seconds":
            return isUTC ? d.getUTCSeconds() : d.getSeconds();
          case "Minutes":
            return isUTC ? d.getUTCMinutes() : d.getMinutes();
          case "Hours":
            return isUTC ? d.getUTCHours() : d.getHours();
          case "Date":
            return isUTC ? d.getUTCDate() : d.getDate();
          case "Day":
            return isUTC ? d.getUTCDay() : d.getDay();
          case "Month":
            return isUTC ? d.getUTCMonth() : d.getMonth();
          case "FullYear":
            return isUTC ? d.getUTCFullYear() : d.getFullYear();
          default:
            return NaN;
        }
      }
      function set$12(mom, unit, value) {
        var d, isUTC, year, month, date;
        if (!mom.isValid() || isNaN(value)) {
          return;
        }
        d = mom._d;
        isUTC = mom._isUTC;
        switch (unit) {
          case "Milliseconds":
            return void (isUTC ? d.setUTCMilliseconds(value) : d.setMilliseconds(value));
          case "Seconds":
            return void (isUTC ? d.setUTCSeconds(value) : d.setSeconds(value));
          case "Minutes":
            return void (isUTC ? d.setUTCMinutes(value) : d.setMinutes(value));
          case "Hours":
            return void (isUTC ? d.setUTCHours(value) : d.setHours(value));
          case "Date":
            return void (isUTC ? d.setUTCDate(value) : d.setDate(value));
          case "FullYear":
            break;
          default:
            return;
        }
        year = value;
        month = mom.month();
        date = mom.date();
        date = date === 29 && month === 1 && !isLeapYear2(year) ? 28 : date;
        void (isUTC ? d.setUTCFullYear(year, month, date) : d.setFullYear(year, month, date));
      }
      function stringGet2(units) {
        units = normalizeUnits2(units);
        if (isFunction2(this[units])) {
          return this[units]();
        }
        return this;
      }
      function stringSet2(units, value) {
        if (typeof units === "object") {
          units = normalizeObjectUnits2(units);
          var prioritized = getPrioritizedUnits2(units), i, prioritizedLen = prioritized.length;
          for (i = 0; i < prioritizedLen; i++) {
            this[prioritized[i].unit](units[prioritized[i].unit]);
          }
        } else {
          units = normalizeUnits2(units);
          if (isFunction2(this[units])) {
            return this[units](value);
          }
        }
        return this;
      }
      function mod2(n, x) {
        return (n % x + x) % x;
      }
      var indexOf2;
      if (Array.prototype.indexOf) {
        indexOf2 = Array.prototype.indexOf;
      } else {
        indexOf2 = function(o) {
          var i;
          for (i = 0; i < this.length; ++i) {
            if (this[i] === o) {
              return i;
            }
          }
          return -1;
        };
      }
      function daysInMonth2(year, month) {
        if (isNaN(year) || isNaN(month)) {
          return NaN;
        }
        var modMonth = mod2(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1 ? isLeapYear2(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
      }
      addFormatToken2("M", ["MM", 2], "Mo", function() {
        return this.month() + 1;
      });
      addFormatToken2("MMM", 0, 0, function(format3) {
        return this.localeData().monthsShort(this, format3);
      });
      addFormatToken2("MMMM", 0, 0, function(format3) {
        return this.localeData().months(this, format3);
      });
      addRegexToken2("M", match1to22, match1to2NoLeadingZero2);
      addRegexToken2("MM", match1to22, match22);
      addRegexToken2("MMM", function(isStrict, locale3) {
        return locale3.monthsShortRegex(isStrict);
      });
      addRegexToken2("MMMM", function(isStrict, locale3) {
        return locale3.monthsRegex(isStrict);
      });
      addParseToken2(["M", "MM"], function(input, array) {
        array[MONTH2] = toInt2(input) - 1;
      });
      addParseToken2(["MMM", "MMMM"], function(input, array, config, token3) {
        var month = config._locale.monthsParse(input, token3, config._strict);
        if (month != null) {
          array[MONTH2] = month;
        } else {
          getParsingFlags2(config).invalidMonth = input;
        }
      });
      var defaultLocaleMonths2 = "January_February_March_April_May_June_July_August_September_October_November_December".split(
        "_"
      ), defaultLocaleMonthsShort2 = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), MONTHS_IN_FORMAT2 = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, defaultMonthsShortRegex2 = matchWord2, defaultMonthsRegex2 = matchWord2;
      function localeMonths2(m, format3) {
        if (!m) {
          return isArray2(this._months) ? this._months : this._months["standalone"];
        }
        return isArray2(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT2).test(format3) ? "format" : "standalone"][m.month()];
      }
      function localeMonthsShort2(m, format3) {
        if (!m) {
          return isArray2(this._monthsShort) ? this._monthsShort : this._monthsShort["standalone"];
        }
        return isArray2(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT2.test(format3) ? "format" : "standalone"][m.month()];
      }
      function handleStrictParse2(monthName, format3, strict) {
        var i, ii, mom, llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
          for (i = 0; i < 12; ++i) {
            mom = createUTC2([2e3, i]);
            this._shortMonthsParse[i] = this.monthsShort(
              mom,
              ""
            ).toLocaleLowerCase();
            this._longMonthsParse[i] = this.months(mom, "").toLocaleLowerCase();
          }
        }
        if (strict) {
          if (format3 === "MMM") {
            ii = indexOf2.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf2.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
          }
        } else {
          if (format3 === "MMM") {
            ii = indexOf2.call(this._shortMonthsParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf2.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf2.call(this._longMonthsParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf2.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
          }
        }
      }
      function localeMonthsParse2(monthName, format3, strict) {
        var i, mom, regex;
        if (this._monthsParseExact) {
          return handleStrictParse2.call(this, monthName, format3, strict);
        }
        if (!this._monthsParse) {
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
        }
        for (i = 0; i < 12; i++) {
          mom = createUTC2([2e3, i]);
          if (strict && !this._longMonthsParse[i]) {
            this._longMonthsParse[i] = new RegExp(
              "^" + this.months(mom, "").replace(".", "") + "$",
              "i"
            );
            this._shortMonthsParse[i] = new RegExp(
              "^" + this.monthsShort(mom, "").replace(".", "") + "$",
              "i"
            );
          }
          if (!strict && !this._monthsParse[i]) {
            regex = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, "");
            this._monthsParse[i] = new RegExp(regex.replace(".", ""), "i");
          }
          if (strict && format3 === "MMMM" && this._longMonthsParse[i].test(monthName)) {
            return i;
          } else if (strict && format3 === "MMM" && this._shortMonthsParse[i].test(monthName)) {
            return i;
          } else if (!strict && this._monthsParse[i].test(monthName)) {
            return i;
          }
        }
      }
      function setMonth2(mom, value) {
        if (!mom.isValid()) {
          return mom;
        }
        if (typeof value === "string") {
          if (/^\d+$/.test(value)) {
            value = toInt2(value);
          } else {
            value = mom.localeData().monthsParse(value);
            if (!isNumber2(value)) {
              return mom;
            }
          }
        }
        var month = value, date = mom.date();
        date = date < 29 ? date : Math.min(date, daysInMonth2(mom.year(), month));
        void (mom._isUTC ? mom._d.setUTCMonth(month, date) : mom._d.setMonth(month, date));
        return mom;
      }
      function getSetMonth2(value) {
        if (value != null) {
          setMonth2(this, value);
          hooks2.updateOffset(this, true);
          return this;
        } else {
          return get2(this, "Month");
        }
      }
      function getDaysInMonth2() {
        return daysInMonth2(this.year(), this.month());
      }
      function monthsShortRegex2(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp2(this, "_monthsRegex")) {
            computeMonthsParse2.call(this);
          }
          if (isStrict) {
            return this._monthsShortStrictRegex;
          } else {
            return this._monthsShortRegex;
          }
        } else {
          if (!hasOwnProp2(this, "_monthsShortRegex")) {
            this._monthsShortRegex = defaultMonthsShortRegex2;
          }
          return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
        }
      }
      function monthsRegex2(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp2(this, "_monthsRegex")) {
            computeMonthsParse2.call(this);
          }
          if (isStrict) {
            return this._monthsStrictRegex;
          } else {
            return this._monthsRegex;
          }
        } else {
          if (!hasOwnProp2(this, "_monthsRegex")) {
            this._monthsRegex = defaultMonthsRegex2;
          }
          return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
        }
      }
      function computeMonthsParse2() {
        function cmpLenRev(a, b) {
          return b.length - a.length;
        }
        var shortPieces = [], longPieces = [], mixedPieces = [], i, mom, shortP, longP;
        for (i = 0; i < 12; i++) {
          mom = createUTC2([2e3, i]);
          shortP = regexEscape2(this.monthsShort(mom, ""));
          longP = regexEscape2(this.months(mom, ""));
          shortPieces.push(shortP);
          longPieces.push(longP);
          mixedPieces.push(longP);
          mixedPieces.push(shortP);
        }
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        this._monthsRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp(
          "^(" + longPieces.join("|") + ")",
          "i"
        );
        this._monthsShortStrictRegex = new RegExp(
          "^(" + shortPieces.join("|") + ")",
          "i"
        );
      }
      function createDate2(y, m, d, h, M, s, ms) {
        var date;
        if (y < 100 && y >= 0) {
          date = new Date(y + 400, m, d, h, M, s, ms);
          if (isFinite(date.getFullYear())) {
            date.setFullYear(y);
          }
        } else {
          date = new Date(y, m, d, h, M, s, ms);
        }
        return date;
      }
      function createUTCDate2(y) {
        var date, args;
        if (y < 100 && y >= 0) {
          args = Array.prototype.slice.call(arguments);
          args[0] = y + 400;
          date = new Date(Date.UTC.apply(null, args));
          if (isFinite(date.getUTCFullYear())) {
            date.setUTCFullYear(y);
          }
        } else {
          date = new Date(Date.UTC.apply(null, arguments));
        }
        return date;
      }
      function firstWeekOffset2(year, dow, doy) {
        var fwd = 7 + dow - doy, fwdlw = (7 + createUTCDate2(year, 0, fwd).getUTCDay() - dow) % 7;
        return -fwdlw + fwd - 1;
      }
      function dayOfYearFromWeeks2(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset2(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
        if (dayOfYear <= 0) {
          resYear = year - 1;
          resDayOfYear = daysInYear2(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear2(year)) {
          resYear = year + 1;
          resDayOfYear = dayOfYear - daysInYear2(year);
        } else {
          resYear = year;
          resDayOfYear = dayOfYear;
        }
        return {
          year: resYear,
          dayOfYear: resDayOfYear
        };
      }
      function weekOfYear2(mom, dow, doy) {
        var weekOffset = firstWeekOffset2(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
        if (week < 1) {
          resYear = mom.year() - 1;
          resWeek = week + weeksInYear2(resYear, dow, doy);
        } else if (week > weeksInYear2(mom.year(), dow, doy)) {
          resWeek = week - weeksInYear2(mom.year(), dow, doy);
          resYear = mom.year() + 1;
        } else {
          resYear = mom.year();
          resWeek = week;
        }
        return {
          week: resWeek,
          year: resYear
        };
      }
      function weeksInYear2(year, dow, doy) {
        var weekOffset = firstWeekOffset2(year, dow, doy), weekOffsetNext = firstWeekOffset2(year + 1, dow, doy);
        return (daysInYear2(year) - weekOffset + weekOffsetNext) / 7;
      }
      addFormatToken2("w", ["ww", 2], "wo", "week");
      addFormatToken2("W", ["WW", 2], "Wo", "isoWeek");
      addRegexToken2("w", match1to22, match1to2NoLeadingZero2);
      addRegexToken2("ww", match1to22, match22);
      addRegexToken2("W", match1to22, match1to2NoLeadingZero2);
      addRegexToken2("WW", match1to22, match22);
      addWeekParseToken2(
        ["w", "ww", "W", "WW"],
        function(input, week, config, token3) {
          week[token3.substr(0, 1)] = toInt2(input);
        }
      );
      function localeWeek2(mom) {
        return weekOfYear2(mom, this._week.dow, this._week.doy).week;
      }
      var defaultLocaleWeek2 = {
        dow: 0,
        // Sunday is the first day of the week.
        doy: 6
        // The week that contains Jan 6th is the first week of the year.
      };
      function localeFirstDayOfWeek2() {
        return this._week.dow;
      }
      function localeFirstDayOfYear2() {
        return this._week.doy;
      }
      function getSetWeek2(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, "d");
      }
      function getSetISOWeek2(input) {
        var week = weekOfYear2(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, "d");
      }
      addFormatToken2("d", 0, "do", "day");
      addFormatToken2("dd", 0, 0, function(format3) {
        return this.localeData().weekdaysMin(this, format3);
      });
      addFormatToken2("ddd", 0, 0, function(format3) {
        return this.localeData().weekdaysShort(this, format3);
      });
      addFormatToken2("dddd", 0, 0, function(format3) {
        return this.localeData().weekdays(this, format3);
      });
      addFormatToken2("e", 0, 0, "weekday");
      addFormatToken2("E", 0, 0, "isoWeekday");
      addRegexToken2("d", match1to22);
      addRegexToken2("e", match1to22);
      addRegexToken2("E", match1to22);
      addRegexToken2("dd", function(isStrict, locale3) {
        return locale3.weekdaysMinRegex(isStrict);
      });
      addRegexToken2("ddd", function(isStrict, locale3) {
        return locale3.weekdaysShortRegex(isStrict);
      });
      addRegexToken2("dddd", function(isStrict, locale3) {
        return locale3.weekdaysRegex(isStrict);
      });
      addWeekParseToken2(["dd", "ddd", "dddd"], function(input, week, config, token3) {
        var weekday = config._locale.weekdaysParse(input, token3, config._strict);
        if (weekday != null) {
          week.d = weekday;
        } else {
          getParsingFlags2(config).invalidWeekday = input;
        }
      });
      addWeekParseToken2(["d", "e", "E"], function(input, week, config, token3) {
        week[token3] = toInt2(input);
      });
      function parseWeekday2(input, locale3) {
        if (typeof input !== "string") {
          return input;
        }
        if (!isNaN(input)) {
          return parseInt(input, 10);
        }
        input = locale3.weekdaysParse(input);
        if (typeof input === "number") {
          return input;
        }
        return null;
      }
      function parseIsoWeekday2(input, locale3) {
        if (typeof input === "string") {
          return locale3.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
      }
      function shiftWeekdays2(ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
      }
      var defaultLocaleWeekdays2 = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), defaultLocaleWeekdaysShort2 = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), defaultLocaleWeekdaysMin2 = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), defaultWeekdaysRegex2 = matchWord2, defaultWeekdaysShortRegex2 = matchWord2, defaultWeekdaysMinRegex2 = matchWord2;
      function localeWeekdays2(m, format3) {
        var weekdays = isArray2(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format3) ? "format" : "standalone"];
        return m === true ? shiftWeekdays2(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
      }
      function localeWeekdaysShort2(m) {
        return m === true ? shiftWeekdays2(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
      }
      function localeWeekdaysMin2(m) {
        return m === true ? shiftWeekdays2(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
      }
      function handleStrictParse$12(weekdayName, format3, strict) {
        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._minWeekdaysParse = [];
          for (i = 0; i < 7; ++i) {
            mom = createUTC2([2e3, 1]).day(i);
            this._minWeekdaysParse[i] = this.weekdaysMin(
              mom,
              ""
            ).toLocaleLowerCase();
            this._shortWeekdaysParse[i] = this.weekdaysShort(
              mom,
              ""
            ).toLocaleLowerCase();
            this._weekdaysParse[i] = this.weekdays(mom, "").toLocaleLowerCase();
          }
        }
        if (strict) {
          if (format3 === "dddd") {
            ii = indexOf2.call(this._weekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else if (format3 === "ddd") {
            ii = indexOf2.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf2.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          }
        } else {
          if (format3 === "dddd") {
            ii = indexOf2.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf2.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf2.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else if (format3 === "ddd") {
            ii = indexOf2.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf2.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf2.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf2.call(this._minWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf2.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf2.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          }
        }
      }
      function localeWeekdaysParse2(weekdayName, format3, strict) {
        var i, mom, regex;
        if (this._weekdaysParseExact) {
          return handleStrictParse$12.call(this, weekdayName, format3, strict);
        }
        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._minWeekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._fullWeekdaysParse = [];
        }
        for (i = 0; i < 7; i++) {
          mom = createUTC2([2e3, 1]).day(i);
          if (strict && !this._fullWeekdaysParse[i]) {
            this._fullWeekdaysParse[i] = new RegExp(
              "^" + this.weekdays(mom, "").replace(".", "\\.?") + "$",
              "i"
            );
            this._shortWeekdaysParse[i] = new RegExp(
              "^" + this.weekdaysShort(mom, "").replace(".", "\\.?") + "$",
              "i"
            );
            this._minWeekdaysParse[i] = new RegExp(
              "^" + this.weekdaysMin(mom, "").replace(".", "\\.?") + "$",
              "i"
            );
          }
          if (!this._weekdaysParse[i]) {
            regex = "^" + this.weekdays(mom, "") + "|^" + this.weekdaysShort(mom, "") + "|^" + this.weekdaysMin(mom, "");
            this._weekdaysParse[i] = new RegExp(regex.replace(".", ""), "i");
          }
          if (strict && format3 === "dddd" && this._fullWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (strict && format3 === "ddd" && this._shortWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (strict && format3 === "dd" && this._minWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
            return i;
          }
        }
      }
      function getSetDayOfWeek2(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        var day = get2(this, "Day");
        if (input != null) {
          input = parseWeekday2(input, this.localeData());
          return this.add(input - day, "d");
        } else {
          return day;
        }
      }
      function getSetLocaleDayOfWeek2(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, "d");
      }
      function getSetISODayOfWeek2(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        if (input != null) {
          var weekday = parseIsoWeekday2(input, this.localeData());
          return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
          return this.day() || 7;
        }
      }
      function weekdaysRegex2(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp2(this, "_weekdaysRegex")) {
            computeWeekdaysParse2.call(this);
          }
          if (isStrict) {
            return this._weekdaysStrictRegex;
          } else {
            return this._weekdaysRegex;
          }
        } else {
          if (!hasOwnProp2(this, "_weekdaysRegex")) {
            this._weekdaysRegex = defaultWeekdaysRegex2;
          }
          return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
        }
      }
      function weekdaysShortRegex2(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp2(this, "_weekdaysRegex")) {
            computeWeekdaysParse2.call(this);
          }
          if (isStrict) {
            return this._weekdaysShortStrictRegex;
          } else {
            return this._weekdaysShortRegex;
          }
        } else {
          if (!hasOwnProp2(this, "_weekdaysShortRegex")) {
            this._weekdaysShortRegex = defaultWeekdaysShortRegex2;
          }
          return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
      }
      function weekdaysMinRegex2(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp2(this, "_weekdaysRegex")) {
            computeWeekdaysParse2.call(this);
          }
          if (isStrict) {
            return this._weekdaysMinStrictRegex;
          } else {
            return this._weekdaysMinRegex;
          }
        } else {
          if (!hasOwnProp2(this, "_weekdaysMinRegex")) {
            this._weekdaysMinRegex = defaultWeekdaysMinRegex2;
          }
          return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
      }
      function computeWeekdaysParse2() {
        function cmpLenRev(a, b) {
          return b.length - a.length;
        }
        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i, mom, minp, shortp, longp;
        for (i = 0; i < 7; i++) {
          mom = createUTC2([2e3, 1]).day(i);
          minp = regexEscape2(this.weekdaysMin(mom, ""));
          shortp = regexEscape2(this.weekdaysShort(mom, ""));
          longp = regexEscape2(this.weekdays(mom, ""));
          minPieces.push(minp);
          shortPieces.push(shortp);
          longPieces.push(longp);
          mixedPieces.push(minp);
          mixedPieces.push(shortp);
          mixedPieces.push(longp);
        }
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        this._weekdaysRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;
        this._weekdaysStrictRegex = new RegExp(
          "^(" + longPieces.join("|") + ")",
          "i"
        );
        this._weekdaysShortStrictRegex = new RegExp(
          "^(" + shortPieces.join("|") + ")",
          "i"
        );
        this._weekdaysMinStrictRegex = new RegExp(
          "^(" + minPieces.join("|") + ")",
          "i"
        );
      }
      function hFormat2() {
        return this.hours() % 12 || 12;
      }
      function kFormat2() {
        return this.hours() || 24;
      }
      addFormatToken2("H", ["HH", 2], 0, "hour");
      addFormatToken2("h", ["hh", 2], 0, hFormat2);
      addFormatToken2("k", ["kk", 2], 0, kFormat2);
      addFormatToken2("hmm", 0, 0, function() {
        return "" + hFormat2.apply(this) + zeroFill2(this.minutes(), 2);
      });
      addFormatToken2("hmmss", 0, 0, function() {
        return "" + hFormat2.apply(this) + zeroFill2(this.minutes(), 2) + zeroFill2(this.seconds(), 2);
      });
      addFormatToken2("Hmm", 0, 0, function() {
        return "" + this.hours() + zeroFill2(this.minutes(), 2);
      });
      addFormatToken2("Hmmss", 0, 0, function() {
        return "" + this.hours() + zeroFill2(this.minutes(), 2) + zeroFill2(this.seconds(), 2);
      });
      function meridiem2(token3, lowercase) {
        addFormatToken2(token3, 0, 0, function() {
          return this.localeData().meridiem(
            this.hours(),
            this.minutes(),
            lowercase
          );
        });
      }
      meridiem2("a", true);
      meridiem2("A", false);
      function matchMeridiem2(isStrict, locale3) {
        return locale3._meridiemParse;
      }
      addRegexToken2("a", matchMeridiem2);
      addRegexToken2("A", matchMeridiem2);
      addRegexToken2("H", match1to22, match1to2HasZero2);
      addRegexToken2("h", match1to22, match1to2NoLeadingZero2);
      addRegexToken2("k", match1to22, match1to2NoLeadingZero2);
      addRegexToken2("HH", match1to22, match22);
      addRegexToken2("hh", match1to22, match22);
      addRegexToken2("kk", match1to22, match22);
      addRegexToken2("hmm", match3to42);
      addRegexToken2("hmmss", match5to62);
      addRegexToken2("Hmm", match3to42);
      addRegexToken2("Hmmss", match5to62);
      addParseToken2(["H", "HH"], HOUR2);
      addParseToken2(["k", "kk"], function(input, array, config) {
        var kInput = toInt2(input);
        array[HOUR2] = kInput === 24 ? 0 : kInput;
      });
      addParseToken2(["a", "A"], function(input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
      });
      addParseToken2(["h", "hh"], function(input, array, config) {
        array[HOUR2] = toInt2(input);
        getParsingFlags2(config).bigHour = true;
      });
      addParseToken2("hmm", function(input, array, config) {
        var pos = input.length - 2;
        array[HOUR2] = toInt2(input.substr(0, pos));
        array[MINUTE2] = toInt2(input.substr(pos));
        getParsingFlags2(config).bigHour = true;
      });
      addParseToken2("hmmss", function(input, array, config) {
        var pos1 = input.length - 4, pos2 = input.length - 2;
        array[HOUR2] = toInt2(input.substr(0, pos1));
        array[MINUTE2] = toInt2(input.substr(pos1, 2));
        array[SECOND2] = toInt2(input.substr(pos2));
        getParsingFlags2(config).bigHour = true;
      });
      addParseToken2("Hmm", function(input, array, config) {
        var pos = input.length - 2;
        array[HOUR2] = toInt2(input.substr(0, pos));
        array[MINUTE2] = toInt2(input.substr(pos));
      });
      addParseToken2("Hmmss", function(input, array, config) {
        var pos1 = input.length - 4, pos2 = input.length - 2;
        array[HOUR2] = toInt2(input.substr(0, pos1));
        array[MINUTE2] = toInt2(input.substr(pos1, 2));
        array[SECOND2] = toInt2(input.substr(pos2));
      });
      function localeIsPM2(input) {
        return (input + "").toLowerCase().charAt(0) === "p";
      }
      var defaultLocaleMeridiemParse2 = /[ap]\.?m?\.?/i, getSetHour2 = makeGetSet2("Hours", true);
      function localeMeridiem2(hours3, minutes3, isLower) {
        if (hours3 > 11) {
          return isLower ? "pm" : "PM";
        } else {
          return isLower ? "am" : "AM";
        }
      }
      var baseConfig2 = {
        calendar: defaultCalendar2,
        longDateFormat: defaultLongDateFormat2,
        invalidDate: defaultInvalidDate2,
        ordinal: defaultOrdinal2,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse2,
        relativeTime: defaultRelativeTime2,
        months: defaultLocaleMonths2,
        monthsShort: defaultLocaleMonthsShort2,
        week: defaultLocaleWeek2,
        weekdays: defaultLocaleWeekdays2,
        weekdaysMin: defaultLocaleWeekdaysMin2,
        weekdaysShort: defaultLocaleWeekdaysShort2,
        meridiemParse: defaultLocaleMeridiemParse2
      };
      var locales2 = {}, localeFamilies2 = {}, globalLocale2;
      function commonPrefix2(arr1, arr2) {
        var i, minl = Math.min(arr1.length, arr2.length);
        for (i = 0; i < minl; i += 1) {
          if (arr1[i] !== arr2[i]) {
            return i;
          }
        }
        return minl;
      }
      function normalizeLocale2(key) {
        return key ? key.toLowerCase().replace("_", "-") : key;
      }
      function chooseLocale2(names) {
        var i = 0, j, next, locale3, split;
        while (i < names.length) {
          split = normalizeLocale2(names[i]).split("-");
          j = split.length;
          next = normalizeLocale2(names[i + 1]);
          next = next ? next.split("-") : null;
          while (j > 0) {
            locale3 = loadLocale2(split.slice(0, j).join("-"));
            if (locale3) {
              return locale3;
            }
            if (next && next.length >= j && commonPrefix2(split, next) >= j - 1) {
              break;
            }
            j--;
          }
          i++;
        }
        return globalLocale2;
      }
      function isLocaleNameSane2(name) {
        return !!(name && name.match("^[^/\\\\]*$"));
      }
      function loadLocale2(name) {
        var oldLocale = null, aliasedRequire;
        if (locales2[name] === void 0 && typeof module2 !== "undefined" && module2 && module2.exports && isLocaleNameSane2(name)) {
          try {
            oldLocale = globalLocale2._abbr;
            aliasedRequire = __require;
            aliasedRequire("./locale/" + name);
            getSetGlobalLocale2(oldLocale);
          } catch (e) {
            locales2[name] = null;
          }
        }
        return locales2[name];
      }
      function getSetGlobalLocale2(key, values) {
        var data;
        if (key) {
          if (isUndefined2(values)) {
            data = getLocale2(key);
          } else {
            data = defineLocale2(key, values);
          }
          if (data) {
            globalLocale2 = data;
          } else {
            if (typeof console !== "undefined" && console.warn) {
              console.warn(
                "Locale " + key + " not found. Did you forget to load it?"
              );
            }
          }
        }
        return globalLocale2._abbr;
      }
      function defineLocale2(name, config) {
        if (config !== null) {
          var locale3, parentConfig = baseConfig2;
          config.abbr = name;
          if (locales2[name] != null) {
            deprecateSimple2(
              "defineLocaleOverride",
              "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."
            );
            parentConfig = locales2[name]._config;
          } else if (config.parentLocale != null) {
            if (locales2[config.parentLocale] != null) {
              parentConfig = locales2[config.parentLocale]._config;
            } else {
              locale3 = loadLocale2(config.parentLocale);
              if (locale3 != null) {
                parentConfig = locale3._config;
              } else {
                if (!localeFamilies2[config.parentLocale]) {
                  localeFamilies2[config.parentLocale] = [];
                }
                localeFamilies2[config.parentLocale].push({
                  name,
                  config
                });
                return null;
              }
            }
          }
          locales2[name] = new Locale2(mergeConfigs2(parentConfig, config));
          if (localeFamilies2[name]) {
            localeFamilies2[name].forEach(function(x) {
              defineLocale2(x.name, x.config);
            });
          }
          getSetGlobalLocale2(name);
          return locales2[name];
        } else {
          delete locales2[name];
          return null;
        }
      }
      function updateLocale2(name, config) {
        if (config != null) {
          var locale3, tmpLocale, parentConfig = baseConfig2;
          if (locales2[name] != null && locales2[name].parentLocale != null) {
            locales2[name].set(mergeConfigs2(locales2[name]._config, config));
          } else {
            tmpLocale = loadLocale2(name);
            if (tmpLocale != null) {
              parentConfig = tmpLocale._config;
            }
            config = mergeConfigs2(parentConfig, config);
            if (tmpLocale == null) {
              config.abbr = name;
            }
            locale3 = new Locale2(config);
            locale3.parentLocale = locales2[name];
            locales2[name] = locale3;
          }
          getSetGlobalLocale2(name);
        } else {
          if (locales2[name] != null) {
            if (locales2[name].parentLocale != null) {
              locales2[name] = locales2[name].parentLocale;
              if (name === getSetGlobalLocale2()) {
                getSetGlobalLocale2(name);
              }
            } else if (locales2[name] != null) {
              delete locales2[name];
            }
          }
        }
        return locales2[name];
      }
      function getLocale2(key) {
        var locale3;
        if (key && key._locale && key._locale._abbr) {
          key = key._locale._abbr;
        }
        if (!key) {
          return globalLocale2;
        }
        if (!isArray2(key)) {
          locale3 = loadLocale2(key);
          if (locale3) {
            return locale3;
          }
          key = [key];
        }
        return chooseLocale2(key);
      }
      function listLocales2() {
        return keys2(locales2);
      }
      function checkOverflow2(m) {
        var overflow, a = m._a;
        if (a && getParsingFlags2(m).overflow === -2) {
          overflow = a[MONTH2] < 0 || a[MONTH2] > 11 ? MONTH2 : a[DATE2] < 1 || a[DATE2] > daysInMonth2(a[YEAR2], a[MONTH2]) ? DATE2 : a[HOUR2] < 0 || a[HOUR2] > 24 || a[HOUR2] === 24 && (a[MINUTE2] !== 0 || a[SECOND2] !== 0 || a[MILLISECOND2] !== 0) ? HOUR2 : a[MINUTE2] < 0 || a[MINUTE2] > 59 ? MINUTE2 : a[SECOND2] < 0 || a[SECOND2] > 59 ? SECOND2 : a[MILLISECOND2] < 0 || a[MILLISECOND2] > 999 ? MILLISECOND2 : -1;
          if (getParsingFlags2(m)._overflowDayOfYear && (overflow < YEAR2 || overflow > DATE2)) {
            overflow = DATE2;
          }
          if (getParsingFlags2(m)._overflowWeeks && overflow === -1) {
            overflow = WEEK2;
          }
          if (getParsingFlags2(m)._overflowWeekday && overflow === -1) {
            overflow = WEEKDAY2;
          }
          getParsingFlags2(m).overflow = overflow;
        }
        return m;
      }
      var extendedIsoRegex2 = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, basicIsoRegex2 = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, tzRegex2 = /Z|[+-]\d\d(?::?\d\d)?/, isoDates2 = [
        ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
        ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
        ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
        ["GGGG-[W]WW", /\d{4}-W\d\d/, false],
        ["YYYY-DDD", /\d{4}-\d{3}/],
        ["YYYY-MM", /\d{4}-\d\d/, false],
        ["YYYYYYMMDD", /[+-]\d{10}/],
        ["YYYYMMDD", /\d{8}/],
        ["GGGG[W]WWE", /\d{4}W\d{3}/],
        ["GGGG[W]WW", /\d{4}W\d{2}/, false],
        ["YYYYDDD", /\d{7}/],
        ["YYYYMM", /\d{6}/, false],
        ["YYYY", /\d{4}/, false]
      ], isoTimes2 = [
        ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
        ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
        ["HH:mm:ss", /\d\d:\d\d:\d\d/],
        ["HH:mm", /\d\d:\d\d/],
        ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
        ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
        ["HHmmss", /\d\d\d\d\d\d/],
        ["HHmm", /\d\d\d\d/],
        ["HH", /\d\d/]
      ], aspNetJsonRegex2 = /^\/?Date\((-?\d+)/i, rfc28222 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/, obsOffsets2 = {
        UT: 0,
        GMT: 0,
        EDT: -4 * 60,
        EST: -5 * 60,
        CDT: -5 * 60,
        CST: -6 * 60,
        MDT: -6 * 60,
        MST: -7 * 60,
        PDT: -7 * 60,
        PST: -8 * 60
      };
      function configFromISO2(config) {
        var i, l, string = config._i, match = extendedIsoRegex2.exec(string) || basicIsoRegex2.exec(string), allowTime, dateFormat, timeFormat, tzFormat, isoDatesLen = isoDates2.length, isoTimesLen = isoTimes2.length;
        if (match) {
          getParsingFlags2(config).iso = true;
          for (i = 0, l = isoDatesLen; i < l; i++) {
            if (isoDates2[i][1].exec(match[1])) {
              dateFormat = isoDates2[i][0];
              allowTime = isoDates2[i][2] !== false;
              break;
            }
          }
          if (dateFormat == null) {
            config._isValid = false;
            return;
          }
          if (match[3]) {
            for (i = 0, l = isoTimesLen; i < l; i++) {
              if (isoTimes2[i][1].exec(match[3])) {
                timeFormat = (match[2] || " ") + isoTimes2[i][0];
                break;
              }
            }
            if (timeFormat == null) {
              config._isValid = false;
              return;
            }
          }
          if (!allowTime && timeFormat != null) {
            config._isValid = false;
            return;
          }
          if (match[4]) {
            if (tzRegex2.exec(match[4])) {
              tzFormat = "Z";
            } else {
              config._isValid = false;
              return;
            }
          }
          config._f = dateFormat + (timeFormat || "") + (tzFormat || "");
          configFromStringAndFormat2(config);
        } else {
          config._isValid = false;
        }
      }
      function extractFromRFC2822Strings2(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
        var result = [
          untruncateYear2(yearStr),
          defaultLocaleMonthsShort2.indexOf(monthStr),
          parseInt(dayStr, 10),
          parseInt(hourStr, 10),
          parseInt(minuteStr, 10)
        ];
        if (secondStr) {
          result.push(parseInt(secondStr, 10));
        }
        return result;
      }
      function untruncateYear2(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
          return 2e3 + year;
        } else if (year <= 999) {
          return 1900 + year;
        }
        return year;
      }
      function preprocessRFC28222(s) {
        return s.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
      }
      function checkWeekday2(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
          var weekdayProvided = defaultLocaleWeekdaysShort2.indexOf(weekdayStr), weekdayActual = new Date(
            parsedInput[0],
            parsedInput[1],
            parsedInput[2]
          ).getDay();
          if (weekdayProvided !== weekdayActual) {
            getParsingFlags2(config).weekdayMismatch = true;
            config._isValid = false;
            return false;
          }
        }
        return true;
      }
      function calculateOffset2(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
          return obsOffsets2[obsOffset];
        } else if (militaryOffset) {
          return 0;
        } else {
          var hm = parseInt(numOffset, 10), m = hm % 100, h = (hm - m) / 100;
          return h * 60 + m;
        }
      }
      function configFromRFC28222(config) {
        var match = rfc28222.exec(preprocessRFC28222(config._i)), parsedArray;
        if (match) {
          parsedArray = extractFromRFC2822Strings2(
            match[4],
            match[3],
            match[2],
            match[5],
            match[6],
            match[7]
          );
          if (!checkWeekday2(match[1], parsedArray, config)) {
            return;
          }
          config._a = parsedArray;
          config._tzm = calculateOffset2(match[8], match[9], match[10]);
          config._d = createUTCDate2.apply(null, config._a);
          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
          getParsingFlags2(config).rfc2822 = true;
        } else {
          config._isValid = false;
        }
      }
      function configFromString2(config) {
        var matched = aspNetJsonRegex2.exec(config._i);
        if (matched !== null) {
          config._d = /* @__PURE__ */ new Date(+matched[1]);
          return;
        }
        configFromISO2(config);
        if (config._isValid === false) {
          delete config._isValid;
        } else {
          return;
        }
        configFromRFC28222(config);
        if (config._isValid === false) {
          delete config._isValid;
        } else {
          return;
        }
        if (config._strict) {
          config._isValid = false;
        } else {
          hooks2.createFromInputFallback(config);
        }
      }
      hooks2.createFromInputFallback = deprecate2(
        "value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",
        function(config) {
          config._d = /* @__PURE__ */ new Date(config._i + (config._useUTC ? " UTC" : ""));
        }
      );
      function defaults2(a, b, c) {
        if (a != null) {
          return a;
        }
        if (b != null) {
          return b;
        }
        return c;
      }
      function currentDateArray2(config) {
        var nowValue = new Date(hooks2.now());
        if (config._useUTC) {
          return [
            nowValue.getUTCFullYear(),
            nowValue.getUTCMonth(),
            nowValue.getUTCDate()
          ];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
      }
      function configFromArray2(config) {
        var i, date, input = [], currentDate, expectedWeekday, yearToUse;
        if (config._d) {
          return;
        }
        currentDate = currentDateArray2(config);
        if (config._w && config._a[DATE2] == null && config._a[MONTH2] == null) {
          dayOfYearFromWeekInfo2(config);
        }
        if (config._dayOfYear != null) {
          yearToUse = defaults2(config._a[YEAR2], currentDate[YEAR2]);
          if (config._dayOfYear > daysInYear2(yearToUse) || config._dayOfYear === 0) {
            getParsingFlags2(config)._overflowDayOfYear = true;
          }
          date = createUTCDate2(yearToUse, 0, config._dayOfYear);
          config._a[MONTH2] = date.getUTCMonth();
          config._a[DATE2] = date.getUTCDate();
        }
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
          config._a[i] = input[i] = currentDate[i];
        }
        for (; i < 7; i++) {
          config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
        }
        if (config._a[HOUR2] === 24 && config._a[MINUTE2] === 0 && config._a[SECOND2] === 0 && config._a[MILLISECOND2] === 0) {
          config._nextDay = true;
          config._a[HOUR2] = 0;
        }
        config._d = (config._useUTC ? createUTCDate2 : createDate2).apply(
          null,
          input
        );
        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();
        if (config._tzm != null) {
          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }
        if (config._nextDay) {
          config._a[HOUR2] = 24;
        }
        if (config._w && typeof config._w.d !== "undefined" && config._w.d !== expectedWeekday) {
          getParsingFlags2(config).weekdayMismatch = true;
        }
      }
      function dayOfYearFromWeekInfo2(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
          dow = 1;
          doy = 4;
          weekYear = defaults2(
            w.GG,
            config._a[YEAR2],
            weekOfYear2(createLocal2(), 1, 4).year
          );
          week = defaults2(w.W, 1);
          weekday = defaults2(w.E, 1);
          if (weekday < 1 || weekday > 7) {
            weekdayOverflow = true;
          }
        } else {
          dow = config._locale._week.dow;
          doy = config._locale._week.doy;
          curWeek = weekOfYear2(createLocal2(), dow, doy);
          weekYear = defaults2(w.gg, config._a[YEAR2], curWeek.year);
          week = defaults2(w.w, curWeek.week);
          if (w.d != null) {
            weekday = w.d;
            if (weekday < 0 || weekday > 6) {
              weekdayOverflow = true;
            }
          } else if (w.e != null) {
            weekday = w.e + dow;
            if (w.e < 0 || w.e > 6) {
              weekdayOverflow = true;
            }
          } else {
            weekday = dow;
          }
        }
        if (week < 1 || week > weeksInYear2(weekYear, dow, doy)) {
          getParsingFlags2(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
          getParsingFlags2(config)._overflowWeekday = true;
        } else {
          temp = dayOfYearFromWeeks2(weekYear, week, weekday, dow, doy);
          config._a[YEAR2] = temp.year;
          config._dayOfYear = temp.dayOfYear;
        }
      }
      hooks2.ISO_8601 = function() {
      };
      hooks2.RFC_2822 = function() {
      };
      function configFromStringAndFormat2(config) {
        if (config._f === hooks2.ISO_8601) {
          configFromISO2(config);
          return;
        }
        if (config._f === hooks2.RFC_2822) {
          configFromRFC28222(config);
          return;
        }
        config._a = [];
        getParsingFlags2(config).empty = true;
        var string = "" + config._i, i, parsedInput, tokens3, token3, skipped, stringLength = string.length, totalParsedInputLength = 0, era, tokenLen;
        tokens3 = expandFormat2(config._f, config._locale).match(formattingTokens2) || [];
        tokenLen = tokens3.length;
        for (i = 0; i < tokenLen; i++) {
          token3 = tokens3[i];
          parsedInput = (string.match(getParseRegexForToken2(token3, config)) || [])[0];
          if (parsedInput) {
            skipped = string.substr(0, string.indexOf(parsedInput));
            if (skipped.length > 0) {
              getParsingFlags2(config).unusedInput.push(skipped);
            }
            string = string.slice(
              string.indexOf(parsedInput) + parsedInput.length
            );
            totalParsedInputLength += parsedInput.length;
          }
          if (formatTokenFunctions2[token3]) {
            if (parsedInput) {
              getParsingFlags2(config).empty = false;
            } else {
              getParsingFlags2(config).unusedTokens.push(token3);
            }
            addTimeToArrayFromToken2(token3, parsedInput, config);
          } else if (config._strict && !parsedInput) {
            getParsingFlags2(config).unusedTokens.push(token3);
          }
        }
        getParsingFlags2(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
          getParsingFlags2(config).unusedInput.push(string);
        }
        if (config._a[HOUR2] <= 12 && getParsingFlags2(config).bigHour === true && config._a[HOUR2] > 0) {
          getParsingFlags2(config).bigHour = void 0;
        }
        getParsingFlags2(config).parsedDateParts = config._a.slice(0);
        getParsingFlags2(config).meridiem = config._meridiem;
        config._a[HOUR2] = meridiemFixWrap2(
          config._locale,
          config._a[HOUR2],
          config._meridiem
        );
        era = getParsingFlags2(config).era;
        if (era !== null) {
          config._a[YEAR2] = config._locale.erasConvertYear(era, config._a[YEAR2]);
        }
        configFromArray2(config);
        checkOverflow2(config);
      }
      function meridiemFixWrap2(locale3, hour, meridiem3) {
        var isPm;
        if (meridiem3 == null) {
          return hour;
        }
        if (locale3.meridiemHour != null) {
          return locale3.meridiemHour(hour, meridiem3);
        } else if (locale3.isPM != null) {
          isPm = locale3.isPM(meridiem3);
          if (isPm && hour < 12) {
            hour += 12;
          }
          if (!isPm && hour === 12) {
            hour = 0;
          }
          return hour;
        } else {
          return hour;
        }
      }
      function configFromStringAndArray2(config) {
        var tempConfig, bestMoment, scoreToBeat, i, currentScore, validFormatFound, bestFormatIsValid = false, configfLen = config._f.length;
        if (configfLen === 0) {
          getParsingFlags2(config).invalidFormat = true;
          config._d = /* @__PURE__ */ new Date(NaN);
          return;
        }
        for (i = 0; i < configfLen; i++) {
          currentScore = 0;
          validFormatFound = false;
          tempConfig = copyConfig2({}, config);
          if (config._useUTC != null) {
            tempConfig._useUTC = config._useUTC;
          }
          tempConfig._f = config._f[i];
          configFromStringAndFormat2(tempConfig);
          if (isValid2(tempConfig)) {
            validFormatFound = true;
          }
          currentScore += getParsingFlags2(tempConfig).charsLeftOver;
          currentScore += getParsingFlags2(tempConfig).unusedTokens.length * 10;
          getParsingFlags2(tempConfig).score = currentScore;
          if (!bestFormatIsValid) {
            if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
              scoreToBeat = currentScore;
              bestMoment = tempConfig;
              if (validFormatFound) {
                bestFormatIsValid = true;
              }
            }
          } else {
            if (currentScore < scoreToBeat) {
              scoreToBeat = currentScore;
              bestMoment = tempConfig;
            }
          }
        }
        extend2(config, bestMoment || tempConfig);
      }
      function configFromObject2(config) {
        if (config._d) {
          return;
        }
        var i = normalizeObjectUnits2(config._i), dayOrDate = i.day === void 0 ? i.date : i.day;
        config._a = map2(
          [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
          function(obj) {
            return obj && parseInt(obj, 10);
          }
        );
        configFromArray2(config);
      }
      function createFromConfig2(config) {
        var res = new Moment2(checkOverflow2(prepareConfig2(config)));
        if (res._nextDay) {
          res.add(1, "d");
          res._nextDay = void 0;
        }
        return res;
      }
      function prepareConfig2(config) {
        var input = config._i, format3 = config._f;
        config._locale = config._locale || getLocale2(config._l);
        if (input === null || format3 === void 0 && input === "") {
          return createInvalid2({ nullInput: true });
        }
        if (typeof input === "string") {
          config._i = input = config._locale.preparse(input);
        }
        if (isMoment2(input)) {
          return new Moment2(checkOverflow2(input));
        } else if (isDate2(input)) {
          config._d = input;
        } else if (isArray2(format3)) {
          configFromStringAndArray2(config);
        } else if (format3) {
          configFromStringAndFormat2(config);
        } else {
          configFromInput2(config);
        }
        if (!isValid2(config)) {
          config._d = null;
        }
        return config;
      }
      function configFromInput2(config) {
        var input = config._i;
        if (isUndefined2(input)) {
          config._d = new Date(hooks2.now());
        } else if (isDate2(input)) {
          config._d = new Date(input.valueOf());
        } else if (typeof input === "string") {
          configFromString2(config);
        } else if (isArray2(input)) {
          config._a = map2(input.slice(0), function(obj) {
            return parseInt(obj, 10);
          });
          configFromArray2(config);
        } else if (isObject2(input)) {
          configFromObject2(config);
        } else if (isNumber2(input)) {
          config._d = new Date(input);
        } else {
          hooks2.createFromInputFallback(config);
        }
      }
      function createLocalOrUTC2(input, format3, locale3, strict, isUTC) {
        var c = {};
        if (format3 === true || format3 === false) {
          strict = format3;
          format3 = void 0;
        }
        if (locale3 === true || locale3 === false) {
          strict = locale3;
          locale3 = void 0;
        }
        if (isObject2(input) && isObjectEmpty2(input) || isArray2(input) && input.length === 0) {
          input = void 0;
        }
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale3;
        c._i = input;
        c._f = format3;
        c._strict = strict;
        return createFromConfig2(c);
      }
      function createLocal2(input, format3, locale3, strict) {
        return createLocalOrUTC2(input, format3, locale3, strict, false);
      }
      var prototypeMin2 = deprecate2(
        "moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",
        function() {
          var other = createLocal2.apply(null, arguments);
          if (this.isValid() && other.isValid()) {
            return other < this ? this : other;
          } else {
            return createInvalid2();
          }
        }
      ), prototypeMax2 = deprecate2(
        "moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",
        function() {
          var other = createLocal2.apply(null, arguments);
          if (this.isValid() && other.isValid()) {
            return other > this ? this : other;
          } else {
            return createInvalid2();
          }
        }
      );
      function pickBy2(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray2(moments[0])) {
          moments = moments[0];
        }
        if (!moments.length) {
          return createLocal2();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
          if (!moments[i].isValid() || moments[i][fn](res)) {
            res = moments[i];
          }
        }
        return res;
      }
      function min2() {
        var args = [].slice.call(arguments, 0);
        return pickBy2("isBefore", args);
      }
      function max2() {
        var args = [].slice.call(arguments, 0);
        return pickBy2("isAfter", args);
      }
      var now2 = function() {
        return Date.now ? Date.now() : +/* @__PURE__ */ new Date();
      };
      var ordering2 = [
        "year",
        "quarter",
        "month",
        "week",
        "day",
        "hour",
        "minute",
        "second",
        "millisecond"
      ];
      function isDurationValid2(m) {
        var key, unitHasDecimal = false, i, orderLen = ordering2.length;
        for (key in m) {
          if (hasOwnProp2(m, key) && !(indexOf2.call(ordering2, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
            return false;
          }
        }
        for (i = 0; i < orderLen; ++i) {
          if (m[ordering2[i]]) {
            if (unitHasDecimal) {
              return false;
            }
            if (parseFloat(m[ordering2[i]]) !== toInt2(m[ordering2[i]])) {
              unitHasDecimal = true;
            }
          }
        }
        return true;
      }
      function isValid$12() {
        return this._isValid;
      }
      function createInvalid$12() {
        return createDuration2(NaN);
      }
      function Duration2(duration) {
        var normalizedInput = normalizeObjectUnits2(duration), years3 = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months3 = normalizedInput.month || 0, weeks3 = normalizedInput.week || normalizedInput.isoWeek || 0, days3 = normalizedInput.day || 0, hours3 = normalizedInput.hour || 0, minutes3 = normalizedInput.minute || 0, seconds3 = normalizedInput.second || 0, milliseconds3 = normalizedInput.millisecond || 0;
        this._isValid = isDurationValid2(normalizedInput);
        this._milliseconds = +milliseconds3 + seconds3 * 1e3 + // 1000
        minutes3 * 6e4 + // 1000 * 60
        hours3 * 1e3 * 60 * 60;
        this._days = +days3 + weeks3 * 7;
        this._months = +months3 + quarters * 3 + years3 * 12;
        this._data = {};
        this._locale = getLocale2();
        this._bubble();
      }
      function isDuration2(obj) {
        return obj instanceof Duration2;
      }
      function absRound2(number) {
        if (number < 0) {
          return Math.round(-1 * number) * -1;
        } else {
          return Math.round(number);
        }
      }
      function compareArrays2(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i;
        for (i = 0; i < len; i++) {
          if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt2(array1[i]) !== toInt2(array2[i])) {
            diffs++;
          }
        }
        return diffs + lengthDiff;
      }
      function offset2(token3, separator) {
        addFormatToken2(token3, 0, 0, function() {
          var offset3 = this.utcOffset(), sign3 = "+";
          if (offset3 < 0) {
            offset3 = -offset3;
            sign3 = "-";
          }
          return sign3 + zeroFill2(~~(offset3 / 60), 2) + separator + zeroFill2(~~offset3 % 60, 2);
        });
      }
      offset2("Z", ":");
      offset2("ZZ", "");
      addRegexToken2("Z", matchShortOffset2);
      addRegexToken2("ZZ", matchShortOffset2);
      addParseToken2(["Z", "ZZ"], function(input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString2(matchShortOffset2, input);
      });
      var chunkOffset2 = /([\+\-]|\d\d)/gi;
      function offsetFromString2(matcher, string) {
        var matches = (string || "").match(matcher), chunk, parts, minutes3;
        if (matches === null) {
          return null;
        }
        chunk = matches[matches.length - 1] || [];
        parts = (chunk + "").match(chunkOffset2) || ["-", 0, 0];
        minutes3 = +(parts[1] * 60) + toInt2(parts[2]);
        return minutes3 === 0 ? 0 : parts[0] === "+" ? minutes3 : -minutes3;
      }
      function cloneWithOffset2(input, model) {
        var res, diff3;
        if (model._isUTC) {
          res = model.clone();
          diff3 = (isMoment2(input) || isDate2(input) ? input.valueOf() : createLocal2(input).valueOf()) - res.valueOf();
          res._d.setTime(res._d.valueOf() + diff3);
          hooks2.updateOffset(res, false);
          return res;
        } else {
          return createLocal2(input).local();
        }
      }
      function getDateOffset2(m) {
        return -Math.round(m._d.getTimezoneOffset());
      }
      hooks2.updateOffset = function() {
      };
      function getSetOffset2(input, keepLocalTime, keepMinutes) {
        var offset3 = this._offset || 0, localAdjust;
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        if (input != null) {
          if (typeof input === "string") {
            input = offsetFromString2(matchShortOffset2, input);
            if (input === null) {
              return this;
            }
          } else if (Math.abs(input) < 16 && !keepMinutes) {
            input = input * 60;
          }
          if (!this._isUTC && keepLocalTime) {
            localAdjust = getDateOffset2(this);
          }
          this._offset = input;
          this._isUTC = true;
          if (localAdjust != null) {
            this.add(localAdjust, "m");
          }
          if (offset3 !== input) {
            if (!keepLocalTime || this._changeInProgress) {
              addSubtract2(
                this,
                createDuration2(input - offset3, "m"),
                1,
                false
              );
            } else if (!this._changeInProgress) {
              this._changeInProgress = true;
              hooks2.updateOffset(this, true);
              this._changeInProgress = null;
            }
          }
          return this;
        } else {
          return this._isUTC ? offset3 : getDateOffset2(this);
        }
      }
      function getSetZone2(input, keepLocalTime) {
        if (input != null) {
          if (typeof input !== "string") {
            input = -input;
          }
          this.utcOffset(input, keepLocalTime);
          return this;
        } else {
          return -this.utcOffset();
        }
      }
      function setOffsetToUTC2(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
      }
      function setOffsetToLocal2(keepLocalTime) {
        if (this._isUTC) {
          this.utcOffset(0, keepLocalTime);
          this._isUTC = false;
          if (keepLocalTime) {
            this.subtract(getDateOffset2(this), "m");
          }
        }
        return this;
      }
      function setOffsetToParsedOffset2() {
        if (this._tzm != null) {
          this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === "string") {
          var tZone = offsetFromString2(matchOffset2, this._i);
          if (tZone != null) {
            this.utcOffset(tZone);
          } else {
            this.utcOffset(0, true);
          }
        }
        return this;
      }
      function hasAlignedHourOffset2(input) {
        if (!this.isValid()) {
          return false;
        }
        input = input ? createLocal2(input).utcOffset() : 0;
        return (this.utcOffset() - input) % 60 === 0;
      }
      function isDaylightSavingTime2() {
        return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
      }
      function isDaylightSavingTimeShifted2() {
        if (!isUndefined2(this._isDSTShifted)) {
          return this._isDSTShifted;
        }
        var c = {}, other;
        copyConfig2(c, this);
        c = prepareConfig2(c);
        if (c._a) {
          other = c._isUTC ? createUTC2(c._a) : createLocal2(c._a);
          this._isDSTShifted = this.isValid() && compareArrays2(c._a, other.toArray()) > 0;
        } else {
          this._isDSTShifted = false;
        }
        return this._isDSTShifted;
      }
      function isLocal2() {
        return this.isValid() ? !this._isUTC : false;
      }
      function isUtcOffset2() {
        return this.isValid() ? this._isUTC : false;
      }
      function isUtc2() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
      }
      var aspNetRegex2 = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/, isoRegex2 = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
      function createDuration2(input, key) {
        var duration = input, match = null, sign3, ret, diffRes;
        if (isDuration2(input)) {
          duration = {
            ms: input._milliseconds,
            d: input._days,
            M: input._months
          };
        } else if (isNumber2(input) || !isNaN(+input)) {
          duration = {};
          if (key) {
            duration[key] = +input;
          } else {
            duration.milliseconds = +input;
          }
        } else if (match = aspNetRegex2.exec(input)) {
          sign3 = match[1] === "-" ? -1 : 1;
          duration = {
            y: 0,
            d: toInt2(match[DATE2]) * sign3,
            h: toInt2(match[HOUR2]) * sign3,
            m: toInt2(match[MINUTE2]) * sign3,
            s: toInt2(match[SECOND2]) * sign3,
            ms: toInt2(absRound2(match[MILLISECOND2] * 1e3)) * sign3
            // the millisecond decimal point is included in the match
          };
        } else if (match = isoRegex2.exec(input)) {
          sign3 = match[1] === "-" ? -1 : 1;
          duration = {
            y: parseIso2(match[2], sign3),
            M: parseIso2(match[3], sign3),
            w: parseIso2(match[4], sign3),
            d: parseIso2(match[5], sign3),
            h: parseIso2(match[6], sign3),
            m: parseIso2(match[7], sign3),
            s: parseIso2(match[8], sign3)
          };
        } else if (duration == null) {
          duration = {};
        } else if (typeof duration === "object" && ("from" in duration || "to" in duration)) {
          diffRes = momentsDifference2(
            createLocal2(duration.from),
            createLocal2(duration.to)
          );
          duration = {};
          duration.ms = diffRes.milliseconds;
          duration.M = diffRes.months;
        }
        ret = new Duration2(duration);
        if (isDuration2(input) && hasOwnProp2(input, "_locale")) {
          ret._locale = input._locale;
        }
        if (isDuration2(input) && hasOwnProp2(input, "_isValid")) {
          ret._isValid = input._isValid;
        }
        return ret;
      }
      createDuration2.fn = Duration2.prototype;
      createDuration2.invalid = createInvalid$12;
      function parseIso2(inp, sign3) {
        var res = inp && parseFloat(inp.replace(",", "."));
        return (isNaN(res) ? 0 : res) * sign3;
      }
      function positiveMomentsDifference2(base, other) {
        var res = {};
        res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, "M").isAfter(other)) {
          --res.months;
        }
        res.milliseconds = +other - +base.clone().add(res.months, "M");
        return res;
      }
      function momentsDifference2(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
          return { milliseconds: 0, months: 0 };
        }
        other = cloneWithOffset2(other, base);
        if (base.isBefore(other)) {
          res = positiveMomentsDifference2(base, other);
        } else {
          res = positiveMomentsDifference2(other, base);
          res.milliseconds = -res.milliseconds;
          res.months = -res.months;
        }
        return res;
      }
      function createAdder2(direction, name) {
        return function(val, period) {
          var dur, tmp;
          if (period !== null && !isNaN(+period)) {
            deprecateSimple2(
              name,
              "moment()." + name + "(period, number) is deprecated. Please use moment()." + name + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."
            );
            tmp = val;
            val = period;
            period = tmp;
          }
          dur = createDuration2(val, period);
          addSubtract2(this, dur, direction);
          return this;
        };
      }
      function addSubtract2(mom, duration, isAdding, updateOffset) {
        var milliseconds3 = duration._milliseconds, days3 = absRound2(duration._days), months3 = absRound2(duration._months);
        if (!mom.isValid()) {
          return;
        }
        updateOffset = updateOffset == null ? true : updateOffset;
        if (months3) {
          setMonth2(mom, get2(mom, "Month") + months3 * isAdding);
        }
        if (days3) {
          set$12(mom, "Date", get2(mom, "Date") + days3 * isAdding);
        }
        if (milliseconds3) {
          mom._d.setTime(mom._d.valueOf() + milliseconds3 * isAdding);
        }
        if (updateOffset) {
          hooks2.updateOffset(mom, days3 || months3);
        }
      }
      var add2 = createAdder2(1, "add"), subtract2 = createAdder2(-1, "subtract");
      function isString2(input) {
        return typeof input === "string" || input instanceof String;
      }
      function isMomentInput2(input) {
        return isMoment2(input) || isDate2(input) || isString2(input) || isNumber2(input) || isNumberOrStringArray2(input) || isMomentInputObject2(input) || input === null || input === void 0;
      }
      function isMomentInputObject2(input) {
        var objectTest = isObject2(input) && !isObjectEmpty2(input), propertyTest = false, properties = [
          "years",
          "year",
          "y",
          "months",
          "month",
          "M",
          "days",
          "day",
          "d",
          "dates",
          "date",
          "D",
          "hours",
          "hour",
          "h",
          "minutes",
          "minute",
          "m",
          "seconds",
          "second",
          "s",
          "milliseconds",
          "millisecond",
          "ms"
        ], i, property, propertyLen = properties.length;
        for (i = 0; i < propertyLen; i += 1) {
          property = properties[i];
          propertyTest = propertyTest || hasOwnProp2(input, property);
        }
        return objectTest && propertyTest;
      }
      function isNumberOrStringArray2(input) {
        var arrayTest = isArray2(input), dataTypeTest = false;
        if (arrayTest) {
          dataTypeTest = input.filter(function(item) {
            return !isNumber2(item) && isString2(input);
          }).length === 0;
        }
        return arrayTest && dataTypeTest;
      }
      function isCalendarSpec2(input) {
        var objectTest = isObject2(input) && !isObjectEmpty2(input), propertyTest = false, properties = [
          "sameDay",
          "nextDay",
          "lastDay",
          "nextWeek",
          "lastWeek",
          "sameElse"
        ], i, property;
        for (i = 0; i < properties.length; i += 1) {
          property = properties[i];
          propertyTest = propertyTest || hasOwnProp2(input, property);
        }
        return objectTest && propertyTest;
      }
      function getCalendarFormat2(myMoment, now3) {
        var diff3 = myMoment.diff(now3, "days", true);
        return diff3 < -6 ? "sameElse" : diff3 < -1 ? "lastWeek" : diff3 < 0 ? "lastDay" : diff3 < 1 ? "sameDay" : diff3 < 2 ? "nextDay" : diff3 < 7 ? "nextWeek" : "sameElse";
      }
      function calendar$12(time, formats) {
        if (arguments.length === 1) {
          if (!arguments[0]) {
            time = void 0;
            formats = void 0;
          } else if (isMomentInput2(arguments[0])) {
            time = arguments[0];
            formats = void 0;
          } else if (isCalendarSpec2(arguments[0])) {
            formats = arguments[0];
            time = void 0;
          }
        }
        var now3 = time || createLocal2(), sod = cloneWithOffset2(now3, this).startOf("day"), format3 = hooks2.calendarFormat(this, sod) || "sameElse", output = formats && (isFunction2(formats[format3]) ? formats[format3].call(this, now3) : formats[format3]);
        return this.format(
          output || this.localeData().calendar(format3, this, createLocal2(now3))
        );
      }
      function clone2() {
        return new Moment2(this);
      }
      function isAfter2(input, units) {
        var localInput = isMoment2(input) ? input : createLocal2(input);
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits2(units) || "millisecond";
        if (units === "millisecond") {
          return this.valueOf() > localInput.valueOf();
        } else {
          return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
      }
      function isBefore2(input, units) {
        var localInput = isMoment2(input) ? input : createLocal2(input);
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits2(units) || "millisecond";
        if (units === "millisecond") {
          return this.valueOf() < localInput.valueOf();
        } else {
          return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
      }
      function isBetween2(from3, to3, units, inclusivity) {
        var localFrom = isMoment2(from3) ? from3 : createLocal2(from3), localTo = isMoment2(to3) ? to3 : createLocal2(to3);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
          return false;
        }
        inclusivity = inclusivity || "()";
        return (inclusivity[0] === "(" ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ")" ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
      }
      function isSame2(input, units) {
        var localInput = isMoment2(input) ? input : createLocal2(input), inputMs;
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits2(units) || "millisecond";
        if (units === "millisecond") {
          return this.valueOf() === localInput.valueOf();
        } else {
          inputMs = localInput.valueOf();
          return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
      }
      function isSameOrAfter2(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
      }
      function isSameOrBefore2(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
      }
      function diff2(input, units, asFloat) {
        var that, zoneDelta, output;
        if (!this.isValid()) {
          return NaN;
        }
        that = cloneWithOffset2(input, this);
        if (!that.isValid()) {
          return NaN;
        }
        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
        units = normalizeUnits2(units);
        switch (units) {
          case "year":
            output = monthDiff2(this, that) / 12;
            break;
          case "month":
            output = monthDiff2(this, that);
            break;
          case "quarter":
            output = monthDiff2(this, that) / 3;
            break;
          case "second":
            output = (this - that) / 1e3;
            break;
          case "minute":
            output = (this - that) / 6e4;
            break;
          case "hour":
            output = (this - that) / 36e5;
            break;
          case "day":
            output = (this - that - zoneDelta) / 864e5;
            break;
          case "week":
            output = (this - that - zoneDelta) / 6048e5;
            break;
          default:
            output = this - that;
        }
        return asFloat ? output : absFloor2(output);
      }
      function monthDiff2(a, b) {
        if (a.date() < b.date()) {
          return -monthDiff2(b, a);
        }
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()), anchor = a.clone().add(wholeMonthDiff, "months"), anchor2, adjust;
        if (b - anchor < 0) {
          anchor2 = a.clone().add(wholeMonthDiff - 1, "months");
          adjust = (b - anchor) / (anchor - anchor2);
        } else {
          anchor2 = a.clone().add(wholeMonthDiff + 1, "months");
          adjust = (b - anchor) / (anchor2 - anchor);
        }
        return -(wholeMonthDiff + adjust) || 0;
      }
      hooks2.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
      hooks2.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
      function toString2() {
        return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
      }
      function toISOString2(keepOffset) {
        if (!this.isValid()) {
          return null;
        }
        var utc = keepOffset !== true, m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
          return formatMoment2(
            m,
            utc ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"
          );
        }
        if (isFunction2(Date.prototype.toISOString)) {
          if (utc) {
            return this.toDate().toISOString();
          } else {
            return new Date(this.valueOf() + this.utcOffset() * 60 * 1e3).toISOString().replace("Z", formatMoment2(m, "Z"));
          }
        }
        return formatMoment2(
          m,
          utc ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ"
        );
      }
      function inspect2() {
        if (!this.isValid()) {
          return "moment.invalid(/* " + this._i + " */)";
        }
        var func = "moment", zone = "", prefix, year, datetime, suffix;
        if (!this.isLocal()) {
          func = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone";
          zone = "Z";
        }
        prefix = "[" + func + '("]';
        year = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY";
        datetime = "-MM-DD[T]HH:mm:ss.SSS";
        suffix = zone + '[")]';
        return this.format(prefix + year + datetime + suffix);
      }
      function format2(inputString) {
        if (!inputString) {
          inputString = this.isUtc() ? hooks2.defaultFormatUtc : hooks2.defaultFormat;
        }
        var output = formatMoment2(this, inputString);
        return this.localeData().postformat(output);
      }
      function from2(time, withoutSuffix) {
        if (this.isValid() && (isMoment2(time) && time.isValid() || createLocal2(time).isValid())) {
          return createDuration2({ to: this, from: time }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
          return this.localeData().invalidDate();
        }
      }
      function fromNow2(withoutSuffix) {
        return this.from(createLocal2(), withoutSuffix);
      }
      function to2(time, withoutSuffix) {
        if (this.isValid() && (isMoment2(time) && time.isValid() || createLocal2(time).isValid())) {
          return createDuration2({ from: this, to: time }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
          return this.localeData().invalidDate();
        }
      }
      function toNow2(withoutSuffix) {
        return this.to(createLocal2(), withoutSuffix);
      }
      function locale2(key) {
        var newLocaleData;
        if (key === void 0) {
          return this._locale._abbr;
        } else {
          newLocaleData = getLocale2(key);
          if (newLocaleData != null) {
            this._locale = newLocaleData;
          }
          return this;
        }
      }
      var lang2 = deprecate2(
        "moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",
        function(key) {
          if (key === void 0) {
            return this.localeData();
          } else {
            return this.locale(key);
          }
        }
      );
      function localeData2() {
        return this._locale;
      }
      var MS_PER_SECOND2 = 1e3, MS_PER_MINUTE2 = 60 * MS_PER_SECOND2, MS_PER_HOUR2 = 60 * MS_PER_MINUTE2, MS_PER_400_YEARS2 = (365 * 400 + 97) * 24 * MS_PER_HOUR2;
      function mod$12(dividend, divisor) {
        return (dividend % divisor + divisor) % divisor;
      }
      function localStartOfDate2(y, m, d) {
        if (y < 100 && y >= 0) {
          return new Date(y + 400, m, d) - MS_PER_400_YEARS2;
        } else {
          return new Date(y, m, d).valueOf();
        }
      }
      function utcStartOfDate2(y, m, d) {
        if (y < 100 && y >= 0) {
          return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS2;
        } else {
          return Date.UTC(y, m, d);
        }
      }
      function startOf2(units) {
        var time, startOfDate;
        units = normalizeUnits2(units);
        if (units === void 0 || units === "millisecond" || !this.isValid()) {
          return this;
        }
        startOfDate = this._isUTC ? utcStartOfDate2 : localStartOfDate2;
        switch (units) {
          case "year":
            time = startOfDate(this.year(), 0, 1);
            break;
          case "quarter":
            time = startOfDate(
              this.year(),
              this.month() - this.month() % 3,
              1
            );
            break;
          case "month":
            time = startOfDate(this.year(), this.month(), 1);
            break;
          case "week":
            time = startOfDate(
              this.year(),
              this.month(),
              this.date() - this.weekday()
            );
            break;
          case "isoWeek":
            time = startOfDate(
              this.year(),
              this.month(),
              this.date() - (this.isoWeekday() - 1)
            );
            break;
          case "day":
          case "date":
            time = startOfDate(this.year(), this.month(), this.date());
            break;
          case "hour":
            time = this._d.valueOf();
            time -= mod$12(
              time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE2),
              MS_PER_HOUR2
            );
            break;
          case "minute":
            time = this._d.valueOf();
            time -= mod$12(time, MS_PER_MINUTE2);
            break;
          case "second":
            time = this._d.valueOf();
            time -= mod$12(time, MS_PER_SECOND2);
            break;
        }
        this._d.setTime(time);
        hooks2.updateOffset(this, true);
        return this;
      }
      function endOf2(units) {
        var time, startOfDate;
        units = normalizeUnits2(units);
        if (units === void 0 || units === "millisecond" || !this.isValid()) {
          return this;
        }
        startOfDate = this._isUTC ? utcStartOfDate2 : localStartOfDate2;
        switch (units) {
          case "year":
            time = startOfDate(this.year() + 1, 0, 1) - 1;
            break;
          case "quarter":
            time = startOfDate(
              this.year(),
              this.month() - this.month() % 3 + 3,
              1
            ) - 1;
            break;
          case "month":
            time = startOfDate(this.year(), this.month() + 1, 1) - 1;
            break;
          case "week":
            time = startOfDate(
              this.year(),
              this.month(),
              this.date() - this.weekday() + 7
            ) - 1;
            break;
          case "isoWeek":
            time = startOfDate(
              this.year(),
              this.month(),
              this.date() - (this.isoWeekday() - 1) + 7
            ) - 1;
            break;
          case "day":
          case "date":
            time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
            break;
          case "hour":
            time = this._d.valueOf();
            time += MS_PER_HOUR2 - mod$12(
              time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE2),
              MS_PER_HOUR2
            ) - 1;
            break;
          case "minute":
            time = this._d.valueOf();
            time += MS_PER_MINUTE2 - mod$12(time, MS_PER_MINUTE2) - 1;
            break;
          case "second":
            time = this._d.valueOf();
            time += MS_PER_SECOND2 - mod$12(time, MS_PER_SECOND2) - 1;
            break;
        }
        this._d.setTime(time);
        hooks2.updateOffset(this, true);
        return this;
      }
      function valueOf2() {
        return this._d.valueOf() - (this._offset || 0) * 6e4;
      }
      function unix2() {
        return Math.floor(this.valueOf() / 1e3);
      }
      function toDate2() {
        return new Date(this.valueOf());
      }
      function toArray2() {
        var m = this;
        return [
          m.year(),
          m.month(),
          m.date(),
          m.hour(),
          m.minute(),
          m.second(),
          m.millisecond()
        ];
      }
      function toObject2() {
        var m = this;
        return {
          years: m.year(),
          months: m.month(),
          date: m.date(),
          hours: m.hours(),
          minutes: m.minutes(),
          seconds: m.seconds(),
          milliseconds: m.milliseconds()
        };
      }
      function toJSON2() {
        return this.isValid() ? this.toISOString() : null;
      }
      function isValid$22() {
        return isValid2(this);
      }
      function parsingFlags2() {
        return extend2({}, getParsingFlags2(this));
      }
      function invalidAt2() {
        return getParsingFlags2(this).overflow;
      }
      function creationData2() {
        return {
          input: this._i,
          format: this._f,
          locale: this._locale,
          isUTC: this._isUTC,
          strict: this._strict
        };
      }
      addFormatToken2("N", 0, 0, "eraAbbr");
      addFormatToken2("NN", 0, 0, "eraAbbr");
      addFormatToken2("NNN", 0, 0, "eraAbbr");
      addFormatToken2("NNNN", 0, 0, "eraName");
      addFormatToken2("NNNNN", 0, 0, "eraNarrow");
      addFormatToken2("y", ["y", 1], "yo", "eraYear");
      addFormatToken2("y", ["yy", 2], 0, "eraYear");
      addFormatToken2("y", ["yyy", 3], 0, "eraYear");
      addFormatToken2("y", ["yyyy", 4], 0, "eraYear");
      addRegexToken2("N", matchEraAbbr2);
      addRegexToken2("NN", matchEraAbbr2);
      addRegexToken2("NNN", matchEraAbbr2);
      addRegexToken2("NNNN", matchEraName2);
      addRegexToken2("NNNNN", matchEraNarrow2);
      addParseToken2(
        ["N", "NN", "NNN", "NNNN", "NNNNN"],
        function(input, array, config, token3) {
          var era = config._locale.erasParse(input, token3, config._strict);
          if (era) {
            getParsingFlags2(config).era = era;
          } else {
            getParsingFlags2(config).invalidEra = input;
          }
        }
      );
      addRegexToken2("y", matchUnsigned2);
      addRegexToken2("yy", matchUnsigned2);
      addRegexToken2("yyy", matchUnsigned2);
      addRegexToken2("yyyy", matchUnsigned2);
      addRegexToken2("yo", matchEraYearOrdinal2);
      addParseToken2(["y", "yy", "yyy", "yyyy"], YEAR2);
      addParseToken2(["yo"], function(input, array, config, token3) {
        var match;
        if (config._locale._eraYearOrdinalRegex) {
          match = input.match(config._locale._eraYearOrdinalRegex);
        }
        if (config._locale.eraYearOrdinalParse) {
          array[YEAR2] = config._locale.eraYearOrdinalParse(input, match);
        } else {
          array[YEAR2] = parseInt(input, 10);
        }
      });
      function localeEras2(m, format3) {
        var i, l, date, eras = this._eras || getLocale2("en")._eras;
        for (i = 0, l = eras.length; i < l; ++i) {
          switch (typeof eras[i].since) {
            case "string":
              date = hooks2(eras[i].since).startOf("day");
              eras[i].since = date.valueOf();
              break;
          }
          switch (typeof eras[i].until) {
            case "undefined":
              eras[i].until = Infinity;
              break;
            case "string":
              date = hooks2(eras[i].until).startOf("day").valueOf();
              eras[i].until = date.valueOf();
              break;
          }
        }
        return eras;
      }
      function localeErasParse2(eraName, format3, strict) {
        var i, l, eras = this.eras(), name, abbr, narrow;
        eraName = eraName.toUpperCase();
        for (i = 0, l = eras.length; i < l; ++i) {
          name = eras[i].name.toUpperCase();
          abbr = eras[i].abbr.toUpperCase();
          narrow = eras[i].narrow.toUpperCase();
          if (strict) {
            switch (format3) {
              case "N":
              case "NN":
              case "NNN":
                if (abbr === eraName) {
                  return eras[i];
                }
                break;
              case "NNNN":
                if (name === eraName) {
                  return eras[i];
                }
                break;
              case "NNNNN":
                if (narrow === eraName) {
                  return eras[i];
                }
                break;
            }
          } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
            return eras[i];
          }
        }
      }
      function localeErasConvertYear2(era, year) {
        var dir = era.since <= era.until ? 1 : -1;
        if (year === void 0) {
          return hooks2(era.since).year();
        } else {
          return hooks2(era.since).year() + (year - era.offset) * dir;
        }
      }
      function getEraName2() {
        var i, l, val, eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          val = this.clone().startOf("day").valueOf();
          if (eras[i].since <= val && val <= eras[i].until) {
            return eras[i].name;
          }
          if (eras[i].until <= val && val <= eras[i].since) {
            return eras[i].name;
          }
        }
        return "";
      }
      function getEraNarrow2() {
        var i, l, val, eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          val = this.clone().startOf("day").valueOf();
          if (eras[i].since <= val && val <= eras[i].until) {
            return eras[i].narrow;
          }
          if (eras[i].until <= val && val <= eras[i].since) {
            return eras[i].narrow;
          }
        }
        return "";
      }
      function getEraAbbr2() {
        var i, l, val, eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          val = this.clone().startOf("day").valueOf();
          if (eras[i].since <= val && val <= eras[i].until) {
            return eras[i].abbr;
          }
          if (eras[i].until <= val && val <= eras[i].since) {
            return eras[i].abbr;
          }
        }
        return "";
      }
      function getEraYear2() {
        var i, l, dir, val, eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          dir = eras[i].since <= eras[i].until ? 1 : -1;
          val = this.clone().startOf("day").valueOf();
          if (eras[i].since <= val && val <= eras[i].until || eras[i].until <= val && val <= eras[i].since) {
            return (this.year() - hooks2(eras[i].since).year()) * dir + eras[i].offset;
          }
        }
        return this.year();
      }
      function erasNameRegex2(isStrict) {
        if (!hasOwnProp2(this, "_erasNameRegex")) {
          computeErasParse2.call(this);
        }
        return isStrict ? this._erasNameRegex : this._erasRegex;
      }
      function erasAbbrRegex2(isStrict) {
        if (!hasOwnProp2(this, "_erasAbbrRegex")) {
          computeErasParse2.call(this);
        }
        return isStrict ? this._erasAbbrRegex : this._erasRegex;
      }
      function erasNarrowRegex2(isStrict) {
        if (!hasOwnProp2(this, "_erasNarrowRegex")) {
          computeErasParse2.call(this);
        }
        return isStrict ? this._erasNarrowRegex : this._erasRegex;
      }
      function matchEraAbbr2(isStrict, locale3) {
        return locale3.erasAbbrRegex(isStrict);
      }
      function matchEraName2(isStrict, locale3) {
        return locale3.erasNameRegex(isStrict);
      }
      function matchEraNarrow2(isStrict, locale3) {
        return locale3.erasNarrowRegex(isStrict);
      }
      function matchEraYearOrdinal2(isStrict, locale3) {
        return locale3._eraYearOrdinalRegex || matchUnsigned2;
      }
      function computeErasParse2() {
        var abbrPieces = [], namePieces = [], narrowPieces = [], mixedPieces = [], i, l, erasName, erasAbbr, erasNarrow, eras = this.eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          erasName = regexEscape2(eras[i].name);
          erasAbbr = regexEscape2(eras[i].abbr);
          erasNarrow = regexEscape2(eras[i].narrow);
          namePieces.push(erasName);
          abbrPieces.push(erasAbbr);
          narrowPieces.push(erasNarrow);
          mixedPieces.push(erasName);
          mixedPieces.push(erasAbbr);
          mixedPieces.push(erasNarrow);
        }
        this._erasRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._erasNameRegex = new RegExp("^(" + namePieces.join("|") + ")", "i");
        this._erasAbbrRegex = new RegExp("^(" + abbrPieces.join("|") + ")", "i");
        this._erasNarrowRegex = new RegExp(
          "^(" + narrowPieces.join("|") + ")",
          "i"
        );
      }
      addFormatToken2(0, ["gg", 2], 0, function() {
        return this.weekYear() % 100;
      });
      addFormatToken2(0, ["GG", 2], 0, function() {
        return this.isoWeekYear() % 100;
      });
      function addWeekYearFormatToken2(token3, getter) {
        addFormatToken2(0, [token3, token3.length], 0, getter);
      }
      addWeekYearFormatToken2("gggg", "weekYear");
      addWeekYearFormatToken2("ggggg", "weekYear");
      addWeekYearFormatToken2("GGGG", "isoWeekYear");
      addWeekYearFormatToken2("GGGGG", "isoWeekYear");
      addRegexToken2("G", matchSigned2);
      addRegexToken2("g", matchSigned2);
      addRegexToken2("GG", match1to22, match22);
      addRegexToken2("gg", match1to22, match22);
      addRegexToken2("GGGG", match1to42, match42);
      addRegexToken2("gggg", match1to42, match42);
      addRegexToken2("GGGGG", match1to62, match62);
      addRegexToken2("ggggg", match1to62, match62);
      addWeekParseToken2(
        ["gggg", "ggggg", "GGGG", "GGGGG"],
        function(input, week, config, token3) {
          week[token3.substr(0, 2)] = toInt2(input);
        }
      );
      addWeekParseToken2(["gg", "GG"], function(input, week, config, token3) {
        week[token3] = hooks2.parseTwoDigitYear(input);
      });
      function getSetWeekYear2(input) {
        return getSetWeekYearHelper2.call(
          this,
          input,
          this.week(),
          this.weekday() + this.localeData()._week.dow,
          this.localeData()._week.dow,
          this.localeData()._week.doy
        );
      }
      function getSetISOWeekYear2(input) {
        return getSetWeekYearHelper2.call(
          this,
          input,
          this.isoWeek(),
          this.isoWeekday(),
          1,
          4
        );
      }
      function getISOWeeksInYear2() {
        return weeksInYear2(this.year(), 1, 4);
      }
      function getISOWeeksInISOWeekYear2() {
        return weeksInYear2(this.isoWeekYear(), 1, 4);
      }
      function getWeeksInYear2() {
        var weekInfo = this.localeData()._week;
        return weeksInYear2(this.year(), weekInfo.dow, weekInfo.doy);
      }
      function getWeeksInWeekYear2() {
        var weekInfo = this.localeData()._week;
        return weeksInYear2(this.weekYear(), weekInfo.dow, weekInfo.doy);
      }
      function getSetWeekYearHelper2(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
          return weekOfYear2(this, dow, doy).year;
        } else {
          weeksTarget = weeksInYear2(input, dow, doy);
          if (week > weeksTarget) {
            week = weeksTarget;
          }
          return setWeekAll2.call(this, input, week, weekday, dow, doy);
        }
      }
      function setWeekAll2(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks2(weekYear, week, weekday, dow, doy), date = createUTCDate2(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
      }
      addFormatToken2("Q", 0, "Qo", "quarter");
      addRegexToken2("Q", match12);
      addParseToken2("Q", function(input, array) {
        array[MONTH2] = (toInt2(input) - 1) * 3;
      });
      function getSetQuarter2(input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
      }
      addFormatToken2("D", ["DD", 2], "Do", "date");
      addRegexToken2("D", match1to22, match1to2NoLeadingZero2);
      addRegexToken2("DD", match1to22, match22);
      addRegexToken2("Do", function(isStrict, locale3) {
        return isStrict ? locale3._dayOfMonthOrdinalParse || locale3._ordinalParse : locale3._dayOfMonthOrdinalParseLenient;
      });
      addParseToken2(["D", "DD"], DATE2);
      addParseToken2("Do", function(input, array) {
        array[DATE2] = toInt2(input.match(match1to22)[0]);
      });
      var getSetDayOfMonth2 = makeGetSet2("Date", true);
      addFormatToken2("DDD", ["DDDD", 3], "DDDo", "dayOfYear");
      addRegexToken2("DDD", match1to32);
      addRegexToken2("DDDD", match32);
      addParseToken2(["DDD", "DDDD"], function(input, array, config) {
        config._dayOfYear = toInt2(input);
      });
      function getSetDayOfYear2(input) {
        var dayOfYear = Math.round(
          (this.clone().startOf("day") - this.clone().startOf("year")) / 864e5
        ) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, "d");
      }
      addFormatToken2("m", ["mm", 2], 0, "minute");
      addRegexToken2("m", match1to22, match1to2HasZero2);
      addRegexToken2("mm", match1to22, match22);
      addParseToken2(["m", "mm"], MINUTE2);
      var getSetMinute2 = makeGetSet2("Minutes", false);
      addFormatToken2("s", ["ss", 2], 0, "second");
      addRegexToken2("s", match1to22, match1to2HasZero2);
      addRegexToken2("ss", match1to22, match22);
      addParseToken2(["s", "ss"], SECOND2);
      var getSetSecond2 = makeGetSet2("Seconds", false);
      addFormatToken2("S", 0, 0, function() {
        return ~~(this.millisecond() / 100);
      });
      addFormatToken2(0, ["SS", 2], 0, function() {
        return ~~(this.millisecond() / 10);
      });
      addFormatToken2(0, ["SSS", 3], 0, "millisecond");
      addFormatToken2(0, ["SSSS", 4], 0, function() {
        return this.millisecond() * 10;
      });
      addFormatToken2(0, ["SSSSS", 5], 0, function() {
        return this.millisecond() * 100;
      });
      addFormatToken2(0, ["SSSSSS", 6], 0, function() {
        return this.millisecond() * 1e3;
      });
      addFormatToken2(0, ["SSSSSSS", 7], 0, function() {
        return this.millisecond() * 1e4;
      });
      addFormatToken2(0, ["SSSSSSSS", 8], 0, function() {
        return this.millisecond() * 1e5;
      });
      addFormatToken2(0, ["SSSSSSSSS", 9], 0, function() {
        return this.millisecond() * 1e6;
      });
      addRegexToken2("S", match1to32, match12);
      addRegexToken2("SS", match1to32, match22);
      addRegexToken2("SSS", match1to32, match32);
      var token2, getSetMillisecond2;
      for (token2 = "SSSS"; token2.length <= 9; token2 += "S") {
        addRegexToken2(token2, matchUnsigned2);
      }
      function parseMs2(input, array) {
        array[MILLISECOND2] = toInt2(("0." + input) * 1e3);
      }
      for (token2 = "S"; token2.length <= 9; token2 += "S") {
        addParseToken2(token2, parseMs2);
      }
      getSetMillisecond2 = makeGetSet2("Milliseconds", false);
      addFormatToken2("z", 0, 0, "zoneAbbr");
      addFormatToken2("zz", 0, 0, "zoneName");
      function getZoneAbbr2() {
        return this._isUTC ? "UTC" : "";
      }
      function getZoneName2() {
        return this._isUTC ? "Coordinated Universal Time" : "";
      }
      var proto2 = Moment2.prototype;
      proto2.add = add2;
      proto2.calendar = calendar$12;
      proto2.clone = clone2;
      proto2.diff = diff2;
      proto2.endOf = endOf2;
      proto2.format = format2;
      proto2.from = from2;
      proto2.fromNow = fromNow2;
      proto2.to = to2;
      proto2.toNow = toNow2;
      proto2.get = stringGet2;
      proto2.invalidAt = invalidAt2;
      proto2.isAfter = isAfter2;
      proto2.isBefore = isBefore2;
      proto2.isBetween = isBetween2;
      proto2.isSame = isSame2;
      proto2.isSameOrAfter = isSameOrAfter2;
      proto2.isSameOrBefore = isSameOrBefore2;
      proto2.isValid = isValid$22;
      proto2.lang = lang2;
      proto2.locale = locale2;
      proto2.localeData = localeData2;
      proto2.max = prototypeMax2;
      proto2.min = prototypeMin2;
      proto2.parsingFlags = parsingFlags2;
      proto2.set = stringSet2;
      proto2.startOf = startOf2;
      proto2.subtract = subtract2;
      proto2.toArray = toArray2;
      proto2.toObject = toObject2;
      proto2.toDate = toDate2;
      proto2.toISOString = toISOString2;
      proto2.inspect = inspect2;
      if (typeof Symbol !== "undefined" && Symbol.for != null) {
        proto2[Symbol.for("nodejs.util.inspect.custom")] = function() {
          return "Moment<" + this.format() + ">";
        };
      }
      proto2.toJSON = toJSON2;
      proto2.toString = toString2;
      proto2.unix = unix2;
      proto2.valueOf = valueOf2;
      proto2.creationData = creationData2;
      proto2.eraName = getEraName2;
      proto2.eraNarrow = getEraNarrow2;
      proto2.eraAbbr = getEraAbbr2;
      proto2.eraYear = getEraYear2;
      proto2.year = getSetYear2;
      proto2.isLeapYear = getIsLeapYear2;
      proto2.weekYear = getSetWeekYear2;
      proto2.isoWeekYear = getSetISOWeekYear2;
      proto2.quarter = proto2.quarters = getSetQuarter2;
      proto2.month = getSetMonth2;
      proto2.daysInMonth = getDaysInMonth2;
      proto2.week = proto2.weeks = getSetWeek2;
      proto2.isoWeek = proto2.isoWeeks = getSetISOWeek2;
      proto2.weeksInYear = getWeeksInYear2;
      proto2.weeksInWeekYear = getWeeksInWeekYear2;
      proto2.isoWeeksInYear = getISOWeeksInYear2;
      proto2.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear2;
      proto2.date = getSetDayOfMonth2;
      proto2.day = proto2.days = getSetDayOfWeek2;
      proto2.weekday = getSetLocaleDayOfWeek2;
      proto2.isoWeekday = getSetISODayOfWeek2;
      proto2.dayOfYear = getSetDayOfYear2;
      proto2.hour = proto2.hours = getSetHour2;
      proto2.minute = proto2.minutes = getSetMinute2;
      proto2.second = proto2.seconds = getSetSecond2;
      proto2.millisecond = proto2.milliseconds = getSetMillisecond2;
      proto2.utcOffset = getSetOffset2;
      proto2.utc = setOffsetToUTC2;
      proto2.local = setOffsetToLocal2;
      proto2.parseZone = setOffsetToParsedOffset2;
      proto2.hasAlignedHourOffset = hasAlignedHourOffset2;
      proto2.isDST = isDaylightSavingTime2;
      proto2.isLocal = isLocal2;
      proto2.isUtcOffset = isUtcOffset2;
      proto2.isUtc = isUtc2;
      proto2.isUTC = isUtc2;
      proto2.zoneAbbr = getZoneAbbr2;
      proto2.zoneName = getZoneName2;
      proto2.dates = deprecate2(
        "dates accessor is deprecated. Use date instead.",
        getSetDayOfMonth2
      );
      proto2.months = deprecate2(
        "months accessor is deprecated. Use month instead",
        getSetMonth2
      );
      proto2.years = deprecate2(
        "years accessor is deprecated. Use year instead",
        getSetYear2
      );
      proto2.zone = deprecate2(
        "moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",
        getSetZone2
      );
      proto2.isDSTShifted = deprecate2(
        "isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",
        isDaylightSavingTimeShifted2
      );
      function createUnix2(input) {
        return createLocal2(input * 1e3);
      }
      function createInZone2() {
        return createLocal2.apply(null, arguments).parseZone();
      }
      function preParsePostFormat2(string) {
        return string;
      }
      var proto$12 = Locale2.prototype;
      proto$12.calendar = calendar2;
      proto$12.longDateFormat = longDateFormat2;
      proto$12.invalidDate = invalidDate2;
      proto$12.ordinal = ordinal2;
      proto$12.preparse = preParsePostFormat2;
      proto$12.postformat = preParsePostFormat2;
      proto$12.relativeTime = relativeTime2;
      proto$12.pastFuture = pastFuture2;
      proto$12.set = set2;
      proto$12.eras = localeEras2;
      proto$12.erasParse = localeErasParse2;
      proto$12.erasConvertYear = localeErasConvertYear2;
      proto$12.erasAbbrRegex = erasAbbrRegex2;
      proto$12.erasNameRegex = erasNameRegex2;
      proto$12.erasNarrowRegex = erasNarrowRegex2;
      proto$12.months = localeMonths2;
      proto$12.monthsShort = localeMonthsShort2;
      proto$12.monthsParse = localeMonthsParse2;
      proto$12.monthsRegex = monthsRegex2;
      proto$12.monthsShortRegex = monthsShortRegex2;
      proto$12.week = localeWeek2;
      proto$12.firstDayOfYear = localeFirstDayOfYear2;
      proto$12.firstDayOfWeek = localeFirstDayOfWeek2;
      proto$12.weekdays = localeWeekdays2;
      proto$12.weekdaysMin = localeWeekdaysMin2;
      proto$12.weekdaysShort = localeWeekdaysShort2;
      proto$12.weekdaysParse = localeWeekdaysParse2;
      proto$12.weekdaysRegex = weekdaysRegex2;
      proto$12.weekdaysShortRegex = weekdaysShortRegex2;
      proto$12.weekdaysMinRegex = weekdaysMinRegex2;
      proto$12.isPM = localeIsPM2;
      proto$12.meridiem = localeMeridiem2;
      function get$12(format3, index, field, setter) {
        var locale3 = getLocale2(), utc = createUTC2().set(setter, index);
        return locale3[field](utc, format3);
      }
      function listMonthsImpl2(format3, index, field) {
        if (isNumber2(format3)) {
          index = format3;
          format3 = void 0;
        }
        format3 = format3 || "";
        if (index != null) {
          return get$12(format3, index, field, "month");
        }
        var i, out = [];
        for (i = 0; i < 12; i++) {
          out[i] = get$12(format3, i, field, "month");
        }
        return out;
      }
      function listWeekdaysImpl2(localeSorted, format3, index, field) {
        if (typeof localeSorted === "boolean") {
          if (isNumber2(format3)) {
            index = format3;
            format3 = void 0;
          }
          format3 = format3 || "";
        } else {
          format3 = localeSorted;
          index = format3;
          localeSorted = false;
          if (isNumber2(format3)) {
            index = format3;
            format3 = void 0;
          }
          format3 = format3 || "";
        }
        var locale3 = getLocale2(), shift = localeSorted ? locale3._week.dow : 0, i, out = [];
        if (index != null) {
          return get$12(format3, (index + shift) % 7, field, "day");
        }
        for (i = 0; i < 7; i++) {
          out[i] = get$12(format3, (i + shift) % 7, field, "day");
        }
        return out;
      }
      function listMonths2(format3, index) {
        return listMonthsImpl2(format3, index, "months");
      }
      function listMonthsShort2(format3, index) {
        return listMonthsImpl2(format3, index, "monthsShort");
      }
      function listWeekdays2(localeSorted, format3, index) {
        return listWeekdaysImpl2(localeSorted, format3, index, "weekdays");
      }
      function listWeekdaysShort2(localeSorted, format3, index) {
        return listWeekdaysImpl2(localeSorted, format3, index, "weekdaysShort");
      }
      function listWeekdaysMin2(localeSorted, format3, index) {
        return listWeekdaysImpl2(localeSorted, format3, index, "weekdaysMin");
      }
      getSetGlobalLocale2("en", {
        eras: [
          {
            since: "0001-01-01",
            until: Infinity,
            offset: 1,
            name: "Anno Domini",
            narrow: "AD",
            abbr: "AD"
          },
          {
            since: "0000-12-31",
            until: -Infinity,
            offset: 1,
            name: "Before Christ",
            narrow: "BC",
            abbr: "BC"
          }
        ],
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function(number) {
          var b = number % 10, output = toInt2(number % 100 / 10) === 1 ? "th" : b === 1 ? "st" : b === 2 ? "nd" : b === 3 ? "rd" : "th";
          return number + output;
        }
      });
      hooks2.lang = deprecate2(
        "moment.lang is deprecated. Use moment.locale instead.",
        getSetGlobalLocale2
      );
      hooks2.langData = deprecate2(
        "moment.langData is deprecated. Use moment.localeData instead.",
        getLocale2
      );
      var mathAbs2 = Math.abs;
      function abs2() {
        var data = this._data;
        this._milliseconds = mathAbs2(this._milliseconds);
        this._days = mathAbs2(this._days);
        this._months = mathAbs2(this._months);
        data.milliseconds = mathAbs2(data.milliseconds);
        data.seconds = mathAbs2(data.seconds);
        data.minutes = mathAbs2(data.minutes);
        data.hours = mathAbs2(data.hours);
        data.months = mathAbs2(data.months);
        data.years = mathAbs2(data.years);
        return this;
      }
      function addSubtract$12(duration, input, value, direction) {
        var other = createDuration2(input, value);
        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;
        return duration._bubble();
      }
      function add$12(input, value) {
        return addSubtract$12(this, input, value, 1);
      }
      function subtract$12(input, value) {
        return addSubtract$12(this, input, value, -1);
      }
      function absCeil2(number) {
        if (number < 0) {
          return Math.floor(number);
        } else {
          return Math.ceil(number);
        }
      }
      function bubble2() {
        var milliseconds3 = this._milliseconds, days3 = this._days, months3 = this._months, data = this._data, seconds3, minutes3, hours3, years3, monthsFromDays;
        if (!(milliseconds3 >= 0 && days3 >= 0 && months3 >= 0 || milliseconds3 <= 0 && days3 <= 0 && months3 <= 0)) {
          milliseconds3 += absCeil2(monthsToDays2(months3) + days3) * 864e5;
          days3 = 0;
          months3 = 0;
        }
        data.milliseconds = milliseconds3 % 1e3;
        seconds3 = absFloor2(milliseconds3 / 1e3);
        data.seconds = seconds3 % 60;
        minutes3 = absFloor2(seconds3 / 60);
        data.minutes = minutes3 % 60;
        hours3 = absFloor2(minutes3 / 60);
        data.hours = hours3 % 24;
        days3 += absFloor2(hours3 / 24);
        monthsFromDays = absFloor2(daysToMonths2(days3));
        months3 += monthsFromDays;
        days3 -= absCeil2(monthsToDays2(monthsFromDays));
        years3 = absFloor2(months3 / 12);
        months3 %= 12;
        data.days = days3;
        data.months = months3;
        data.years = years3;
        return this;
      }
      function daysToMonths2(days3) {
        return days3 * 4800 / 146097;
      }
      function monthsToDays2(months3) {
        return months3 * 146097 / 4800;
      }
      function as2(units) {
        if (!this.isValid()) {
          return NaN;
        }
        var days3, months3, milliseconds3 = this._milliseconds;
        units = normalizeUnits2(units);
        if (units === "month" || units === "quarter" || units === "year") {
          days3 = this._days + milliseconds3 / 864e5;
          months3 = this._months + daysToMonths2(days3);
          switch (units) {
            case "month":
              return months3;
            case "quarter":
              return months3 / 3;
            case "year":
              return months3 / 12;
          }
        } else {
          days3 = this._days + Math.round(monthsToDays2(this._months));
          switch (units) {
            case "week":
              return days3 / 7 + milliseconds3 / 6048e5;
            case "day":
              return days3 + milliseconds3 / 864e5;
            case "hour":
              return days3 * 24 + milliseconds3 / 36e5;
            case "minute":
              return days3 * 1440 + milliseconds3 / 6e4;
            case "second":
              return days3 * 86400 + milliseconds3 / 1e3;
            case "millisecond":
              return Math.floor(days3 * 864e5) + milliseconds3;
            default:
              throw new Error("Unknown unit " + units);
          }
        }
      }
      function makeAs2(alias) {
        return function() {
          return this.as(alias);
        };
      }
      var asMilliseconds2 = makeAs2("ms"), asSeconds2 = makeAs2("s"), asMinutes2 = makeAs2("m"), asHours2 = makeAs2("h"), asDays2 = makeAs2("d"), asWeeks2 = makeAs2("w"), asMonths2 = makeAs2("M"), asQuarters2 = makeAs2("Q"), asYears2 = makeAs2("y"), valueOf$12 = asMilliseconds2;
      function clone$12() {
        return createDuration2(this);
      }
      function get$22(units) {
        units = normalizeUnits2(units);
        return this.isValid() ? this[units + "s"]() : NaN;
      }
      function makeGetter2(name) {
        return function() {
          return this.isValid() ? this._data[name] : NaN;
        };
      }
      var milliseconds2 = makeGetter2("milliseconds"), seconds2 = makeGetter2("seconds"), minutes2 = makeGetter2("minutes"), hours2 = makeGetter2("hours"), days2 = makeGetter2("days"), months2 = makeGetter2("months"), years2 = makeGetter2("years");
      function weeks2() {
        return absFloor2(this.days() / 7);
      }
      var round2 = Math.round, thresholds2 = {
        ss: 44,
        // a few seconds to seconds
        s: 45,
        // seconds to minute
        m: 45,
        // minutes to hour
        h: 22,
        // hours to day
        d: 26,
        // days to month/week
        w: null,
        // weeks to month
        M: 11
        // months to year
      };
      function substituteTimeAgo2(string, number, withoutSuffix, isFuture, locale3) {
        return locale3.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
      }
      function relativeTime$12(posNegDuration, withoutSuffix, thresholds3, locale3) {
        var duration = createDuration2(posNegDuration).abs(), seconds3 = round2(duration.as("s")), minutes3 = round2(duration.as("m")), hours3 = round2(duration.as("h")), days3 = round2(duration.as("d")), months3 = round2(duration.as("M")), weeks3 = round2(duration.as("w")), years3 = round2(duration.as("y")), a = seconds3 <= thresholds3.ss && ["s", seconds3] || seconds3 < thresholds3.s && ["ss", seconds3] || minutes3 <= 1 && ["m"] || minutes3 < thresholds3.m && ["mm", minutes3] || hours3 <= 1 && ["h"] || hours3 < thresholds3.h && ["hh", hours3] || days3 <= 1 && ["d"] || days3 < thresholds3.d && ["dd", days3];
        if (thresholds3.w != null) {
          a = a || weeks3 <= 1 && ["w"] || weeks3 < thresholds3.w && ["ww", weeks3];
        }
        a = a || months3 <= 1 && ["M"] || months3 < thresholds3.M && ["MM", months3] || years3 <= 1 && ["y"] || ["yy", years3];
        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale3;
        return substituteTimeAgo2.apply(null, a);
      }
      function getSetRelativeTimeRounding2(roundingFunction) {
        if (roundingFunction === void 0) {
          return round2;
        }
        if (typeof roundingFunction === "function") {
          round2 = roundingFunction;
          return true;
        }
        return false;
      }
      function getSetRelativeTimeThreshold2(threshold, limit) {
        if (thresholds2[threshold] === void 0) {
          return false;
        }
        if (limit === void 0) {
          return thresholds2[threshold];
        }
        thresholds2[threshold] = limit;
        if (threshold === "s") {
          thresholds2.ss = limit - 1;
        }
        return true;
      }
      function humanize2(argWithSuffix, argThresholds) {
        if (!this.isValid()) {
          return this.localeData().invalidDate();
        }
        var withSuffix = false, th = thresholds2, locale3, output;
        if (typeof argWithSuffix === "object") {
          argThresholds = argWithSuffix;
          argWithSuffix = false;
        }
        if (typeof argWithSuffix === "boolean") {
          withSuffix = argWithSuffix;
        }
        if (typeof argThresholds === "object") {
          th = Object.assign({}, thresholds2, argThresholds);
          if (argThresholds.s != null && argThresholds.ss == null) {
            th.ss = argThresholds.s - 1;
          }
        }
        locale3 = this.localeData();
        output = relativeTime$12(this, !withSuffix, th, locale3);
        if (withSuffix) {
          output = locale3.pastFuture(+this, output);
        }
        return locale3.postformat(output);
      }
      var abs$12 = Math.abs;
      function sign2(x) {
        return (x > 0) - (x < 0) || +x;
      }
      function toISOString$12() {
        if (!this.isValid()) {
          return this.localeData().invalidDate();
        }
        var seconds3 = abs$12(this._milliseconds) / 1e3, days3 = abs$12(this._days), months3 = abs$12(this._months), minutes3, hours3, years3, s, total = this.asSeconds(), totalSign, ymSign, daysSign, hmsSign;
        if (!total) {
          return "P0D";
        }
        minutes3 = absFloor2(seconds3 / 60);
        hours3 = absFloor2(minutes3 / 60);
        seconds3 %= 60;
        minutes3 %= 60;
        years3 = absFloor2(months3 / 12);
        months3 %= 12;
        s = seconds3 ? seconds3.toFixed(3).replace(/\.?0+$/, "") : "";
        totalSign = total < 0 ? "-" : "";
        ymSign = sign2(this._months) !== sign2(total) ? "-" : "";
        daysSign = sign2(this._days) !== sign2(total) ? "-" : "";
        hmsSign = sign2(this._milliseconds) !== sign2(total) ? "-" : "";
        return totalSign + "P" + (years3 ? ymSign + years3 + "Y" : "") + (months3 ? ymSign + months3 + "M" : "") + (days3 ? daysSign + days3 + "D" : "") + (hours3 || minutes3 || seconds3 ? "T" : "") + (hours3 ? hmsSign + hours3 + "H" : "") + (minutes3 ? hmsSign + minutes3 + "M" : "") + (seconds3 ? hmsSign + s + "S" : "");
      }
      var proto$22 = Duration2.prototype;
      proto$22.isValid = isValid$12;
      proto$22.abs = abs2;
      proto$22.add = add$12;
      proto$22.subtract = subtract$12;
      proto$22.as = as2;
      proto$22.asMilliseconds = asMilliseconds2;
      proto$22.asSeconds = asSeconds2;
      proto$22.asMinutes = asMinutes2;
      proto$22.asHours = asHours2;
      proto$22.asDays = asDays2;
      proto$22.asWeeks = asWeeks2;
      proto$22.asMonths = asMonths2;
      proto$22.asQuarters = asQuarters2;
      proto$22.asYears = asYears2;
      proto$22.valueOf = valueOf$12;
      proto$22._bubble = bubble2;
      proto$22.clone = clone$12;
      proto$22.get = get$22;
      proto$22.milliseconds = milliseconds2;
      proto$22.seconds = seconds2;
      proto$22.minutes = minutes2;
      proto$22.hours = hours2;
      proto$22.days = days2;
      proto$22.weeks = weeks2;
      proto$22.months = months2;
      proto$22.years = years2;
      proto$22.humanize = humanize2;
      proto$22.toISOString = toISOString$12;
      proto$22.toString = toISOString$12;
      proto$22.toJSON = toISOString$12;
      proto$22.locale = locale2;
      proto$22.localeData = localeData2;
      proto$22.toIsoString = deprecate2(
        "toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",
        toISOString$12
      );
      proto$22.lang = lang2;
      addFormatToken2("X", 0, 0, "unix");
      addFormatToken2("x", 0, 0, "valueOf");
      addRegexToken2("x", matchSigned2);
      addRegexToken2("X", matchTimestamp2);
      addParseToken2("X", function(input, array, config) {
        config._d = new Date(parseFloat(input) * 1e3);
      });
      addParseToken2("x", function(input, array, config) {
        config._d = new Date(toInt2(input));
      });
      hooks2.version = "2.30.1";
      setHookCallback2(createLocal2);
      hooks2.fn = proto2;
      hooks2.min = min2;
      hooks2.max = max2;
      hooks2.now = now2;
      hooks2.utc = createUTC2;
      hooks2.unix = createUnix2;
      hooks2.months = listMonths2;
      hooks2.isDate = isDate2;
      hooks2.locale = getSetGlobalLocale2;
      hooks2.invalid = createInvalid2;
      hooks2.duration = createDuration2;
      hooks2.isMoment = isMoment2;
      hooks2.weekdays = listWeekdays2;
      hooks2.parseZone = createInZone2;
      hooks2.localeData = getLocale2;
      hooks2.isDuration = isDuration2;
      hooks2.monthsShort = listMonthsShort2;
      hooks2.weekdaysMin = listWeekdaysMin2;
      hooks2.defineLocale = defineLocale2;
      hooks2.updateLocale = updateLocale2;
      hooks2.locales = listLocales2;
      hooks2.weekdaysShort = listWeekdaysShort2;
      hooks2.normalizeUnits = normalizeUnits2;
      hooks2.relativeTimeRounding = getSetRelativeTimeRounding2;
      hooks2.relativeTimeThreshold = getSetRelativeTimeThreshold2;
      hooks2.calendarFormat = getCalendarFormat2;
      hooks2.prototype = proto2;
      hooks2.HTML5_FMT = {
        DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
        // <input type="datetime-local" />
        DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
        // <input type="datetime-local" step="1" />
        DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
        // <input type="datetime-local" step="0.001" />
        DATE: "YYYY-MM-DD",
        // <input type="date" />
        TIME: "HH:mm",
        // <input type="time" />
        TIME_SECONDS: "HH:mm:ss",
        // <input type="time" step="1" />
        TIME_MS: "HH:mm:ss.SSS",
        // <input type="time" step="0.001" />
        WEEK: "GGGG-[W]WW",
        // <input type="week" />
        MONTH: "YYYY-MM"
        // <input type="month" />
      };
      return hooks2;
    });
  }
});

// node_modules/jalaali-js/index.js
var require_jalaali_js = __commonJS({
  "node_modules/jalaali-js/index.js"(exports, module2) {
    module2.exports = {
      toJalaali,
      toGregorian,
      isValidJalaaliDate,
      isLeapJalaaliYear,
      jalaaliMonthLength,
      jalCal,
      j2d,
      d2j,
      g2d,
      d2g,
      jalaaliToDateObject,
      jalaaliWeek
    };
    var breaks = [
      -61,
      9,
      38,
      199,
      426,
      686,
      756,
      818,
      1111,
      1181,
      1210,
      1635,
      2060,
      2097,
      2192,
      2262,
      2324,
      2394,
      2456,
      3178
    ];
    function toJalaali(gy, gm, gd) {
      if (Object.prototype.toString.call(gy) === "[object Date]") {
        gd = gy.getDate();
        gm = gy.getMonth() + 1;
        gy = gy.getFullYear();
      }
      return d2j(g2d(gy, gm, gd));
    }
    function toGregorian(jy, jm, jd) {
      return d2g(j2d(jy, jm, jd));
    }
    function isValidJalaaliDate(jy, jm, jd) {
      return jy >= -61 && jy <= 3177 && jm >= 1 && jm <= 12 && jd >= 1 && jd <= jalaaliMonthLength(jy, jm);
    }
    function isLeapJalaaliYear(jy) {
      return jalCalLeap(jy) === 0;
    }
    function jalaaliMonthLength(jy, jm) {
      if (jm <= 6) return 31;
      if (jm <= 11) return 30;
      if (isLeapJalaaliYear(jy)) return 30;
      return 29;
    }
    function jalCalLeap(jy) {
      var bl = breaks.length, jp = breaks[0], jm, jump, leap, n, i;
      if (jy < jp || jy >= breaks[bl - 1])
        throw new Error("Invalid Jalaali year " + jy);
      for (i = 1; i < bl; i += 1) {
        jm = breaks[i];
        jump = jm - jp;
        if (jy < jm)
          break;
        jp = jm;
      }
      n = jy - jp;
      if (jump - n < 6)
        n = n - jump + div(jump + 4, 33) * 33;
      leap = mod2(mod2(n + 1, 33) - 1, 4);
      if (leap === -1) {
        leap = 4;
      }
      return leap;
    }
    function jalCal(jy, withoutLeap) {
      var bl = breaks.length, gy = jy + 621, leapJ = -14, jp = breaks[0], jm, jump, leap, leapG, march, n, i;
      if (jy < jp || jy >= breaks[bl - 1])
        throw new Error("Invalid Jalaali year " + jy);
      for (i = 1; i < bl; i += 1) {
        jm = breaks[i];
        jump = jm - jp;
        if (jy < jm)
          break;
        leapJ = leapJ + div(jump, 33) * 8 + div(mod2(jump, 33), 4);
        jp = jm;
      }
      n = jy - jp;
      leapJ = leapJ + div(n, 33) * 8 + div(mod2(n, 33) + 3, 4);
      if (mod2(jump, 33) === 4 && jump - n === 4)
        leapJ += 1;
      leapG = div(gy, 4) - div((div(gy, 100) + 1) * 3, 4) - 150;
      march = 20 + leapJ - leapG;
      if (withoutLeap) return { gy, march };
      if (jump - n < 6)
        n = n - jump + div(jump + 4, 33) * 33;
      leap = mod2(mod2(n + 1, 33) - 1, 4);
      if (leap === -1) {
        leap = 4;
      }
      return {
        leap,
        gy,
        march
      };
    }
    function j2d(jy, jm, jd) {
      var r = jalCal(jy, true);
      return g2d(r.gy, 3, r.march) + (jm - 1) * 31 - div(jm, 7) * (jm - 7) + jd - 1;
    }
    function d2j(jdn) {
      var gy = d2g(jdn).gy, jy = gy - 621, r = jalCal(jy, false), jdn1f = g2d(gy, 3, r.march), jd, jm, k;
      k = jdn - jdn1f;
      if (k >= 0) {
        if (k <= 185) {
          jm = 1 + div(k, 31);
          jd = mod2(k, 31) + 1;
          return {
            jy,
            jm,
            jd
          };
        } else {
          k -= 186;
        }
      } else {
        jy -= 1;
        k += 179;
        if (r.leap === 1)
          k += 1;
      }
      jm = 7 + div(k, 30);
      jd = mod2(k, 30) + 1;
      return {
        jy,
        jm,
        jd
      };
    }
    function g2d(gy, gm, gd) {
      var d = div((gy + div(gm - 8, 6) + 100100) * 1461, 4) + div(153 * mod2(gm + 9, 12) + 2, 5) + gd - 34840408;
      d = d - div(div(gy + 100100 + div(gm - 8, 6), 100) * 3, 4) + 752;
      return d;
    }
    function d2g(jdn) {
      var j, i, gd, gm, gy;
      j = 4 * jdn + 139361631;
      j = j + div(div(4 * jdn + 183187720, 146097) * 3, 4) * 4 - 3908;
      i = div(mod2(j, 1461), 4) * 5 + 308;
      gd = div(mod2(i, 153), 5) + 1;
      gm = mod2(div(i, 153), 12) + 1;
      gy = div(j, 1461) - 100100 + div(8 - gm, 6);
      return {
        gy,
        gm,
        gd
      };
    }
    function jalaaliWeek(jy, jm, jd) {
      var dayOfWeek = jalaaliToDateObject(jy, jm, jd).getDay();
      var startDayDifference = dayOfWeek == 6 ? 0 : -(dayOfWeek + 1);
      var endDayDifference = 6 + startDayDifference;
      return {
        saturday: d2j(j2d(jy, jm, jd + startDayDifference)),
        friday: d2j(j2d(jy, jm, jd + endDayDifference))
      };
    }
    function jalaaliToDateObject(jy, jm, jd, h, m, s, ms) {
      var gregorianCalenderDate = toGregorian(jy, jm, jd);
      return new Date(
        gregorianCalenderDate.gy,
        gregorianCalenderDate.gm - 1,
        gregorianCalenderDate.gd,
        h || 0,
        m || 0,
        s || 0,
        ms || 0
      );
    }
    function div(a, b) {
      return ~~(a / b);
    }
    function mod2(a, b) {
      return a - ~~(a / b) * b;
    }
  }
});

// node_modules/moment-jalaali/index.js
var require_moment_jalaali = __commonJS({
  "node_modules/moment-jalaali/index.js"(exports, module2) {
    module2.exports = jMoment;
    var moment = require_moment();
    var jalaali = require_jalaali_js();
    var formattingTokens2 = /(\[[^\[]*\])|(\\)?j(Mo|MM?M?M?|Do|DDDo|DD?D?D?|w[o|w]?|YYYYY|YYYY|YY|gg(ggg?)?|)|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|SS?S?|X|zz?|ZZ?|.)/g;
    var localFormattingTokens2 = /(\[[^\[]*\])|(\\)?(LTS?|LL?L?L?|l{1,4})/g;
    var parseTokenOneOrTwoDigits = /\d\d?/;
    var parseTokenOneToThreeDigits = /\d{1,3}/;
    var parseTokenThreeDigits = /\d{3}/;
    var parseTokenFourDigits = /\d{1,4}/;
    var parseTokenSixDigits = /[+\-]?\d{1,6}/;
    var parseTokenWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;
    var parseTokenTimezone = /Z|[\+\-]\d\d:?\d\d/i;
    var parseTokenT = /T/i;
    var parseTokenTimestampMs = /[\+\-]?\d+(\.\d{1,3})?/;
    var symbolMap = {
      "1": "۱",
      "2": "۲",
      "3": "۳",
      "4": "۴",
      "5": "۵",
      "6": "۶",
      "7": "۷",
      "8": "۸",
      "9": "۹",
      "0": "۰"
    };
    var numberMap = {
      "۱": "1",
      "۲": "2",
      "۳": "3",
      "۴": "4",
      "۵": "5",
      "۶": "6",
      "۷": "7",
      "۸": "8",
      "۹": "9",
      "۰": "0"
    };
    var unitAliases = {
      jm: "jmonth",
      jmonths: "jmonth",
      jy: "jyear",
      jyears: "jyear"
    };
    var formatFunctions2 = {};
    var ordinalizeTokens = "DDD w M D".split(" ");
    var paddedTokens = "M D w".split(" ");
    var formatTokenFunctions2 = {
      jM: function() {
        return this.jMonth() + 1;
      },
      jMMM: function(format2) {
        return this.localeData().jMonthsShort(this, format2);
      },
      jMMMM: function(format2) {
        return this.localeData().jMonths(this, format2);
      },
      jD: function() {
        return this.jDate();
      },
      jDDD: function() {
        return this.jDayOfYear();
      },
      jw: function() {
        return this.jWeek();
      },
      jYY: function() {
        return leftZeroFill(this.jYear() % 100, 2);
      },
      jYYYY: function() {
        return leftZeroFill(this.jYear(), 4);
      },
      jYYYYY: function() {
        return leftZeroFill(this.jYear(), 5);
      },
      jgg: function() {
        return leftZeroFill(this.jWeekYear() % 100, 2);
      },
      jgggg: function() {
        return this.jWeekYear();
      },
      jggggg: function() {
        return leftZeroFill(this.jWeekYear(), 5);
      }
    };
    function padToken(func, count) {
      return function(a) {
        return leftZeroFill(func.call(this, a), count);
      };
    }
    function ordinalizeToken(func, period) {
      return function(a) {
        return this.localeData().ordinal(func.call(this, a), period);
      };
    }
    (function() {
      var i;
      while (ordinalizeTokens.length) {
        i = ordinalizeTokens.pop();
        formatTokenFunctions2["j" + i + "o"] = ordinalizeToken(formatTokenFunctions2["j" + i], i);
      }
      while (paddedTokens.length) {
        i = paddedTokens.pop();
        formatTokenFunctions2["j" + i + i] = padToken(formatTokenFunctions2["j" + i], 2);
      }
      formatTokenFunctions2.jDDDD = padToken(formatTokenFunctions2.jDDD, 3);
    })();
    function extend2(a, b) {
      var key;
      for (key in b)
        if (b.hasOwnProperty(key))
          a[key] = b[key];
      return a;
    }
    function leftZeroFill(number, targetLength) {
      var output = number + "";
      while (output.length < targetLength)
        output = "0" + output;
      return output;
    }
    function isArray2(input) {
      return Object.prototype.toString.call(input) === "[object Array]";
    }
    function normalizeUnits2(units) {
      if (units) {
        var lowered = units.toLowerCase();
        units = unitAliases[lowered] || lowered;
      }
      return units;
    }
    function setDate(m, year, month, date) {
      var d = m._d;
      if (isNaN(year)) {
        m._isValid = false;
      }
      if (m._isUTC) {
        m._d = new Date(Date.UTC(
          year,
          month,
          date,
          d.getUTCHours(),
          d.getUTCMinutes(),
          d.getUTCSeconds(),
          d.getUTCMilliseconds()
        ));
      } else {
        m._d = new Date(
          year,
          month,
          date,
          d.getHours(),
          d.getMinutes(),
          d.getSeconds(),
          d.getMilliseconds()
        );
      }
    }
    function objectCreate(parent) {
      function F() {
      }
      F.prototype = parent;
      return new F();
    }
    function getPrototypeOf(object) {
      if (Object.getPrototypeOf)
        return Object.getPrototypeOf(object);
      else if ("".__proto__)
        return object.__proto__;
      else
        return object.constructor.prototype;
    }
    extend2(
      getPrototypeOf(moment.localeData()),
      {
        _jMonths: [
          "Farvardin",
          "Ordibehesht",
          "Khordaad",
          "Tir",
          "Amordaad",
          "Shahrivar",
          "Mehr",
          "Aabaan",
          "Aazar",
          "Dey",
          "Bahman",
          "Esfand"
        ],
        jMonths: function(m) {
          return this._jMonths[m.jMonth()];
        },
        _jMonthsShort: [
          "Far",
          "Ord",
          "Kho",
          "Tir",
          "Amo",
          "Sha",
          "Meh",
          "Aab",
          "Aaz",
          "Dey",
          "Bah",
          "Esf"
        ],
        jMonthsShort: function(m) {
          return this._jMonthsShort[m.jMonth()];
        },
        jMonthsParse: function(monthName) {
          var i, mom, regex;
          if (!this._jMonthsParse)
            this._jMonthsParse = [];
          for (i = 0; i < 12; i += 1) {
            if (!this._jMonthsParse[i]) {
              mom = jMoment([2e3, (2 + i) % 12, 25]);
              regex = "^" + this.jMonths(mom, "") + "|^" + this.jMonthsShort(mom, "");
              this._jMonthsParse[i] = new RegExp(regex.replace(".", ""), "i");
            }
            if (this._jMonthsParse[i].test(monthName))
              return i;
          }
        }
      }
    );
    function makeFormatFunction2(format2) {
      var array = format2.match(formattingTokens2), length = array.length, i;
      for (i = 0; i < length; i += 1)
        if (formatTokenFunctions2[array[i]])
          array[i] = formatTokenFunctions2[array[i]];
      return function(mom) {
        var output = "";
        for (i = 0; i < length; i += 1)
          output += array[i] instanceof Function ? "[" + array[i].call(mom, format2) + "]" : array[i];
        return output;
      };
    }
    function getParseRegexForToken2(token2, config) {
      switch (token2) {
        case "jDDDD":
          return parseTokenThreeDigits;
        case "jYYYY":
          return parseTokenFourDigits;
        case "jYYYYY":
          return parseTokenSixDigits;
        case "jDDD":
          return parseTokenOneToThreeDigits;
        case "jMMM":
        case "jMMMM":
          return parseTokenWord;
        case "jMM":
        case "jDD":
        case "jYY":
        case "jM":
        case "jD":
          return parseTokenOneOrTwoDigits;
        case "DDDD":
          return parseTokenThreeDigits;
        case "YYYY":
          return parseTokenFourDigits;
        case "YYYYY":
          return parseTokenSixDigits;
        case "S":
        case "SS":
        case "SSS":
        case "DDD":
          return parseTokenOneToThreeDigits;
        case "MMM":
        case "MMMM":
        case "dd":
        case "ddd":
        case "dddd":
          return parseTokenWord;
        case "a":
        case "A":
          return moment.localeData(config._l)._meridiemParse;
        case "X":
          return parseTokenTimestampMs;
        case "Z":
        case "ZZ":
          return parseTokenTimezone;
        case "T":
          return parseTokenT;
        case "MM":
        case "DD":
        case "YY":
        case "HH":
        case "hh":
        case "mm":
        case "ss":
        case "M":
        case "D":
        case "d":
        case "H":
        case "h":
        case "m":
        case "s":
          return parseTokenOneOrTwoDigits;
        default:
          return new RegExp(token2.replace("\\", ""));
      }
    }
    function addTimeToArrayFromToken2(token2, input, config) {
      var a, datePartArray = config._a;
      switch (token2) {
        case "jM":
        case "jMM":
          datePartArray[1] = input == null ? 0 : ~~input - 1;
          break;
        case "jMMM":
        case "jMMMM":
          a = moment.localeData(config._l).jMonthsParse(input);
          if (a != null)
            datePartArray[1] = a;
          else
            config._isValid = false;
          break;
        case "jD":
        case "jDD":
        case "jDDD":
        case "jDDDD":
          if (input != null)
            datePartArray[2] = ~~input;
          break;
        case "jYY":
          datePartArray[0] = ~~input + (~~input > 47 ? 1300 : 1400);
          break;
        case "jYYYY":
        case "jYYYYY":
          datePartArray[0] = ~~input;
      }
      if (input == null)
        config._isValid = false;
    }
    function dateFromArray(config) {
      var g, j, jy = config._a[0], jm = config._a[1], jd = config._a[2];
      if (jy == null && jm == null && jd == null)
        return [0, 0, 1];
      jy = jy != null ? jy : 0;
      jm = jm != null ? jm : 0;
      jd = jd != null ? jd : 1;
      if (jd < 1 || jd > jMoment.jDaysInMonth(jy, jm) || jm < 0 || jm > 11)
        config._isValid = false;
      g = toGregorian(jy, jm, jd);
      j = toJalaali(g.gy, g.gm, g.gd);
      if (isNaN(g.gy))
        config._isValid = false;
      config._jDiff = 0;
      if (~~j.jy !== jy)
        config._jDiff += 1;
      if (~~j.jm !== jm)
        config._jDiff += 1;
      if (~~j.jd !== jd)
        config._jDiff += 1;
      return [g.gy, g.gm, g.gd];
    }
    function makeDateFromStringAndFormat(config) {
      var tokens2 = config._f.match(formattingTokens2), string = config._i + "", len = tokens2.length, i, token2, parsedInput;
      config._a = [];
      for (i = 0; i < len; i += 1) {
        token2 = tokens2[i];
        parsedInput = (getParseRegexForToken2(token2, config).exec(string) || [])[0];
        if (parsedInput)
          string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
        if (formatTokenFunctions2[token2])
          addTimeToArrayFromToken2(token2, parsedInput, config);
      }
      if (string)
        config._il = string;
      return dateFromArray(config);
    }
    function makeDateFromStringAndArray(config, utc) {
      var len = config._f.length, i, format2, tempMoment, bestMoment, currentScore, scoreToBeat;
      if (len === 0) {
        return makeMoment(/* @__PURE__ */ new Date(NaN));
      }
      for (i = 0; i < len; i += 1) {
        format2 = config._f[i];
        currentScore = 0;
        tempMoment = makeMoment(config._i, format2, config._l, config._strict, utc);
        if (!tempMoment.isValid()) continue;
        currentScore += tempMoment._jDiff;
        if (tempMoment._il)
          currentScore += tempMoment._il.length;
        if (scoreToBeat == null || currentScore < scoreToBeat) {
          scoreToBeat = currentScore;
          bestMoment = tempMoment;
        }
      }
      return bestMoment;
    }
    function removeParsedTokens(config) {
      var string = config._i + "", input = "", format2 = "", array = config._f.match(formattingTokens2), len = array.length, i, match, parsed;
      for (i = 0; i < len; i += 1) {
        match = array[i];
        parsed = (getParseRegexForToken2(match, config).exec(string) || [])[0];
        if (parsed)
          string = string.slice(string.indexOf(parsed) + parsed.length);
        if (!(formatTokenFunctions2[match] instanceof Function)) {
          format2 += match;
          if (parsed)
            input += parsed;
        }
      }
      config._i = input;
      config._f = format2;
    }
    function jWeekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
      var end = firstDayOfWeekOfYear - firstDayOfWeek, daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(), adjustedMoment;
      if (daysToDayOfWeek > end) {
        daysToDayOfWeek -= 7;
      }
      if (daysToDayOfWeek < end - 7) {
        daysToDayOfWeek += 7;
      }
      adjustedMoment = jMoment(mom).add(daysToDayOfWeek, "d");
      return {
        week: Math.ceil(adjustedMoment.jDayOfYear() / 7),
        year: adjustedMoment.jYear()
      };
    }
    var maxTimestamp = 57724432199999;
    function makeMoment(input, format2, lang2, strict, utc) {
      if (typeof lang2 === "boolean") {
        strict = lang2;
        lang2 = void 0;
      }
      if (format2 && typeof format2 === "string")
        format2 = fixFormat(format2, moment);
      var config = {
        _i: input,
        _f: format2,
        _l: lang2,
        _strict: strict,
        _isUTC: utc
      }, date, m, jm, origInput = input, origFormat = format2;
      if (format2) {
        if (isArray2(format2)) {
          return makeDateFromStringAndArray(config, utc);
        } else {
          date = makeDateFromStringAndFormat(config);
          removeParsedTokens(config);
          format2 = "YYYY-MM-DD-" + config._f;
          input = leftZeroFill(date[0], 4) + "-" + leftZeroFill(date[1] + 1, 2) + "-" + leftZeroFill(date[2], 2) + "-" + config._i;
        }
      }
      if (utc)
        m = moment.utc(input, format2, lang2, strict);
      else
        m = moment(input, format2, lang2, strict);
      if (config._isValid === false)
        m._isValid = false;
      m._jDiff = config._jDiff || 0;
      jm = objectCreate(jMoment.fn);
      extend2(jm, m);
      if (strict && format2 && jm.isValid()) {
        jm._isValid = jm.format(origFormat) === origInput;
      }
      if (m._d.getTime() > maxTimestamp) {
        jm._isValid = false;
      }
      return jm;
    }
    function jMoment(input, format2, lang2, strict) {
      return makeMoment(input, format2, lang2, strict, false);
    }
    extend2(jMoment, moment);
    jMoment.fn = objectCreate(moment.fn);
    jMoment.utc = function(input, format2, lang2, strict) {
      return makeMoment(input, format2, lang2, strict, true);
    };
    jMoment.unix = function(input) {
      return makeMoment(input * 1e3);
    };
    function fixFormat(format2, _moment) {
      var i = 5;
      var replace = function(input) {
        return _moment.localeData().longDateFormat(input) || input;
      };
      while (i > 0 && localFormattingTokens2.test(format2)) {
        i -= 1;
        format2 = format2.replace(localFormattingTokens2, replace);
      }
      return format2;
    }
    jMoment.fn.format = function(format2) {
      if (format2) {
        format2 = fixFormat(format2, this);
        if (!formatFunctions2[format2]) {
          formatFunctions2[format2] = makeFormatFunction2(format2);
        }
        format2 = formatFunctions2[format2](this);
      }
      return moment.fn.format.call(this, format2);
    };
    jMoment.fn.jYear = function(input) {
      var lastDay, j, g;
      if (typeof input === "number") {
        j = toJalaali(this.year(), this.month(), this.date());
        lastDay = Math.min(j.jd, jMoment.jDaysInMonth(input, j.jm));
        g = toGregorian(input, j.jm, lastDay);
        setDate(this, g.gy, g.gm, g.gd);
        moment.updateOffset(this);
        return this;
      } else {
        return toJalaali(this.year(), this.month(), this.date()).jy;
      }
    };
    jMoment.fn.jMonth = function(input) {
      var lastDay, j, g;
      if (input != null) {
        if (typeof input === "string") {
          input = this.localeData().jMonthsParse(input);
          if (typeof input !== "number")
            return this;
        }
        j = toJalaali(this.year(), this.month(), this.date());
        lastDay = Math.min(j.jd, jMoment.jDaysInMonth(j.jy, input));
        this.jYear(j.jy + div(input, 12));
        input = mod2(input, 12);
        if (input < 0) {
          input += 12;
          this.jYear(this.jYear() - 1);
        }
        g = toGregorian(this.jYear(), input, lastDay);
        setDate(this, g.gy, g.gm, g.gd);
        moment.updateOffset(this);
        return this;
      } else {
        return toJalaali(this.year(), this.month(), this.date()).jm;
      }
    };
    jMoment.fn.jDate = function(input) {
      var j, g;
      if (typeof input === "number") {
        j = toJalaali(this.year(), this.month(), this.date());
        g = toGregorian(j.jy, j.jm, input);
        setDate(this, g.gy, g.gm, g.gd);
        moment.updateOffset(this);
        return this;
      } else {
        return toJalaali(this.year(), this.month(), this.date()).jd;
      }
    };
    jMoment.fn.jDayOfYear = function(input) {
      var dayOfYear = Math.round((jMoment(this).startOf("day") - jMoment(this).startOf("jYear")) / 864e5) + 1;
      return input == null ? dayOfYear : this.add(input - dayOfYear, "d");
    };
    jMoment.fn.jWeek = function(input) {
      var week = jWeekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).week;
      return input == null ? week : this.add((input - week) * 7, "d");
    };
    jMoment.fn.jWeekYear = function(input) {
      var year = jWeekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;
      return input == null ? year : this.add(input - year, "y");
    };
    jMoment.fn.add = function(val, units) {
      var temp;
      if (units !== null && !isNaN(+units)) {
        temp = val;
        val = units;
        units = temp;
      }
      units = normalizeUnits2(units);
      if (units === "jyear") {
        this.jYear(this.jYear() + val);
      } else if (units === "jmonth") {
        this.jMonth(this.jMonth() + val);
      } else {
        moment.fn.add.call(this, val, units);
        if (isNaN(this.jYear())) {
          this._isValid = false;
        }
      }
      return this;
    };
    jMoment.fn.subtract = function(val, units) {
      var temp;
      if (units !== null && !isNaN(+units)) {
        temp = val;
        val = units;
        units = temp;
      }
      units = normalizeUnits2(units);
      if (units === "jyear") {
        this.jYear(this.jYear() - val);
      } else if (units === "jmonth") {
        this.jMonth(this.jMonth() - val);
      } else {
        moment.fn.subtract.call(this, val, units);
      }
      return this;
    };
    jMoment.fn.startOf = function(units) {
      units = normalizeUnits2(units);
      if (units === "jyear" || units === "jmonth") {
        if (units === "jyear") {
          this.jMonth(0);
        }
        this.jDate(1);
        this.hours(0);
        this.minutes(0);
        this.seconds(0);
        this.milliseconds(0);
        return this;
      } else {
        return moment.fn.startOf.call(this, units);
      }
    };
    jMoment.fn.endOf = function(units) {
      units = normalizeUnits2(units);
      if (units === void 0 || units === "milisecond") {
        return this;
      }
      return this.startOf(units).add(1, units === "isoweek" ? "week" : units).subtract(1, "ms");
    };
    jMoment.fn.isSame = function(other, units) {
      units = normalizeUnits2(units);
      if (units === "jyear" || units === "jmonth") {
        return moment.fn.isSame.call(this.startOf(units), other.startOf(units));
      }
      return moment.fn.isSame.call(this, other, units);
    };
    jMoment.fn.clone = function() {
      return jMoment(this);
    };
    jMoment.fn.jYears = jMoment.fn.jYear;
    jMoment.fn.jMonths = jMoment.fn.jMonth;
    jMoment.fn.jDates = jMoment.fn.jDate;
    jMoment.fn.jWeeks = jMoment.fn.jWeek;
    jMoment.jDaysInMonth = function(year, month) {
      year += div(month, 12);
      month = mod2(month, 12);
      if (month < 0) {
        month += 12;
        year -= 1;
      }
      if (month < 6) {
        return 31;
      } else if (month < 11) {
        return 30;
      } else if (jMoment.jIsLeapYear(year)) {
        return 30;
      } else {
        return 29;
      }
    };
    jMoment.jIsLeapYear = jalaali.isLeapJalaaliYear;
    jMoment.loadPersian = function(args) {
      var usePersianDigits = args !== void 0 && args.hasOwnProperty("usePersianDigits") ? args.usePersianDigits : false;
      var dialect = args !== void 0 && args.hasOwnProperty("dialect") ? args.dialect : "persian";
      moment.locale("fa");
      moment.updateLocale(
        "fa",
        {
          months: "ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),
          monthsShort: "ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),
          weekdays: {
            "persian": "یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_آدینه_شنبه".split("_"),
            "persian-modern": "یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_")
          }[dialect],
          weekdaysShort: {
            "persian": "یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_آدینه_شنبه".split("_"),
            "persian-modern": "یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_")
          }[dialect],
          weekdaysMin: {
            "persian": "ی_د_س_چ_پ_آ_ش".split("_"),
            "persian-modern": "ی_د_س_چ_پ_ج_ش".split("_")
          }[dialect],
          longDateFormat: {
            LT: "HH:mm",
            L: "jYYYY/jMM/jDD",
            LL: "jD jMMMM jYYYY",
            LLL: "jD jMMMM jYYYY LT",
            LLLL: "dddd، jD jMMMM jYYYY LT"
          },
          calendar: {
            sameDay: "[امروز ساعت] LT",
            nextDay: "[فردا ساعت] LT",
            nextWeek: "dddd [ساعت] LT",
            lastDay: "[دیروز ساعت] LT",
            lastWeek: "dddd [ی پیش ساعت] LT",
            sameElse: "L"
          },
          relativeTime: {
            future: "در %s",
            past: "%s پیش",
            s: "چند ثانیه",
            m: "1 دقیقه",
            mm: "%d دقیقه",
            h: "1 ساعت",
            hh: "%d ساعت",
            d: "1 روز",
            dd: "%d روز",
            M: "1 ماه",
            MM: "%d ماه",
            y: "1 سال",
            yy: "%d سال"
          },
          preparse: function(string) {
            if (usePersianDigits) {
              return string.replace(/[۰-۹]/g, function(match) {
                return numberMap[match];
              }).replace(/،/g, ",");
            }
            return string;
          },
          postformat: function(string) {
            if (usePersianDigits) {
              return string.replace(/\d/g, function(match) {
                return symbolMap[match];
              }).replace(/,/g, "،");
            }
            return string;
          },
          ordinal: "%dم",
          week: {
            dow: 6,
            doy: 12
            // The week that contains Jan 1st is the first week of the year.
          },
          meridiem: function(hour) {
            return hour < 12 ? "ق.ظ" : "ب.ظ";
          },
          jMonths: {
            "persian": "فروردین_اردیبهشت_خرداد_تیر_امرداد_شهریور_مهر_آبان_آذر_دی_بهمن_اسفند".split("_"),
            "persian-modern": "فروردین_اردیبهشت_خرداد_تیر_مرداد_شهریور_مهر_آبان_آذر_دی_بهمن_اسفند".split("_")
          }[dialect],
          jMonthsShort: {
            "persian": "فرو_ارد_خرد_تیر_امر_شهر_مهر_آبا_آذر_دی_بهم_اسف".split("_"),
            "persian-modern": "فرو_ارد_خرد_تیر_مرد_شهر_مهر_آبا_آذر_دی_بهم_اسف".split("_")
          }[dialect]
        }
      );
    };
    jMoment.jConvert = {
      toJalaali,
      toGregorian
    };
    function toJalaali(gy, gm, gd) {
      try {
        var j = jalaali.toJalaali(gy, gm + 1, gd);
        j.jm -= 1;
        return j;
      } catch (e) {
        return {
          jy: NaN,
          jm: NaN,
          jd: NaN
        };
      }
    }
    function toGregorian(jy, jm, jd) {
      try {
        var g = jalaali.toGregorian(jy, jm + 1, jd);
        g.gm -= 1;
        return g;
      } catch (e) {
        return {
          gy: NaN,
          gm: NaN,
          gd: NaN
        };
      }
    }
    function div(a, b) {
      return ~~(a / b);
    }
    function mod2(a, b) {
      return a - ~~(a / b) * b;
    }
  }
});

// node_modules/moment/dist/moment.js
var moment_exports = {};
__export(moment_exports, {
  default: () => moment_default
});
function hooks() {
  return hookCallback.apply(null, arguments);
}
function setHookCallback(callback) {
  hookCallback = callback;
}
function isArray(input) {
  return input instanceof Array || Object.prototype.toString.call(input) === "[object Array]";
}
function isObject(input) {
  return input != null && Object.prototype.toString.call(input) === "[object Object]";
}
function hasOwnProp(a, b) {
  return Object.prototype.hasOwnProperty.call(a, b);
}
function isObjectEmpty(obj) {
  if (Object.getOwnPropertyNames) {
    return Object.getOwnPropertyNames(obj).length === 0;
  } else {
    var k;
    for (k in obj) {
      if (hasOwnProp(obj, k)) {
        return false;
      }
    }
    return true;
  }
}
function isUndefined(input) {
  return input === void 0;
}
function isNumber(input) {
  return typeof input === "number" || Object.prototype.toString.call(input) === "[object Number]";
}
function isDate(input) {
  return input instanceof Date || Object.prototype.toString.call(input) === "[object Date]";
}
function map(arr, fn) {
  var res = [], i, arrLen = arr.length;
  for (i = 0; i < arrLen; ++i) {
    res.push(fn(arr[i], i));
  }
  return res;
}
function extend(a, b) {
  for (var i in b) {
    if (hasOwnProp(b, i)) {
      a[i] = b[i];
    }
  }
  if (hasOwnProp(b, "toString")) {
    a.toString = b.toString;
  }
  if (hasOwnProp(b, "valueOf")) {
    a.valueOf = b.valueOf;
  }
  return a;
}
function createUTC(input, format2, locale2, strict) {
  return createLocalOrUTC(input, format2, locale2, strict, true).utc();
}
function defaultParsingFlags() {
  return {
    empty: false,
    unusedTokens: [],
    unusedInput: [],
    overflow: -2,
    charsLeftOver: 0,
    nullInput: false,
    invalidEra: null,
    invalidMonth: null,
    invalidFormat: false,
    userInvalidated: false,
    iso: false,
    parsedDateParts: [],
    era: null,
    meridiem: null,
    rfc2822: false,
    weekdayMismatch: false
  };
}
function getParsingFlags(m) {
  if (m._pf == null) {
    m._pf = defaultParsingFlags();
  }
  return m._pf;
}
function isValid(m) {
  var flags = null, parsedParts = false, isNowValid = m._d && !isNaN(m._d.getTime());
  if (isNowValid) {
    flags = getParsingFlags(m);
    parsedParts = some.call(flags.parsedDateParts, function(i) {
      return i != null;
    });
    isNowValid = flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
    if (m._strict) {
      isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === void 0;
    }
  }
  if (Object.isFrozen == null || !Object.isFrozen(m)) {
    m._isValid = isNowValid;
  } else {
    return isNowValid;
  }
  return m._isValid;
}
function createInvalid(flags) {
  var m = createUTC(NaN);
  if (flags != null) {
    extend(getParsingFlags(m), flags);
  } else {
    getParsingFlags(m).userInvalidated = true;
  }
  return m;
}
function copyConfig(to2, from2) {
  var i, prop, val, momentPropertiesLen = momentProperties.length;
  if (!isUndefined(from2._isAMomentObject)) {
    to2._isAMomentObject = from2._isAMomentObject;
  }
  if (!isUndefined(from2._i)) {
    to2._i = from2._i;
  }
  if (!isUndefined(from2._f)) {
    to2._f = from2._f;
  }
  if (!isUndefined(from2._l)) {
    to2._l = from2._l;
  }
  if (!isUndefined(from2._strict)) {
    to2._strict = from2._strict;
  }
  if (!isUndefined(from2._tzm)) {
    to2._tzm = from2._tzm;
  }
  if (!isUndefined(from2._isUTC)) {
    to2._isUTC = from2._isUTC;
  }
  if (!isUndefined(from2._offset)) {
    to2._offset = from2._offset;
  }
  if (!isUndefined(from2._pf)) {
    to2._pf = getParsingFlags(from2);
  }
  if (!isUndefined(from2._locale)) {
    to2._locale = from2._locale;
  }
  if (momentPropertiesLen > 0) {
    for (i = 0; i < momentPropertiesLen; i++) {
      prop = momentProperties[i];
      val = from2[prop];
      if (!isUndefined(val)) {
        to2[prop] = val;
      }
    }
  }
  return to2;
}
function Moment(config) {
  copyConfig(this, config);
  this._d = new Date(config._d != null ? config._d.getTime() : NaN);
  if (!this.isValid()) {
    this._d = /* @__PURE__ */ new Date(NaN);
  }
  if (updateInProgress === false) {
    updateInProgress = true;
    hooks.updateOffset(this);
    updateInProgress = false;
  }
}
function isMoment(obj) {
  return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
}
function warn(msg) {
  if (hooks.suppressDeprecationWarnings === false && typeof console !== "undefined" && console.warn) {
    console.warn("Deprecation warning: " + msg);
  }
}
function deprecate(msg, fn) {
  var firstTime = true;
  return extend(function() {
    if (hooks.deprecationHandler != null) {
      hooks.deprecationHandler(null, msg);
    }
    if (firstTime) {
      var args = [], arg, i, key, argLen = arguments.length;
      for (i = 0; i < argLen; i++) {
        arg = "";
        if (typeof arguments[i] === "object") {
          arg += "\n[" + i + "] ";
          for (key in arguments[0]) {
            if (hasOwnProp(arguments[0], key)) {
              arg += key + ": " + arguments[0][key] + ", ";
            }
          }
          arg = arg.slice(0, -2);
        } else {
          arg = arguments[i];
        }
        args.push(arg);
      }
      warn(
        msg + "\nArguments: " + Array.prototype.slice.call(args).join("") + "\n" + new Error().stack
      );
      firstTime = false;
    }
    return fn.apply(this, arguments);
  }, fn);
}
function deprecateSimple(name, msg) {
  if (hooks.deprecationHandler != null) {
    hooks.deprecationHandler(name, msg);
  }
  if (!deprecations[name]) {
    warn(msg);
    deprecations[name] = true;
  }
}
function isFunction(input) {
  return typeof Function !== "undefined" && input instanceof Function || Object.prototype.toString.call(input) === "[object Function]";
}
function set(config) {
  var prop, i;
  for (i in config) {
    if (hasOwnProp(config, i)) {
      prop = config[i];
      if (isFunction(prop)) {
        this[i] = prop;
      } else {
        this["_" + i] = prop;
      }
    }
  }
  this._config = config;
  this._dayOfMonthOrdinalParseLenient = new RegExp(
    (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source
  );
}
function mergeConfigs(parentConfig, childConfig) {
  var res = extend({}, parentConfig), prop;
  for (prop in childConfig) {
    if (hasOwnProp(childConfig, prop)) {
      if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
        res[prop] = {};
        extend(res[prop], parentConfig[prop]);
        extend(res[prop], childConfig[prop]);
      } else if (childConfig[prop] != null) {
        res[prop] = childConfig[prop];
      } else {
        delete res[prop];
      }
    }
  }
  for (prop in parentConfig) {
    if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
      res[prop] = extend({}, res[prop]);
    }
  }
  return res;
}
function Locale(config) {
  if (config != null) {
    this.set(config);
  }
}
function calendar(key, mom, now2) {
  var output = this._calendar[key] || this._calendar["sameElse"];
  return isFunction(output) ? output.call(mom, now2) : output;
}
function zeroFill(number, targetLength, forceSign) {
  var absNumber = "" + Math.abs(number), zerosToFill = targetLength - absNumber.length, sign2 = number >= 0;
  return (sign2 ? forceSign ? "+" : "" : "-") + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
}
function addFormatToken(token2, padded, ordinal2, callback) {
  var func = callback;
  if (typeof callback === "string") {
    func = function() {
      return this[callback]();
    };
  }
  if (token2) {
    formatTokenFunctions[token2] = func;
  }
  if (padded) {
    formatTokenFunctions[padded[0]] = function() {
      return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
    };
  }
  if (ordinal2) {
    formatTokenFunctions[ordinal2] = function() {
      return this.localeData().ordinal(
        func.apply(this, arguments),
        token2
      );
    };
  }
}
function removeFormattingTokens(input) {
  if (input.match(/\[[\s\S]/)) {
    return input.replace(/^\[|\]$/g, "");
  }
  return input.replace(/\\/g, "");
}
function makeFormatFunction(format2) {
  var array = format2.match(formattingTokens), i, length;
  for (i = 0, length = array.length; i < length; i++) {
    if (formatTokenFunctions[array[i]]) {
      array[i] = formatTokenFunctions[array[i]];
    } else {
      array[i] = removeFormattingTokens(array[i]);
    }
  }
  return function(mom) {
    var output = "", i2;
    for (i2 = 0; i2 < length; i2++) {
      output += isFunction(array[i2]) ? array[i2].call(mom, format2) : array[i2];
    }
    return output;
  };
}
function formatMoment(m, format2) {
  if (!m.isValid()) {
    return m.localeData().invalidDate();
  }
  format2 = expandFormat(format2, m.localeData());
  formatFunctions[format2] = formatFunctions[format2] || makeFormatFunction(format2);
  return formatFunctions[format2](m);
}
function expandFormat(format2, locale2) {
  var i = 5;
  function replaceLongDateFormatTokens(input) {
    return locale2.longDateFormat(input) || input;
  }
  localFormattingTokens.lastIndex = 0;
  while (i >= 0 && localFormattingTokens.test(format2)) {
    format2 = format2.replace(
      localFormattingTokens,
      replaceLongDateFormatTokens
    );
    localFormattingTokens.lastIndex = 0;
    i -= 1;
  }
  return format2;
}
function longDateFormat(key) {
  var format2 = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
  if (format2 || !formatUpper) {
    return format2;
  }
  this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function(tok) {
    if (tok === "MMMM" || tok === "MM" || tok === "DD" || tok === "dddd") {
      return tok.slice(1);
    }
    return tok;
  }).join("");
  return this._longDateFormat[key];
}
function invalidDate() {
  return this._invalidDate;
}
function ordinal(number) {
  return this._ordinal.replace("%d", number);
}
function relativeTime(number, withoutSuffix, string, isFuture) {
  var output = this._relativeTime[string];
  return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
}
function pastFuture(diff2, output) {
  var format2 = this._relativeTime[diff2 > 0 ? "future" : "past"];
  return isFunction(format2) ? format2(output) : format2.replace(/%s/i, output);
}
function normalizeUnits(units) {
  return typeof units === "string" ? aliases[units] || aliases[units.toLowerCase()] : void 0;
}
function normalizeObjectUnits(inputObject) {
  var normalizedInput = {}, normalizedProp, prop;
  for (prop in inputObject) {
    if (hasOwnProp(inputObject, prop)) {
      normalizedProp = normalizeUnits(prop);
      if (normalizedProp) {
        normalizedInput[normalizedProp] = inputObject[prop];
      }
    }
  }
  return normalizedInput;
}
function getPrioritizedUnits(unitsObj) {
  var units = [], u;
  for (u in unitsObj) {
    if (hasOwnProp(unitsObj, u)) {
      units.push({ unit: u, priority: priorities[u] });
    }
  }
  units.sort(function(a, b) {
    return a.priority - b.priority;
  });
  return units;
}
function addRegexToken(token2, regex, strictRegex) {
  regexes[token2] = isFunction(regex) ? regex : function(isStrict, localeData2) {
    return isStrict && strictRegex ? strictRegex : regex;
  };
}
function getParseRegexForToken(token2, config) {
  if (!hasOwnProp(regexes, token2)) {
    return new RegExp(unescapeFormat(token2));
  }
  return regexes[token2](config._strict, config._locale);
}
function unescapeFormat(s) {
  return regexEscape(
    s.replace("\\", "").replace(
      /\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
      function(matched, p1, p2, p3, p4) {
        return p1 || p2 || p3 || p4;
      }
    )
  );
}
function regexEscape(s) {
  return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
}
function absFloor(number) {
  if (number < 0) {
    return Math.ceil(number) || 0;
  } else {
    return Math.floor(number);
  }
}
function toInt(argumentForCoercion) {
  var coercedNumber = +argumentForCoercion, value = 0;
  if (coercedNumber !== 0 && isFinite(coercedNumber)) {
    value = absFloor(coercedNumber);
  }
  return value;
}
function addParseToken(token2, callback) {
  var i, func = callback, tokenLen;
  if (typeof token2 === "string") {
    token2 = [token2];
  }
  if (isNumber(callback)) {
    func = function(input, array) {
      array[callback] = toInt(input);
    };
  }
  tokenLen = token2.length;
  for (i = 0; i < tokenLen; i++) {
    tokens[token2[i]] = func;
  }
}
function addWeekParseToken(token2, callback) {
  addParseToken(token2, function(input, array, config, token3) {
    config._w = config._w || {};
    callback(input, config._w, config, token3);
  });
}
function addTimeToArrayFromToken(token2, input, config) {
  if (input != null && hasOwnProp(tokens, token2)) {
    tokens[token2](input, config._a, config, token2);
  }
}
function isLeapYear(year) {
  return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
}
function daysInYear(year) {
  return isLeapYear(year) ? 366 : 365;
}
function getIsLeapYear() {
  return isLeapYear(this.year());
}
function makeGetSet(unit, keepTime) {
  return function(value) {
    if (value != null) {
      set$1(this, unit, value);
      hooks.updateOffset(this, keepTime);
      return this;
    } else {
      return get(this, unit);
    }
  };
}
function get(mom, unit) {
  if (!mom.isValid()) {
    return NaN;
  }
  var d = mom._d, isUTC = mom._isUTC;
  switch (unit) {
    case "Milliseconds":
      return isUTC ? d.getUTCMilliseconds() : d.getMilliseconds();
    case "Seconds":
      return isUTC ? d.getUTCSeconds() : d.getSeconds();
    case "Minutes":
      return isUTC ? d.getUTCMinutes() : d.getMinutes();
    case "Hours":
      return isUTC ? d.getUTCHours() : d.getHours();
    case "Date":
      return isUTC ? d.getUTCDate() : d.getDate();
    case "Day":
      return isUTC ? d.getUTCDay() : d.getDay();
    case "Month":
      return isUTC ? d.getUTCMonth() : d.getMonth();
    case "FullYear":
      return isUTC ? d.getUTCFullYear() : d.getFullYear();
    default:
      return NaN;
  }
}
function set$1(mom, unit, value) {
  var d, isUTC, year, month, date;
  if (!mom.isValid() || isNaN(value)) {
    return;
  }
  d = mom._d;
  isUTC = mom._isUTC;
  switch (unit) {
    case "Milliseconds":
      return void (isUTC ? d.setUTCMilliseconds(value) : d.setMilliseconds(value));
    case "Seconds":
      return void (isUTC ? d.setUTCSeconds(value) : d.setSeconds(value));
    case "Minutes":
      return void (isUTC ? d.setUTCMinutes(value) : d.setMinutes(value));
    case "Hours":
      return void (isUTC ? d.setUTCHours(value) : d.setHours(value));
    case "Date":
      return void (isUTC ? d.setUTCDate(value) : d.setDate(value));
    case "FullYear":
      break;
    default:
      return;
  }
  year = value;
  month = mom.month();
  date = mom.date();
  date = date === 29 && month === 1 && !isLeapYear(year) ? 28 : date;
  void (isUTC ? d.setUTCFullYear(year, month, date) : d.setFullYear(year, month, date));
}
function stringGet(units) {
  units = normalizeUnits(units);
  if (isFunction(this[units])) {
    return this[units]();
  }
  return this;
}
function stringSet(units, value) {
  if (typeof units === "object") {
    units = normalizeObjectUnits(units);
    var prioritized = getPrioritizedUnits(units), i, prioritizedLen = prioritized.length;
    for (i = 0; i < prioritizedLen; i++) {
      this[prioritized[i].unit](units[prioritized[i].unit]);
    }
  } else {
    units = normalizeUnits(units);
    if (isFunction(this[units])) {
      return this[units](value);
    }
  }
  return this;
}
function mod(n, x) {
  return (n % x + x) % x;
}
function daysInMonth(year, month) {
  if (isNaN(year) || isNaN(month)) {
    return NaN;
  }
  var modMonth = mod(month, 12);
  year += (month - modMonth) / 12;
  return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
}
function localeMonths(m, format2) {
  if (!m) {
    return isArray(this._months) ? this._months : this._months["standalone"];
  }
  return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format2) ? "format" : "standalone"][m.month()];
}
function localeMonthsShort(m, format2) {
  if (!m) {
    return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort["standalone"];
  }
  return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format2) ? "format" : "standalone"][m.month()];
}
function handleStrictParse(monthName, format2, strict) {
  var i, ii, mom, llc = monthName.toLocaleLowerCase();
  if (!this._monthsParse) {
    this._monthsParse = [];
    this._longMonthsParse = [];
    this._shortMonthsParse = [];
    for (i = 0; i < 12; ++i) {
      mom = createUTC([2e3, i]);
      this._shortMonthsParse[i] = this.monthsShort(
        mom,
        ""
      ).toLocaleLowerCase();
      this._longMonthsParse[i] = this.months(mom, "").toLocaleLowerCase();
    }
  }
  if (strict) {
    if (format2 === "MMM") {
      ii = indexOf.call(this._shortMonthsParse, llc);
      return ii !== -1 ? ii : null;
    } else {
      ii = indexOf.call(this._longMonthsParse, llc);
      return ii !== -1 ? ii : null;
    }
  } else {
    if (format2 === "MMM") {
      ii = indexOf.call(this._shortMonthsParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._longMonthsParse, llc);
      return ii !== -1 ? ii : null;
    } else {
      ii = indexOf.call(this._longMonthsParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._shortMonthsParse, llc);
      return ii !== -1 ? ii : null;
    }
  }
}
function localeMonthsParse(monthName, format2, strict) {
  var i, mom, regex;
  if (this._monthsParseExact) {
    return handleStrictParse.call(this, monthName, format2, strict);
  }
  if (!this._monthsParse) {
    this._monthsParse = [];
    this._longMonthsParse = [];
    this._shortMonthsParse = [];
  }
  for (i = 0; i < 12; i++) {
    mom = createUTC([2e3, i]);
    if (strict && !this._longMonthsParse[i]) {
      this._longMonthsParse[i] = new RegExp(
        "^" + this.months(mom, "").replace(".", "") + "$",
        "i"
      );
      this._shortMonthsParse[i] = new RegExp(
        "^" + this.monthsShort(mom, "").replace(".", "") + "$",
        "i"
      );
    }
    if (!strict && !this._monthsParse[i]) {
      regex = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, "");
      this._monthsParse[i] = new RegExp(regex.replace(".", ""), "i");
    }
    if (strict && format2 === "MMMM" && this._longMonthsParse[i].test(monthName)) {
      return i;
    } else if (strict && format2 === "MMM" && this._shortMonthsParse[i].test(monthName)) {
      return i;
    } else if (!strict && this._monthsParse[i].test(monthName)) {
      return i;
    }
  }
}
function setMonth(mom, value) {
  if (!mom.isValid()) {
    return mom;
  }
  if (typeof value === "string") {
    if (/^\d+$/.test(value)) {
      value = toInt(value);
    } else {
      value = mom.localeData().monthsParse(value);
      if (!isNumber(value)) {
        return mom;
      }
    }
  }
  var month = value, date = mom.date();
  date = date < 29 ? date : Math.min(date, daysInMonth(mom.year(), month));
  void (mom._isUTC ? mom._d.setUTCMonth(month, date) : mom._d.setMonth(month, date));
  return mom;
}
function getSetMonth(value) {
  if (value != null) {
    setMonth(this, value);
    hooks.updateOffset(this, true);
    return this;
  } else {
    return get(this, "Month");
  }
}
function getDaysInMonth() {
  return daysInMonth(this.year(), this.month());
}
function monthsShortRegex(isStrict) {
  if (this._monthsParseExact) {
    if (!hasOwnProp(this, "_monthsRegex")) {
      computeMonthsParse.call(this);
    }
    if (isStrict) {
      return this._monthsShortStrictRegex;
    } else {
      return this._monthsShortRegex;
    }
  } else {
    if (!hasOwnProp(this, "_monthsShortRegex")) {
      this._monthsShortRegex = defaultMonthsShortRegex;
    }
    return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
  }
}
function monthsRegex(isStrict) {
  if (this._monthsParseExact) {
    if (!hasOwnProp(this, "_monthsRegex")) {
      computeMonthsParse.call(this);
    }
    if (isStrict) {
      return this._monthsStrictRegex;
    } else {
      return this._monthsRegex;
    }
  } else {
    if (!hasOwnProp(this, "_monthsRegex")) {
      this._monthsRegex = defaultMonthsRegex;
    }
    return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
  }
}
function computeMonthsParse() {
  function cmpLenRev(a, b) {
    return b.length - a.length;
  }
  var shortPieces = [], longPieces = [], mixedPieces = [], i, mom, shortP, longP;
  for (i = 0; i < 12; i++) {
    mom = createUTC([2e3, i]);
    shortP = regexEscape(this.monthsShort(mom, ""));
    longP = regexEscape(this.months(mom, ""));
    shortPieces.push(shortP);
    longPieces.push(longP);
    mixedPieces.push(longP);
    mixedPieces.push(shortP);
  }
  shortPieces.sort(cmpLenRev);
  longPieces.sort(cmpLenRev);
  mixedPieces.sort(cmpLenRev);
  this._monthsRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
  this._monthsShortRegex = this._monthsRegex;
  this._monthsStrictRegex = new RegExp(
    "^(" + longPieces.join("|") + ")",
    "i"
  );
  this._monthsShortStrictRegex = new RegExp(
    "^(" + shortPieces.join("|") + ")",
    "i"
  );
}
function createDate(y, m, d, h, M, s, ms) {
  var date;
  if (y < 100 && y >= 0) {
    date = new Date(y + 400, m, d, h, M, s, ms);
    if (isFinite(date.getFullYear())) {
      date.setFullYear(y);
    }
  } else {
    date = new Date(y, m, d, h, M, s, ms);
  }
  return date;
}
function createUTCDate(y) {
  var date, args;
  if (y < 100 && y >= 0) {
    args = Array.prototype.slice.call(arguments);
    args[0] = y + 400;
    date = new Date(Date.UTC.apply(null, args));
    if (isFinite(date.getUTCFullYear())) {
      date.setUTCFullYear(y);
    }
  } else {
    date = new Date(Date.UTC.apply(null, arguments));
  }
  return date;
}
function firstWeekOffset(year, dow, doy) {
  var fwd = 7 + dow - doy, fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
  return -fwdlw + fwd - 1;
}
function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
  var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
  if (dayOfYear <= 0) {
    resYear = year - 1;
    resDayOfYear = daysInYear(resYear) + dayOfYear;
  } else if (dayOfYear > daysInYear(year)) {
    resYear = year + 1;
    resDayOfYear = dayOfYear - daysInYear(year);
  } else {
    resYear = year;
    resDayOfYear = dayOfYear;
  }
  return {
    year: resYear,
    dayOfYear: resDayOfYear
  };
}
function weekOfYear(mom, dow, doy) {
  var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
  if (week < 1) {
    resYear = mom.year() - 1;
    resWeek = week + weeksInYear(resYear, dow, doy);
  } else if (week > weeksInYear(mom.year(), dow, doy)) {
    resWeek = week - weeksInYear(mom.year(), dow, doy);
    resYear = mom.year() + 1;
  } else {
    resYear = mom.year();
    resWeek = week;
  }
  return {
    week: resWeek,
    year: resYear
  };
}
function weeksInYear(year, dow, doy) {
  var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
  return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
}
function localeWeek(mom) {
  return weekOfYear(mom, this._week.dow, this._week.doy).week;
}
function localeFirstDayOfWeek() {
  return this._week.dow;
}
function localeFirstDayOfYear() {
  return this._week.doy;
}
function getSetWeek(input) {
  var week = this.localeData().week(this);
  return input == null ? week : this.add((input - week) * 7, "d");
}
function getSetISOWeek(input) {
  var week = weekOfYear(this, 1, 4).week;
  return input == null ? week : this.add((input - week) * 7, "d");
}
function parseWeekday(input, locale2) {
  if (typeof input !== "string") {
    return input;
  }
  if (!isNaN(input)) {
    return parseInt(input, 10);
  }
  input = locale2.weekdaysParse(input);
  if (typeof input === "number") {
    return input;
  }
  return null;
}
function parseIsoWeekday(input, locale2) {
  if (typeof input === "string") {
    return locale2.weekdaysParse(input) % 7 || 7;
  }
  return isNaN(input) ? null : input;
}
function shiftWeekdays(ws, n) {
  return ws.slice(n, 7).concat(ws.slice(0, n));
}
function localeWeekdays(m, format2) {
  var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format2) ? "format" : "standalone"];
  return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
}
function localeWeekdaysShort(m) {
  return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
}
function localeWeekdaysMin(m) {
  return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
}
function handleStrictParse$1(weekdayName, format2, strict) {
  var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
  if (!this._weekdaysParse) {
    this._weekdaysParse = [];
    this._shortWeekdaysParse = [];
    this._minWeekdaysParse = [];
    for (i = 0; i < 7; ++i) {
      mom = createUTC([2e3, 1]).day(i);
      this._minWeekdaysParse[i] = this.weekdaysMin(
        mom,
        ""
      ).toLocaleLowerCase();
      this._shortWeekdaysParse[i] = this.weekdaysShort(
        mom,
        ""
      ).toLocaleLowerCase();
      this._weekdaysParse[i] = this.weekdays(mom, "").toLocaleLowerCase();
    }
  }
  if (strict) {
    if (format2 === "dddd") {
      ii = indexOf.call(this._weekdaysParse, llc);
      return ii !== -1 ? ii : null;
    } else if (format2 === "ddd") {
      ii = indexOf.call(this._shortWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    } else {
      ii = indexOf.call(this._minWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    }
  } else {
    if (format2 === "dddd") {
      ii = indexOf.call(this._weekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._shortWeekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._minWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    } else if (format2 === "ddd") {
      ii = indexOf.call(this._shortWeekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._weekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._minWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    } else {
      ii = indexOf.call(this._minWeekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._weekdaysParse, llc);
      if (ii !== -1) {
        return ii;
      }
      ii = indexOf.call(this._shortWeekdaysParse, llc);
      return ii !== -1 ? ii : null;
    }
  }
}
function localeWeekdaysParse(weekdayName, format2, strict) {
  var i, mom, regex;
  if (this._weekdaysParseExact) {
    return handleStrictParse$1.call(this, weekdayName, format2, strict);
  }
  if (!this._weekdaysParse) {
    this._weekdaysParse = [];
    this._minWeekdaysParse = [];
    this._shortWeekdaysParse = [];
    this._fullWeekdaysParse = [];
  }
  for (i = 0; i < 7; i++) {
    mom = createUTC([2e3, 1]).day(i);
    if (strict && !this._fullWeekdaysParse[i]) {
      this._fullWeekdaysParse[i] = new RegExp(
        "^" + this.weekdays(mom, "").replace(".", "\\.?") + "$",
        "i"
      );
      this._shortWeekdaysParse[i] = new RegExp(
        "^" + this.weekdaysShort(mom, "").replace(".", "\\.?") + "$",
        "i"
      );
      this._minWeekdaysParse[i] = new RegExp(
        "^" + this.weekdaysMin(mom, "").replace(".", "\\.?") + "$",
        "i"
      );
    }
    if (!this._weekdaysParse[i]) {
      regex = "^" + this.weekdays(mom, "") + "|^" + this.weekdaysShort(mom, "") + "|^" + this.weekdaysMin(mom, "");
      this._weekdaysParse[i] = new RegExp(regex.replace(".", ""), "i");
    }
    if (strict && format2 === "dddd" && this._fullWeekdaysParse[i].test(weekdayName)) {
      return i;
    } else if (strict && format2 === "ddd" && this._shortWeekdaysParse[i].test(weekdayName)) {
      return i;
    } else if (strict && format2 === "dd" && this._minWeekdaysParse[i].test(weekdayName)) {
      return i;
    } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
      return i;
    }
  }
}
function getSetDayOfWeek(input) {
  if (!this.isValid()) {
    return input != null ? this : NaN;
  }
  var day = get(this, "Day");
  if (input != null) {
    input = parseWeekday(input, this.localeData());
    return this.add(input - day, "d");
  } else {
    return day;
  }
}
function getSetLocaleDayOfWeek(input) {
  if (!this.isValid()) {
    return input != null ? this : NaN;
  }
  var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
  return input == null ? weekday : this.add(input - weekday, "d");
}
function getSetISODayOfWeek(input) {
  if (!this.isValid()) {
    return input != null ? this : NaN;
  }
  if (input != null) {
    var weekday = parseIsoWeekday(input, this.localeData());
    return this.day(this.day() % 7 ? weekday : weekday - 7);
  } else {
    return this.day() || 7;
  }
}
function weekdaysRegex(isStrict) {
  if (this._weekdaysParseExact) {
    if (!hasOwnProp(this, "_weekdaysRegex")) {
      computeWeekdaysParse.call(this);
    }
    if (isStrict) {
      return this._weekdaysStrictRegex;
    } else {
      return this._weekdaysRegex;
    }
  } else {
    if (!hasOwnProp(this, "_weekdaysRegex")) {
      this._weekdaysRegex = defaultWeekdaysRegex;
    }
    return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
  }
}
function weekdaysShortRegex(isStrict) {
  if (this._weekdaysParseExact) {
    if (!hasOwnProp(this, "_weekdaysRegex")) {
      computeWeekdaysParse.call(this);
    }
    if (isStrict) {
      return this._weekdaysShortStrictRegex;
    } else {
      return this._weekdaysShortRegex;
    }
  } else {
    if (!hasOwnProp(this, "_weekdaysShortRegex")) {
      this._weekdaysShortRegex = defaultWeekdaysShortRegex;
    }
    return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
  }
}
function weekdaysMinRegex(isStrict) {
  if (this._weekdaysParseExact) {
    if (!hasOwnProp(this, "_weekdaysRegex")) {
      computeWeekdaysParse.call(this);
    }
    if (isStrict) {
      return this._weekdaysMinStrictRegex;
    } else {
      return this._weekdaysMinRegex;
    }
  } else {
    if (!hasOwnProp(this, "_weekdaysMinRegex")) {
      this._weekdaysMinRegex = defaultWeekdaysMinRegex;
    }
    return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
  }
}
function computeWeekdaysParse() {
  function cmpLenRev(a, b) {
    return b.length - a.length;
  }
  var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i, mom, minp, shortp, longp;
  for (i = 0; i < 7; i++) {
    mom = createUTC([2e3, 1]).day(i);
    minp = regexEscape(this.weekdaysMin(mom, ""));
    shortp = regexEscape(this.weekdaysShort(mom, ""));
    longp = regexEscape(this.weekdays(mom, ""));
    minPieces.push(minp);
    shortPieces.push(shortp);
    longPieces.push(longp);
    mixedPieces.push(minp);
    mixedPieces.push(shortp);
    mixedPieces.push(longp);
  }
  minPieces.sort(cmpLenRev);
  shortPieces.sort(cmpLenRev);
  longPieces.sort(cmpLenRev);
  mixedPieces.sort(cmpLenRev);
  this._weekdaysRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
  this._weekdaysShortRegex = this._weekdaysRegex;
  this._weekdaysMinRegex = this._weekdaysRegex;
  this._weekdaysStrictRegex = new RegExp(
    "^(" + longPieces.join("|") + ")",
    "i"
  );
  this._weekdaysShortStrictRegex = new RegExp(
    "^(" + shortPieces.join("|") + ")",
    "i"
  );
  this._weekdaysMinStrictRegex = new RegExp(
    "^(" + minPieces.join("|") + ")",
    "i"
  );
}
function hFormat() {
  return this.hours() % 12 || 12;
}
function kFormat() {
  return this.hours() || 24;
}
function meridiem(token2, lowercase) {
  addFormatToken(token2, 0, 0, function() {
    return this.localeData().meridiem(
      this.hours(),
      this.minutes(),
      lowercase
    );
  });
}
function matchMeridiem(isStrict, locale2) {
  return locale2._meridiemParse;
}
function localeIsPM(input) {
  return (input + "").toLowerCase().charAt(0) === "p";
}
function localeMeridiem(hours2, minutes2, isLower) {
  if (hours2 > 11) {
    return isLower ? "pm" : "PM";
  } else {
    return isLower ? "am" : "AM";
  }
}
function commonPrefix(arr1, arr2) {
  var i, minl = Math.min(arr1.length, arr2.length);
  for (i = 0; i < minl; i += 1) {
    if (arr1[i] !== arr2[i]) {
      return i;
    }
  }
  return minl;
}
function normalizeLocale(key) {
  return key ? key.toLowerCase().replace("_", "-") : key;
}
function chooseLocale(names) {
  var i = 0, j, next, locale2, split;
  while (i < names.length) {
    split = normalizeLocale(names[i]).split("-");
    j = split.length;
    next = normalizeLocale(names[i + 1]);
    next = next ? next.split("-") : null;
    while (j > 0) {
      locale2 = loadLocale(split.slice(0, j).join("-"));
      if (locale2) {
        return locale2;
      }
      if (next && next.length >= j && commonPrefix(split, next) >= j - 1) {
        break;
      }
      j--;
    }
    i++;
  }
  return globalLocale;
}
function isLocaleNameSane(name) {
  return !!(name && name.match("^[^/\\\\]*$"));
}
function loadLocale(name) {
  var oldLocale = null, aliasedRequire;
  if (locales[name] === void 0 && typeof module !== "undefined" && module && module.exports && isLocaleNameSane(name)) {
    try {
      oldLocale = globalLocale._abbr;
      aliasedRequire = __require;
      aliasedRequire("./locale/" + name);
      getSetGlobalLocale(oldLocale);
    } catch (e) {
      locales[name] = null;
    }
  }
  return locales[name];
}
function getSetGlobalLocale(key, values) {
  var data;
  if (key) {
    if (isUndefined(values)) {
      data = getLocale(key);
    } else {
      data = defineLocale(key, values);
    }
    if (data) {
      globalLocale = data;
    } else {
      if (typeof console !== "undefined" && console.warn) {
        console.warn(
          "Locale " + key + " not found. Did you forget to load it?"
        );
      }
    }
  }
  return globalLocale._abbr;
}
function defineLocale(name, config) {
  if (config !== null) {
    var locale2, parentConfig = baseConfig;
    config.abbr = name;
    if (locales[name] != null) {
      deprecateSimple(
        "defineLocaleOverride",
        "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."
      );
      parentConfig = locales[name]._config;
    } else if (config.parentLocale != null) {
      if (locales[config.parentLocale] != null) {
        parentConfig = locales[config.parentLocale]._config;
      } else {
        locale2 = loadLocale(config.parentLocale);
        if (locale2 != null) {
          parentConfig = locale2._config;
        } else {
          if (!localeFamilies[config.parentLocale]) {
            localeFamilies[config.parentLocale] = [];
          }
          localeFamilies[config.parentLocale].push({
            name,
            config
          });
          return null;
        }
      }
    }
    locales[name] = new Locale(mergeConfigs(parentConfig, config));
    if (localeFamilies[name]) {
      localeFamilies[name].forEach(function(x) {
        defineLocale(x.name, x.config);
      });
    }
    getSetGlobalLocale(name);
    return locales[name];
  } else {
    delete locales[name];
    return null;
  }
}
function updateLocale(name, config) {
  if (config != null) {
    var locale2, tmpLocale, parentConfig = baseConfig;
    if (locales[name] != null && locales[name].parentLocale != null) {
      locales[name].set(mergeConfigs(locales[name]._config, config));
    } else {
      tmpLocale = loadLocale(name);
      if (tmpLocale != null) {
        parentConfig = tmpLocale._config;
      }
      config = mergeConfigs(parentConfig, config);
      if (tmpLocale == null) {
        config.abbr = name;
      }
      locale2 = new Locale(config);
      locale2.parentLocale = locales[name];
      locales[name] = locale2;
    }
    getSetGlobalLocale(name);
  } else {
    if (locales[name] != null) {
      if (locales[name].parentLocale != null) {
        locales[name] = locales[name].parentLocale;
        if (name === getSetGlobalLocale()) {
          getSetGlobalLocale(name);
        }
      } else if (locales[name] != null) {
        delete locales[name];
      }
    }
  }
  return locales[name];
}
function getLocale(key) {
  var locale2;
  if (key && key._locale && key._locale._abbr) {
    key = key._locale._abbr;
  }
  if (!key) {
    return globalLocale;
  }
  if (!isArray(key)) {
    locale2 = loadLocale(key);
    if (locale2) {
      return locale2;
    }
    key = [key];
  }
  return chooseLocale(key);
}
function listLocales() {
  return keys(locales);
}
function checkOverflow(m) {
  var overflow, a = m._a;
  if (a && getParsingFlags(m).overflow === -2) {
    overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
    if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
      overflow = DATE;
    }
    if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
      overflow = WEEK;
    }
    if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
      overflow = WEEKDAY;
    }
    getParsingFlags(m).overflow = overflow;
  }
  return m;
}
function configFromISO(config) {
  var i, l, string = config._i, match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string), allowTime, dateFormat, timeFormat, tzFormat, isoDatesLen = isoDates.length, isoTimesLen = isoTimes.length;
  if (match) {
    getParsingFlags(config).iso = true;
    for (i = 0, l = isoDatesLen; i < l; i++) {
      if (isoDates[i][1].exec(match[1])) {
        dateFormat = isoDates[i][0];
        allowTime = isoDates[i][2] !== false;
        break;
      }
    }
    if (dateFormat == null) {
      config._isValid = false;
      return;
    }
    if (match[3]) {
      for (i = 0, l = isoTimesLen; i < l; i++) {
        if (isoTimes[i][1].exec(match[3])) {
          timeFormat = (match[2] || " ") + isoTimes[i][0];
          break;
        }
      }
      if (timeFormat == null) {
        config._isValid = false;
        return;
      }
    }
    if (!allowTime && timeFormat != null) {
      config._isValid = false;
      return;
    }
    if (match[4]) {
      if (tzRegex.exec(match[4])) {
        tzFormat = "Z";
      } else {
        config._isValid = false;
        return;
      }
    }
    config._f = dateFormat + (timeFormat || "") + (tzFormat || "");
    configFromStringAndFormat(config);
  } else {
    config._isValid = false;
  }
}
function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
  var result = [
    untruncateYear(yearStr),
    defaultLocaleMonthsShort.indexOf(monthStr),
    parseInt(dayStr, 10),
    parseInt(hourStr, 10),
    parseInt(minuteStr, 10)
  ];
  if (secondStr) {
    result.push(parseInt(secondStr, 10));
  }
  return result;
}
function untruncateYear(yearStr) {
  var year = parseInt(yearStr, 10);
  if (year <= 49) {
    return 2e3 + year;
  } else if (year <= 999) {
    return 1900 + year;
  }
  return year;
}
function preprocessRFC2822(s) {
  return s.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
}
function checkWeekday(weekdayStr, parsedInput, config) {
  if (weekdayStr) {
    var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr), weekdayActual = new Date(
      parsedInput[0],
      parsedInput[1],
      parsedInput[2]
    ).getDay();
    if (weekdayProvided !== weekdayActual) {
      getParsingFlags(config).weekdayMismatch = true;
      config._isValid = false;
      return false;
    }
  }
  return true;
}
function calculateOffset(obsOffset, militaryOffset, numOffset) {
  if (obsOffset) {
    return obsOffsets[obsOffset];
  } else if (militaryOffset) {
    return 0;
  } else {
    var hm = parseInt(numOffset, 10), m = hm % 100, h = (hm - m) / 100;
    return h * 60 + m;
  }
}
function configFromRFC2822(config) {
  var match = rfc2822.exec(preprocessRFC2822(config._i)), parsedArray;
  if (match) {
    parsedArray = extractFromRFC2822Strings(
      match[4],
      match[3],
      match[2],
      match[5],
      match[6],
      match[7]
    );
    if (!checkWeekday(match[1], parsedArray, config)) {
      return;
    }
    config._a = parsedArray;
    config._tzm = calculateOffset(match[8], match[9], match[10]);
    config._d = createUTCDate.apply(null, config._a);
    config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
    getParsingFlags(config).rfc2822 = true;
  } else {
    config._isValid = false;
  }
}
function configFromString(config) {
  var matched = aspNetJsonRegex.exec(config._i);
  if (matched !== null) {
    config._d = /* @__PURE__ */ new Date(+matched[1]);
    return;
  }
  configFromISO(config);
  if (config._isValid === false) {
    delete config._isValid;
  } else {
    return;
  }
  configFromRFC2822(config);
  if (config._isValid === false) {
    delete config._isValid;
  } else {
    return;
  }
  if (config._strict) {
    config._isValid = false;
  } else {
    hooks.createFromInputFallback(config);
  }
}
function defaults(a, b, c) {
  if (a != null) {
    return a;
  }
  if (b != null) {
    return b;
  }
  return c;
}
function currentDateArray(config) {
  var nowValue = new Date(hooks.now());
  if (config._useUTC) {
    return [
      nowValue.getUTCFullYear(),
      nowValue.getUTCMonth(),
      nowValue.getUTCDate()
    ];
  }
  return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
}
function configFromArray(config) {
  var i, date, input = [], currentDate, expectedWeekday, yearToUse;
  if (config._d) {
    return;
  }
  currentDate = currentDateArray(config);
  if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
    dayOfYearFromWeekInfo(config);
  }
  if (config._dayOfYear != null) {
    yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
    if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
      getParsingFlags(config)._overflowDayOfYear = true;
    }
    date = createUTCDate(yearToUse, 0, config._dayOfYear);
    config._a[MONTH] = date.getUTCMonth();
    config._a[DATE] = date.getUTCDate();
  }
  for (i = 0; i < 3 && config._a[i] == null; ++i) {
    config._a[i] = input[i] = currentDate[i];
  }
  for (; i < 7; i++) {
    config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
  }
  if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
    config._nextDay = true;
    config._a[HOUR] = 0;
  }
  config._d = (config._useUTC ? createUTCDate : createDate).apply(
    null,
    input
  );
  expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();
  if (config._tzm != null) {
    config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
  }
  if (config._nextDay) {
    config._a[HOUR] = 24;
  }
  if (config._w && typeof config._w.d !== "undefined" && config._w.d !== expectedWeekday) {
    getParsingFlags(config).weekdayMismatch = true;
  }
}
function dayOfYearFromWeekInfo(config) {
  var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
  w = config._w;
  if (w.GG != null || w.W != null || w.E != null) {
    dow = 1;
    doy = 4;
    weekYear = defaults(
      w.GG,
      config._a[YEAR],
      weekOfYear(createLocal(), 1, 4).year
    );
    week = defaults(w.W, 1);
    weekday = defaults(w.E, 1);
    if (weekday < 1 || weekday > 7) {
      weekdayOverflow = true;
    }
  } else {
    dow = config._locale._week.dow;
    doy = config._locale._week.doy;
    curWeek = weekOfYear(createLocal(), dow, doy);
    weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
    week = defaults(w.w, curWeek.week);
    if (w.d != null) {
      weekday = w.d;
      if (weekday < 0 || weekday > 6) {
        weekdayOverflow = true;
      }
    } else if (w.e != null) {
      weekday = w.e + dow;
      if (w.e < 0 || w.e > 6) {
        weekdayOverflow = true;
      }
    } else {
      weekday = dow;
    }
  }
  if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
    getParsingFlags(config)._overflowWeeks = true;
  } else if (weekdayOverflow != null) {
    getParsingFlags(config)._overflowWeekday = true;
  } else {
    temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
    config._a[YEAR] = temp.year;
    config._dayOfYear = temp.dayOfYear;
  }
}
function configFromStringAndFormat(config) {
  if (config._f === hooks.ISO_8601) {
    configFromISO(config);
    return;
  }
  if (config._f === hooks.RFC_2822) {
    configFromRFC2822(config);
    return;
  }
  config._a = [];
  getParsingFlags(config).empty = true;
  var string = "" + config._i, i, parsedInput, tokens2, token2, skipped, stringLength = string.length, totalParsedInputLength = 0, era, tokenLen;
  tokens2 = expandFormat(config._f, config._locale).match(formattingTokens) || [];
  tokenLen = tokens2.length;
  for (i = 0; i < tokenLen; i++) {
    token2 = tokens2[i];
    parsedInput = (string.match(getParseRegexForToken(token2, config)) || [])[0];
    if (parsedInput) {
      skipped = string.substr(0, string.indexOf(parsedInput));
      if (skipped.length > 0) {
        getParsingFlags(config).unusedInput.push(skipped);
      }
      string = string.slice(
        string.indexOf(parsedInput) + parsedInput.length
      );
      totalParsedInputLength += parsedInput.length;
    }
    if (formatTokenFunctions[token2]) {
      if (parsedInput) {
        getParsingFlags(config).empty = false;
      } else {
        getParsingFlags(config).unusedTokens.push(token2);
      }
      addTimeToArrayFromToken(token2, parsedInput, config);
    } else if (config._strict && !parsedInput) {
      getParsingFlags(config).unusedTokens.push(token2);
    }
  }
  getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
  if (string.length > 0) {
    getParsingFlags(config).unusedInput.push(string);
  }
  if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
    getParsingFlags(config).bigHour = void 0;
  }
  getParsingFlags(config).parsedDateParts = config._a.slice(0);
  getParsingFlags(config).meridiem = config._meridiem;
  config._a[HOUR] = meridiemFixWrap(
    config._locale,
    config._a[HOUR],
    config._meridiem
  );
  era = getParsingFlags(config).era;
  if (era !== null) {
    config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
  }
  configFromArray(config);
  checkOverflow(config);
}
function meridiemFixWrap(locale2, hour, meridiem2) {
  var isPm;
  if (meridiem2 == null) {
    return hour;
  }
  if (locale2.meridiemHour != null) {
    return locale2.meridiemHour(hour, meridiem2);
  } else if (locale2.isPM != null) {
    isPm = locale2.isPM(meridiem2);
    if (isPm && hour < 12) {
      hour += 12;
    }
    if (!isPm && hour === 12) {
      hour = 0;
    }
    return hour;
  } else {
    return hour;
  }
}
function configFromStringAndArray(config) {
  var tempConfig, bestMoment, scoreToBeat, i, currentScore, validFormatFound, bestFormatIsValid = false, configfLen = config._f.length;
  if (configfLen === 0) {
    getParsingFlags(config).invalidFormat = true;
    config._d = /* @__PURE__ */ new Date(NaN);
    return;
  }
  for (i = 0; i < configfLen; i++) {
    currentScore = 0;
    validFormatFound = false;
    tempConfig = copyConfig({}, config);
    if (config._useUTC != null) {
      tempConfig._useUTC = config._useUTC;
    }
    tempConfig._f = config._f[i];
    configFromStringAndFormat(tempConfig);
    if (isValid(tempConfig)) {
      validFormatFound = true;
    }
    currentScore += getParsingFlags(tempConfig).charsLeftOver;
    currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
    getParsingFlags(tempConfig).score = currentScore;
    if (!bestFormatIsValid) {
      if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
        scoreToBeat = currentScore;
        bestMoment = tempConfig;
        if (validFormatFound) {
          bestFormatIsValid = true;
        }
      }
    } else {
      if (currentScore < scoreToBeat) {
        scoreToBeat = currentScore;
        bestMoment = tempConfig;
      }
    }
  }
  extend(config, bestMoment || tempConfig);
}
function configFromObject(config) {
  if (config._d) {
    return;
  }
  var i = normalizeObjectUnits(config._i), dayOrDate = i.day === void 0 ? i.date : i.day;
  config._a = map(
    [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
    function(obj) {
      return obj && parseInt(obj, 10);
    }
  );
  configFromArray(config);
}
function createFromConfig(config) {
  var res = new Moment(checkOverflow(prepareConfig(config)));
  if (res._nextDay) {
    res.add(1, "d");
    res._nextDay = void 0;
  }
  return res;
}
function prepareConfig(config) {
  var input = config._i, format2 = config._f;
  config._locale = config._locale || getLocale(config._l);
  if (input === null || format2 === void 0 && input === "") {
    return createInvalid({ nullInput: true });
  }
  if (typeof input === "string") {
    config._i = input = config._locale.preparse(input);
  }
  if (isMoment(input)) {
    return new Moment(checkOverflow(input));
  } else if (isDate(input)) {
    config._d = input;
  } else if (isArray(format2)) {
    configFromStringAndArray(config);
  } else if (format2) {
    configFromStringAndFormat(config);
  } else {
    configFromInput(config);
  }
  if (!isValid(config)) {
    config._d = null;
  }
  return config;
}
function configFromInput(config) {
  var input = config._i;
  if (isUndefined(input)) {
    config._d = new Date(hooks.now());
  } else if (isDate(input)) {
    config._d = new Date(input.valueOf());
  } else if (typeof input === "string") {
    configFromString(config);
  } else if (isArray(input)) {
    config._a = map(input.slice(0), function(obj) {
      return parseInt(obj, 10);
    });
    configFromArray(config);
  } else if (isObject(input)) {
    configFromObject(config);
  } else if (isNumber(input)) {
    config._d = new Date(input);
  } else {
    hooks.createFromInputFallback(config);
  }
}
function createLocalOrUTC(input, format2, locale2, strict, isUTC) {
  var c = {};
  if (format2 === true || format2 === false) {
    strict = format2;
    format2 = void 0;
  }
  if (locale2 === true || locale2 === false) {
    strict = locale2;
    locale2 = void 0;
  }
  if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
    input = void 0;
  }
  c._isAMomentObject = true;
  c._useUTC = c._isUTC = isUTC;
  c._l = locale2;
  c._i = input;
  c._f = format2;
  c._strict = strict;
  return createFromConfig(c);
}
function createLocal(input, format2, locale2, strict) {
  return createLocalOrUTC(input, format2, locale2, strict, false);
}
function pickBy(fn, moments) {
  var res, i;
  if (moments.length === 1 && isArray(moments[0])) {
    moments = moments[0];
  }
  if (!moments.length) {
    return createLocal();
  }
  res = moments[0];
  for (i = 1; i < moments.length; ++i) {
    if (!moments[i].isValid() || moments[i][fn](res)) {
      res = moments[i];
    }
  }
  return res;
}
function min() {
  var args = [].slice.call(arguments, 0);
  return pickBy("isBefore", args);
}
function max() {
  var args = [].slice.call(arguments, 0);
  return pickBy("isAfter", args);
}
function isDurationValid(m) {
  var key, unitHasDecimal = false, i, orderLen = ordering.length;
  for (key in m) {
    if (hasOwnProp(m, key) && !(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
      return false;
    }
  }
  for (i = 0; i < orderLen; ++i) {
    if (m[ordering[i]]) {
      if (unitHasDecimal) {
        return false;
      }
      if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
        unitHasDecimal = true;
      }
    }
  }
  return true;
}
function isValid$1() {
  return this._isValid;
}
function createInvalid$1() {
  return createDuration(NaN);
}
function Duration(duration) {
  var normalizedInput = normalizeObjectUnits(duration), years2 = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months2 = normalizedInput.month || 0, weeks2 = normalizedInput.week || normalizedInput.isoWeek || 0, days2 = normalizedInput.day || 0, hours2 = normalizedInput.hour || 0, minutes2 = normalizedInput.minute || 0, seconds2 = normalizedInput.second || 0, milliseconds2 = normalizedInput.millisecond || 0;
  this._isValid = isDurationValid(normalizedInput);
  this._milliseconds = +milliseconds2 + seconds2 * 1e3 + // 1000
  minutes2 * 6e4 + // 1000 * 60
  hours2 * 1e3 * 60 * 60;
  this._days = +days2 + weeks2 * 7;
  this._months = +months2 + quarters * 3 + years2 * 12;
  this._data = {};
  this._locale = getLocale();
  this._bubble();
}
function isDuration(obj) {
  return obj instanceof Duration;
}
function absRound(number) {
  if (number < 0) {
    return Math.round(-1 * number) * -1;
  } else {
    return Math.round(number);
  }
}
function compareArrays(array1, array2, dontConvert) {
  var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i;
  for (i = 0; i < len; i++) {
    if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
      diffs++;
    }
  }
  return diffs + lengthDiff;
}
function offset(token2, separator) {
  addFormatToken(token2, 0, 0, function() {
    var offset2 = this.utcOffset(), sign2 = "+";
    if (offset2 < 0) {
      offset2 = -offset2;
      sign2 = "-";
    }
    return sign2 + zeroFill(~~(offset2 / 60), 2) + separator + zeroFill(~~offset2 % 60, 2);
  });
}
function offsetFromString(matcher, string) {
  var matches = (string || "").match(matcher), chunk, parts, minutes2;
  if (matches === null) {
    return null;
  }
  chunk = matches[matches.length - 1] || [];
  parts = (chunk + "").match(chunkOffset) || ["-", 0, 0];
  minutes2 = +(parts[1] * 60) + toInt(parts[2]);
  return minutes2 === 0 ? 0 : parts[0] === "+" ? minutes2 : -minutes2;
}
function cloneWithOffset(input, model) {
  var res, diff2;
  if (model._isUTC) {
    res = model.clone();
    diff2 = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
    res._d.setTime(res._d.valueOf() + diff2);
    hooks.updateOffset(res, false);
    return res;
  } else {
    return createLocal(input).local();
  }
}
function getDateOffset(m) {
  return -Math.round(m._d.getTimezoneOffset());
}
function getSetOffset(input, keepLocalTime, keepMinutes) {
  var offset2 = this._offset || 0, localAdjust;
  if (!this.isValid()) {
    return input != null ? this : NaN;
  }
  if (input != null) {
    if (typeof input === "string") {
      input = offsetFromString(matchShortOffset, input);
      if (input === null) {
        return this;
      }
    } else if (Math.abs(input) < 16 && !keepMinutes) {
      input = input * 60;
    }
    if (!this._isUTC && keepLocalTime) {
      localAdjust = getDateOffset(this);
    }
    this._offset = input;
    this._isUTC = true;
    if (localAdjust != null) {
      this.add(localAdjust, "m");
    }
    if (offset2 !== input) {
      if (!keepLocalTime || this._changeInProgress) {
        addSubtract(
          this,
          createDuration(input - offset2, "m"),
          1,
          false
        );
      } else if (!this._changeInProgress) {
        this._changeInProgress = true;
        hooks.updateOffset(this, true);
        this._changeInProgress = null;
      }
    }
    return this;
  } else {
    return this._isUTC ? offset2 : getDateOffset(this);
  }
}
function getSetZone(input, keepLocalTime) {
  if (input != null) {
    if (typeof input !== "string") {
      input = -input;
    }
    this.utcOffset(input, keepLocalTime);
    return this;
  } else {
    return -this.utcOffset();
  }
}
function setOffsetToUTC(keepLocalTime) {
  return this.utcOffset(0, keepLocalTime);
}
function setOffsetToLocal(keepLocalTime) {
  if (this._isUTC) {
    this.utcOffset(0, keepLocalTime);
    this._isUTC = false;
    if (keepLocalTime) {
      this.subtract(getDateOffset(this), "m");
    }
  }
  return this;
}
function setOffsetToParsedOffset() {
  if (this._tzm != null) {
    this.utcOffset(this._tzm, false, true);
  } else if (typeof this._i === "string") {
    var tZone = offsetFromString(matchOffset, this._i);
    if (tZone != null) {
      this.utcOffset(tZone);
    } else {
      this.utcOffset(0, true);
    }
  }
  return this;
}
function hasAlignedHourOffset(input) {
  if (!this.isValid()) {
    return false;
  }
  input = input ? createLocal(input).utcOffset() : 0;
  return (this.utcOffset() - input) % 60 === 0;
}
function isDaylightSavingTime() {
  return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
}
function isDaylightSavingTimeShifted() {
  if (!isUndefined(this._isDSTShifted)) {
    return this._isDSTShifted;
  }
  var c = {}, other;
  copyConfig(c, this);
  c = prepareConfig(c);
  if (c._a) {
    other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
    this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
  } else {
    this._isDSTShifted = false;
  }
  return this._isDSTShifted;
}
function isLocal() {
  return this.isValid() ? !this._isUTC : false;
}
function isUtcOffset() {
  return this.isValid() ? this._isUTC : false;
}
function isUtc() {
  return this.isValid() ? this._isUTC && this._offset === 0 : false;
}
function createDuration(input, key) {
  var duration = input, match = null, sign2, ret, diffRes;
  if (isDuration(input)) {
    duration = {
      ms: input._milliseconds,
      d: input._days,
      M: input._months
    };
  } else if (isNumber(input) || !isNaN(+input)) {
    duration = {};
    if (key) {
      duration[key] = +input;
    } else {
      duration.milliseconds = +input;
    }
  } else if (match = aspNetRegex.exec(input)) {
    sign2 = match[1] === "-" ? -1 : 1;
    duration = {
      y: 0,
      d: toInt(match[DATE]) * sign2,
      h: toInt(match[HOUR]) * sign2,
      m: toInt(match[MINUTE]) * sign2,
      s: toInt(match[SECOND]) * sign2,
      ms: toInt(absRound(match[MILLISECOND] * 1e3)) * sign2
      // the millisecond decimal point is included in the match
    };
  } else if (match = isoRegex.exec(input)) {
    sign2 = match[1] === "-" ? -1 : 1;
    duration = {
      y: parseIso(match[2], sign2),
      M: parseIso(match[3], sign2),
      w: parseIso(match[4], sign2),
      d: parseIso(match[5], sign2),
      h: parseIso(match[6], sign2),
      m: parseIso(match[7], sign2),
      s: parseIso(match[8], sign2)
    };
  } else if (duration == null) {
    duration = {};
  } else if (typeof duration === "object" && ("from" in duration || "to" in duration)) {
    diffRes = momentsDifference(
      createLocal(duration.from),
      createLocal(duration.to)
    );
    duration = {};
    duration.ms = diffRes.milliseconds;
    duration.M = diffRes.months;
  }
  ret = new Duration(duration);
  if (isDuration(input) && hasOwnProp(input, "_locale")) {
    ret._locale = input._locale;
  }
  if (isDuration(input) && hasOwnProp(input, "_isValid")) {
    ret._isValid = input._isValid;
  }
  return ret;
}
function parseIso(inp, sign2) {
  var res = inp && parseFloat(inp.replace(",", "."));
  return (isNaN(res) ? 0 : res) * sign2;
}
function positiveMomentsDifference(base, other) {
  var res = {};
  res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
  if (base.clone().add(res.months, "M").isAfter(other)) {
    --res.months;
  }
  res.milliseconds = +other - +base.clone().add(res.months, "M");
  return res;
}
function momentsDifference(base, other) {
  var res;
  if (!(base.isValid() && other.isValid())) {
    return { milliseconds: 0, months: 0 };
  }
  other = cloneWithOffset(other, base);
  if (base.isBefore(other)) {
    res = positiveMomentsDifference(base, other);
  } else {
    res = positiveMomentsDifference(other, base);
    res.milliseconds = -res.milliseconds;
    res.months = -res.months;
  }
  return res;
}
function createAdder(direction, name) {
  return function(val, period) {
    var dur, tmp;
    if (period !== null && !isNaN(+period)) {
      deprecateSimple(
        name,
        "moment()." + name + "(period, number) is deprecated. Please use moment()." + name + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."
      );
      tmp = val;
      val = period;
      period = tmp;
    }
    dur = createDuration(val, period);
    addSubtract(this, dur, direction);
    return this;
  };
}
function addSubtract(mom, duration, isAdding, updateOffset) {
  var milliseconds2 = duration._milliseconds, days2 = absRound(duration._days), months2 = absRound(duration._months);
  if (!mom.isValid()) {
    return;
  }
  updateOffset = updateOffset == null ? true : updateOffset;
  if (months2) {
    setMonth(mom, get(mom, "Month") + months2 * isAdding);
  }
  if (days2) {
    set$1(mom, "Date", get(mom, "Date") + days2 * isAdding);
  }
  if (milliseconds2) {
    mom._d.setTime(mom._d.valueOf() + milliseconds2 * isAdding);
  }
  if (updateOffset) {
    hooks.updateOffset(mom, days2 || months2);
  }
}
function isString(input) {
  return typeof input === "string" || input instanceof String;
}
function isMomentInput(input) {
  return isMoment(input) || isDate(input) || isString(input) || isNumber(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === void 0;
}
function isMomentInputObject(input) {
  var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
    "years",
    "year",
    "y",
    "months",
    "month",
    "M",
    "days",
    "day",
    "d",
    "dates",
    "date",
    "D",
    "hours",
    "hour",
    "h",
    "minutes",
    "minute",
    "m",
    "seconds",
    "second",
    "s",
    "milliseconds",
    "millisecond",
    "ms"
  ], i, property, propertyLen = properties.length;
  for (i = 0; i < propertyLen; i += 1) {
    property = properties[i];
    propertyTest = propertyTest || hasOwnProp(input, property);
  }
  return objectTest && propertyTest;
}
function isNumberOrStringArray(input) {
  var arrayTest = isArray(input), dataTypeTest = false;
  if (arrayTest) {
    dataTypeTest = input.filter(function(item) {
      return !isNumber(item) && isString(input);
    }).length === 0;
  }
  return arrayTest && dataTypeTest;
}
function isCalendarSpec(input) {
  var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
    "sameDay",
    "nextDay",
    "lastDay",
    "nextWeek",
    "lastWeek",
    "sameElse"
  ], i, property;
  for (i = 0; i < properties.length; i += 1) {
    property = properties[i];
    propertyTest = propertyTest || hasOwnProp(input, property);
  }
  return objectTest && propertyTest;
}
function getCalendarFormat(myMoment, now2) {
  var diff2 = myMoment.diff(now2, "days", true);
  return diff2 < -6 ? "sameElse" : diff2 < -1 ? "lastWeek" : diff2 < 0 ? "lastDay" : diff2 < 1 ? "sameDay" : diff2 < 2 ? "nextDay" : diff2 < 7 ? "nextWeek" : "sameElse";
}
function calendar$1(time, formats) {
  if (arguments.length === 1) {
    if (!arguments[0]) {
      time = void 0;
      formats = void 0;
    } else if (isMomentInput(arguments[0])) {
      time = arguments[0];
      formats = void 0;
    } else if (isCalendarSpec(arguments[0])) {
      formats = arguments[0];
      time = void 0;
    }
  }
  var now2 = time || createLocal(), sod = cloneWithOffset(now2, this).startOf("day"), format2 = hooks.calendarFormat(this, sod) || "sameElse", output = formats && (isFunction(formats[format2]) ? formats[format2].call(this, now2) : formats[format2]);
  return this.format(
    output || this.localeData().calendar(format2, this, createLocal(now2))
  );
}
function clone() {
  return new Moment(this);
}
function isAfter(input, units) {
  var localInput = isMoment(input) ? input : createLocal(input);
  if (!(this.isValid() && localInput.isValid())) {
    return false;
  }
  units = normalizeUnits(units) || "millisecond";
  if (units === "millisecond") {
    return this.valueOf() > localInput.valueOf();
  } else {
    return localInput.valueOf() < this.clone().startOf(units).valueOf();
  }
}
function isBefore(input, units) {
  var localInput = isMoment(input) ? input : createLocal(input);
  if (!(this.isValid() && localInput.isValid())) {
    return false;
  }
  units = normalizeUnits(units) || "millisecond";
  if (units === "millisecond") {
    return this.valueOf() < localInput.valueOf();
  } else {
    return this.clone().endOf(units).valueOf() < localInput.valueOf();
  }
}
function isBetween(from2, to2, units, inclusivity) {
  var localFrom = isMoment(from2) ? from2 : createLocal(from2), localTo = isMoment(to2) ? to2 : createLocal(to2);
  if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
    return false;
  }
  inclusivity = inclusivity || "()";
  return (inclusivity[0] === "(" ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ")" ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
}
function isSame(input, units) {
  var localInput = isMoment(input) ? input : createLocal(input), inputMs;
  if (!(this.isValid() && localInput.isValid())) {
    return false;
  }
  units = normalizeUnits(units) || "millisecond";
  if (units === "millisecond") {
    return this.valueOf() === localInput.valueOf();
  } else {
    inputMs = localInput.valueOf();
    return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
  }
}
function isSameOrAfter(input, units) {
  return this.isSame(input, units) || this.isAfter(input, units);
}
function isSameOrBefore(input, units) {
  return this.isSame(input, units) || this.isBefore(input, units);
}
function diff(input, units, asFloat) {
  var that, zoneDelta, output;
  if (!this.isValid()) {
    return NaN;
  }
  that = cloneWithOffset(input, this);
  if (!that.isValid()) {
    return NaN;
  }
  zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
  units = normalizeUnits(units);
  switch (units) {
    case "year":
      output = monthDiff(this, that) / 12;
      break;
    case "month":
      output = monthDiff(this, that);
      break;
    case "quarter":
      output = monthDiff(this, that) / 3;
      break;
    case "second":
      output = (this - that) / 1e3;
      break;
    case "minute":
      output = (this - that) / 6e4;
      break;
    case "hour":
      output = (this - that) / 36e5;
      break;
    case "day":
      output = (this - that - zoneDelta) / 864e5;
      break;
    case "week":
      output = (this - that - zoneDelta) / 6048e5;
      break;
    default:
      output = this - that;
  }
  return asFloat ? output : absFloor(output);
}
function monthDiff(a, b) {
  if (a.date() < b.date()) {
    return -monthDiff(b, a);
  }
  var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()), anchor = a.clone().add(wholeMonthDiff, "months"), anchor2, adjust;
  if (b - anchor < 0) {
    anchor2 = a.clone().add(wholeMonthDiff - 1, "months");
    adjust = (b - anchor) / (anchor - anchor2);
  } else {
    anchor2 = a.clone().add(wholeMonthDiff + 1, "months");
    adjust = (b - anchor) / (anchor2 - anchor);
  }
  return -(wholeMonthDiff + adjust) || 0;
}
function toString() {
  return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
}
function toISOString(keepOffset) {
  if (!this.isValid()) {
    return null;
  }
  var utc = keepOffset !== true, m = utc ? this.clone().utc() : this;
  if (m.year() < 0 || m.year() > 9999) {
    return formatMoment(
      m,
      utc ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"
    );
  }
  if (isFunction(Date.prototype.toISOString)) {
    if (utc) {
      return this.toDate().toISOString();
    } else {
      return new Date(this.valueOf() + this.utcOffset() * 60 * 1e3).toISOString().replace("Z", formatMoment(m, "Z"));
    }
  }
  return formatMoment(
    m,
    utc ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ"
  );
}
function inspect() {
  if (!this.isValid()) {
    return "moment.invalid(/* " + this._i + " */)";
  }
  var func = "moment", zone = "", prefix, year, datetime, suffix;
  if (!this.isLocal()) {
    func = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone";
    zone = "Z";
  }
  prefix = "[" + func + '("]';
  year = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY";
  datetime = "-MM-DD[T]HH:mm:ss.SSS";
  suffix = zone + '[")]';
  return this.format(prefix + year + datetime + suffix);
}
function format(inputString) {
  if (!inputString) {
    inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
  }
  var output = formatMoment(this, inputString);
  return this.localeData().postformat(output);
}
function from(time, withoutSuffix) {
  if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
    return createDuration({ to: this, from: time }).locale(this.locale()).humanize(!withoutSuffix);
  } else {
    return this.localeData().invalidDate();
  }
}
function fromNow(withoutSuffix) {
  return this.from(createLocal(), withoutSuffix);
}
function to(time, withoutSuffix) {
  if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
    return createDuration({ from: this, to: time }).locale(this.locale()).humanize(!withoutSuffix);
  } else {
    return this.localeData().invalidDate();
  }
}
function toNow(withoutSuffix) {
  return this.to(createLocal(), withoutSuffix);
}
function locale(key) {
  var newLocaleData;
  if (key === void 0) {
    return this._locale._abbr;
  } else {
    newLocaleData = getLocale(key);
    if (newLocaleData != null) {
      this._locale = newLocaleData;
    }
    return this;
  }
}
function localeData() {
  return this._locale;
}
function mod$1(dividend, divisor) {
  return (dividend % divisor + divisor) % divisor;
}
function localStartOfDate(y, m, d) {
  if (y < 100 && y >= 0) {
    return new Date(y + 400, m, d) - MS_PER_400_YEARS;
  } else {
    return new Date(y, m, d).valueOf();
  }
}
function utcStartOfDate(y, m, d) {
  if (y < 100 && y >= 0) {
    return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
  } else {
    return Date.UTC(y, m, d);
  }
}
function startOf(units) {
  var time, startOfDate;
  units = normalizeUnits(units);
  if (units === void 0 || units === "millisecond" || !this.isValid()) {
    return this;
  }
  startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
  switch (units) {
    case "year":
      time = startOfDate(this.year(), 0, 1);
      break;
    case "quarter":
      time = startOfDate(
        this.year(),
        this.month() - this.month() % 3,
        1
      );
      break;
    case "month":
      time = startOfDate(this.year(), this.month(), 1);
      break;
    case "week":
      time = startOfDate(
        this.year(),
        this.month(),
        this.date() - this.weekday()
      );
      break;
    case "isoWeek":
      time = startOfDate(
        this.year(),
        this.month(),
        this.date() - (this.isoWeekday() - 1)
      );
      break;
    case "day":
    case "date":
      time = startOfDate(this.year(), this.month(), this.date());
      break;
    case "hour":
      time = this._d.valueOf();
      time -= mod$1(
        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
        MS_PER_HOUR
      );
      break;
    case "minute":
      time = this._d.valueOf();
      time -= mod$1(time, MS_PER_MINUTE);
      break;
    case "second":
      time = this._d.valueOf();
      time -= mod$1(time, MS_PER_SECOND);
      break;
  }
  this._d.setTime(time);
  hooks.updateOffset(this, true);
  return this;
}
function endOf(units) {
  var time, startOfDate;
  units = normalizeUnits(units);
  if (units === void 0 || units === "millisecond" || !this.isValid()) {
    return this;
  }
  startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
  switch (units) {
    case "year":
      time = startOfDate(this.year() + 1, 0, 1) - 1;
      break;
    case "quarter":
      time = startOfDate(
        this.year(),
        this.month() - this.month() % 3 + 3,
        1
      ) - 1;
      break;
    case "month":
      time = startOfDate(this.year(), this.month() + 1, 1) - 1;
      break;
    case "week":
      time = startOfDate(
        this.year(),
        this.month(),
        this.date() - this.weekday() + 7
      ) - 1;
      break;
    case "isoWeek":
      time = startOfDate(
        this.year(),
        this.month(),
        this.date() - (this.isoWeekday() - 1) + 7
      ) - 1;
      break;
    case "day":
    case "date":
      time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
      break;
    case "hour":
      time = this._d.valueOf();
      time += MS_PER_HOUR - mod$1(
        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
        MS_PER_HOUR
      ) - 1;
      break;
    case "minute":
      time = this._d.valueOf();
      time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
      break;
    case "second":
      time = this._d.valueOf();
      time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
      break;
  }
  this._d.setTime(time);
  hooks.updateOffset(this, true);
  return this;
}
function valueOf() {
  return this._d.valueOf() - (this._offset || 0) * 6e4;
}
function unix() {
  return Math.floor(this.valueOf() / 1e3);
}
function toDate() {
  return new Date(this.valueOf());
}
function toArray() {
  var m = this;
  return [
    m.year(),
    m.month(),
    m.date(),
    m.hour(),
    m.minute(),
    m.second(),
    m.millisecond()
  ];
}
function toObject() {
  var m = this;
  return {
    years: m.year(),
    months: m.month(),
    date: m.date(),
    hours: m.hours(),
    minutes: m.minutes(),
    seconds: m.seconds(),
    milliseconds: m.milliseconds()
  };
}
function toJSON() {
  return this.isValid() ? this.toISOString() : null;
}
function isValid$2() {
  return isValid(this);
}
function parsingFlags() {
  return extend({}, getParsingFlags(this));
}
function invalidAt() {
  return getParsingFlags(this).overflow;
}
function creationData() {
  return {
    input: this._i,
    format: this._f,
    locale: this._locale,
    isUTC: this._isUTC,
    strict: this._strict
  };
}
function localeEras(m, format2) {
  var i, l, date, eras = this._eras || getLocale("en")._eras;
  for (i = 0, l = eras.length; i < l; ++i) {
    switch (typeof eras[i].since) {
      case "string":
        date = hooks(eras[i].since).startOf("day");
        eras[i].since = date.valueOf();
        break;
    }
    switch (typeof eras[i].until) {
      case "undefined":
        eras[i].until = Infinity;
        break;
      case "string":
        date = hooks(eras[i].until).startOf("day").valueOf();
        eras[i].until = date.valueOf();
        break;
    }
  }
  return eras;
}
function localeErasParse(eraName, format2, strict) {
  var i, l, eras = this.eras(), name, abbr, narrow;
  eraName = eraName.toUpperCase();
  for (i = 0, l = eras.length; i < l; ++i) {
    name = eras[i].name.toUpperCase();
    abbr = eras[i].abbr.toUpperCase();
    narrow = eras[i].narrow.toUpperCase();
    if (strict) {
      switch (format2) {
        case "N":
        case "NN":
        case "NNN":
          if (abbr === eraName) {
            return eras[i];
          }
          break;
        case "NNNN":
          if (name === eraName) {
            return eras[i];
          }
          break;
        case "NNNNN":
          if (narrow === eraName) {
            return eras[i];
          }
          break;
      }
    } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
      return eras[i];
    }
  }
}
function localeErasConvertYear(era, year) {
  var dir = era.since <= era.until ? 1 : -1;
  if (year === void 0) {
    return hooks(era.since).year();
  } else {
    return hooks(era.since).year() + (year - era.offset) * dir;
  }
}
function getEraName() {
  var i, l, val, eras = this.localeData().eras();
  for (i = 0, l = eras.length; i < l; ++i) {
    val = this.clone().startOf("day").valueOf();
    if (eras[i].since <= val && val <= eras[i].until) {
      return eras[i].name;
    }
    if (eras[i].until <= val && val <= eras[i].since) {
      return eras[i].name;
    }
  }
  return "";
}
function getEraNarrow() {
  var i, l, val, eras = this.localeData().eras();
  for (i = 0, l = eras.length; i < l; ++i) {
    val = this.clone().startOf("day").valueOf();
    if (eras[i].since <= val && val <= eras[i].until) {
      return eras[i].narrow;
    }
    if (eras[i].until <= val && val <= eras[i].since) {
      return eras[i].narrow;
    }
  }
  return "";
}
function getEraAbbr() {
  var i, l, val, eras = this.localeData().eras();
  for (i = 0, l = eras.length; i < l; ++i) {
    val = this.clone().startOf("day").valueOf();
    if (eras[i].since <= val && val <= eras[i].until) {
      return eras[i].abbr;
    }
    if (eras[i].until <= val && val <= eras[i].since) {
      return eras[i].abbr;
    }
  }
  return "";
}
function getEraYear() {
  var i, l, dir, val, eras = this.localeData().eras();
  for (i = 0, l = eras.length; i < l; ++i) {
    dir = eras[i].since <= eras[i].until ? 1 : -1;
    val = this.clone().startOf("day").valueOf();
    if (eras[i].since <= val && val <= eras[i].until || eras[i].until <= val && val <= eras[i].since) {
      return (this.year() - hooks(eras[i].since).year()) * dir + eras[i].offset;
    }
  }
  return this.year();
}
function erasNameRegex(isStrict) {
  if (!hasOwnProp(this, "_erasNameRegex")) {
    computeErasParse.call(this);
  }
  return isStrict ? this._erasNameRegex : this._erasRegex;
}
function erasAbbrRegex(isStrict) {
  if (!hasOwnProp(this, "_erasAbbrRegex")) {
    computeErasParse.call(this);
  }
  return isStrict ? this._erasAbbrRegex : this._erasRegex;
}
function erasNarrowRegex(isStrict) {
  if (!hasOwnProp(this, "_erasNarrowRegex")) {
    computeErasParse.call(this);
  }
  return isStrict ? this._erasNarrowRegex : this._erasRegex;
}
function matchEraAbbr(isStrict, locale2) {
  return locale2.erasAbbrRegex(isStrict);
}
function matchEraName(isStrict, locale2) {
  return locale2.erasNameRegex(isStrict);
}
function matchEraNarrow(isStrict, locale2) {
  return locale2.erasNarrowRegex(isStrict);
}
function matchEraYearOrdinal(isStrict, locale2) {
  return locale2._eraYearOrdinalRegex || matchUnsigned;
}
function computeErasParse() {
  var abbrPieces = [], namePieces = [], narrowPieces = [], mixedPieces = [], i, l, erasName, erasAbbr, erasNarrow, eras = this.eras();
  for (i = 0, l = eras.length; i < l; ++i) {
    erasName = regexEscape(eras[i].name);
    erasAbbr = regexEscape(eras[i].abbr);
    erasNarrow = regexEscape(eras[i].narrow);
    namePieces.push(erasName);
    abbrPieces.push(erasAbbr);
    narrowPieces.push(erasNarrow);
    mixedPieces.push(erasName);
    mixedPieces.push(erasAbbr);
    mixedPieces.push(erasNarrow);
  }
  this._erasRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
  this._erasNameRegex = new RegExp("^(" + namePieces.join("|") + ")", "i");
  this._erasAbbrRegex = new RegExp("^(" + abbrPieces.join("|") + ")", "i");
  this._erasNarrowRegex = new RegExp(
    "^(" + narrowPieces.join("|") + ")",
    "i"
  );
}
function addWeekYearFormatToken(token2, getter) {
  addFormatToken(0, [token2, token2.length], 0, getter);
}
function getSetWeekYear(input) {
  return getSetWeekYearHelper.call(
    this,
    input,
    this.week(),
    this.weekday() + this.localeData()._week.dow,
    this.localeData()._week.dow,
    this.localeData()._week.doy
  );
}
function getSetISOWeekYear(input) {
  return getSetWeekYearHelper.call(
    this,
    input,
    this.isoWeek(),
    this.isoWeekday(),
    1,
    4
  );
}
function getISOWeeksInYear() {
  return weeksInYear(this.year(), 1, 4);
}
function getISOWeeksInISOWeekYear() {
  return weeksInYear(this.isoWeekYear(), 1, 4);
}
function getWeeksInYear() {
  var weekInfo = this.localeData()._week;
  return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
}
function getWeeksInWeekYear() {
  var weekInfo = this.localeData()._week;
  return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
}
function getSetWeekYearHelper(input, week, weekday, dow, doy) {
  var weeksTarget;
  if (input == null) {
    return weekOfYear(this, dow, doy).year;
  } else {
    weeksTarget = weeksInYear(input, dow, doy);
    if (week > weeksTarget) {
      week = weeksTarget;
    }
    return setWeekAll.call(this, input, week, weekday, dow, doy);
  }
}
function setWeekAll(weekYear, week, weekday, dow, doy) {
  var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
  this.year(date.getUTCFullYear());
  this.month(date.getUTCMonth());
  this.date(date.getUTCDate());
  return this;
}
function getSetQuarter(input) {
  return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
}
function getSetDayOfYear(input) {
  var dayOfYear = Math.round(
    (this.clone().startOf("day") - this.clone().startOf("year")) / 864e5
  ) + 1;
  return input == null ? dayOfYear : this.add(input - dayOfYear, "d");
}
function parseMs(input, array) {
  array[MILLISECOND] = toInt(("0." + input) * 1e3);
}
function getZoneAbbr() {
  return this._isUTC ? "UTC" : "";
}
function getZoneName() {
  return this._isUTC ? "Coordinated Universal Time" : "";
}
function createUnix(input) {
  return createLocal(input * 1e3);
}
function createInZone() {
  return createLocal.apply(null, arguments).parseZone();
}
function preParsePostFormat(string) {
  return string;
}
function get$1(format2, index, field, setter) {
  var locale2 = getLocale(), utc = createUTC().set(setter, index);
  return locale2[field](utc, format2);
}
function listMonthsImpl(format2, index, field) {
  if (isNumber(format2)) {
    index = format2;
    format2 = void 0;
  }
  format2 = format2 || "";
  if (index != null) {
    return get$1(format2, index, field, "month");
  }
  var i, out = [];
  for (i = 0; i < 12; i++) {
    out[i] = get$1(format2, i, field, "month");
  }
  return out;
}
function listWeekdaysImpl(localeSorted, format2, index, field) {
  if (typeof localeSorted === "boolean") {
    if (isNumber(format2)) {
      index = format2;
      format2 = void 0;
    }
    format2 = format2 || "";
  } else {
    format2 = localeSorted;
    index = format2;
    localeSorted = false;
    if (isNumber(format2)) {
      index = format2;
      format2 = void 0;
    }
    format2 = format2 || "";
  }
  var locale2 = getLocale(), shift = localeSorted ? locale2._week.dow : 0, i, out = [];
  if (index != null) {
    return get$1(format2, (index + shift) % 7, field, "day");
  }
  for (i = 0; i < 7; i++) {
    out[i] = get$1(format2, (i + shift) % 7, field, "day");
  }
  return out;
}
function listMonths(format2, index) {
  return listMonthsImpl(format2, index, "months");
}
function listMonthsShort(format2, index) {
  return listMonthsImpl(format2, index, "monthsShort");
}
function listWeekdays(localeSorted, format2, index) {
  return listWeekdaysImpl(localeSorted, format2, index, "weekdays");
}
function listWeekdaysShort(localeSorted, format2, index) {
  return listWeekdaysImpl(localeSorted, format2, index, "weekdaysShort");
}
function listWeekdaysMin(localeSorted, format2, index) {
  return listWeekdaysImpl(localeSorted, format2, index, "weekdaysMin");
}
function abs() {
  var data = this._data;
  this._milliseconds = mathAbs(this._milliseconds);
  this._days = mathAbs(this._days);
  this._months = mathAbs(this._months);
  data.milliseconds = mathAbs(data.milliseconds);
  data.seconds = mathAbs(data.seconds);
  data.minutes = mathAbs(data.minutes);
  data.hours = mathAbs(data.hours);
  data.months = mathAbs(data.months);
  data.years = mathAbs(data.years);
  return this;
}
function addSubtract$1(duration, input, value, direction) {
  var other = createDuration(input, value);
  duration._milliseconds += direction * other._milliseconds;
  duration._days += direction * other._days;
  duration._months += direction * other._months;
  return duration._bubble();
}
function add$1(input, value) {
  return addSubtract$1(this, input, value, 1);
}
function subtract$1(input, value) {
  return addSubtract$1(this, input, value, -1);
}
function absCeil(number) {
  if (number < 0) {
    return Math.floor(number);
  } else {
    return Math.ceil(number);
  }
}
function bubble() {
  var milliseconds2 = this._milliseconds, days2 = this._days, months2 = this._months, data = this._data, seconds2, minutes2, hours2, years2, monthsFromDays;
  if (!(milliseconds2 >= 0 && days2 >= 0 && months2 >= 0 || milliseconds2 <= 0 && days2 <= 0 && months2 <= 0)) {
    milliseconds2 += absCeil(monthsToDays(months2) + days2) * 864e5;
    days2 = 0;
    months2 = 0;
  }
  data.milliseconds = milliseconds2 % 1e3;
  seconds2 = absFloor(milliseconds2 / 1e3);
  data.seconds = seconds2 % 60;
  minutes2 = absFloor(seconds2 / 60);
  data.minutes = minutes2 % 60;
  hours2 = absFloor(minutes2 / 60);
  data.hours = hours2 % 24;
  days2 += absFloor(hours2 / 24);
  monthsFromDays = absFloor(daysToMonths(days2));
  months2 += monthsFromDays;
  days2 -= absCeil(monthsToDays(monthsFromDays));
  years2 = absFloor(months2 / 12);
  months2 %= 12;
  data.days = days2;
  data.months = months2;
  data.years = years2;
  return this;
}
function daysToMonths(days2) {
  return days2 * 4800 / 146097;
}
function monthsToDays(months2) {
  return months2 * 146097 / 4800;
}
function as(units) {
  if (!this.isValid()) {
    return NaN;
  }
  var days2, months2, milliseconds2 = this._milliseconds;
  units = normalizeUnits(units);
  if (units === "month" || units === "quarter" || units === "year") {
    days2 = this._days + milliseconds2 / 864e5;
    months2 = this._months + daysToMonths(days2);
    switch (units) {
      case "month":
        return months2;
      case "quarter":
        return months2 / 3;
      case "year":
        return months2 / 12;
    }
  } else {
    days2 = this._days + Math.round(monthsToDays(this._months));
    switch (units) {
      case "week":
        return days2 / 7 + milliseconds2 / 6048e5;
      case "day":
        return days2 + milliseconds2 / 864e5;
      case "hour":
        return days2 * 24 + milliseconds2 / 36e5;
      case "minute":
        return days2 * 1440 + milliseconds2 / 6e4;
      case "second":
        return days2 * 86400 + milliseconds2 / 1e3;
      case "millisecond":
        return Math.floor(days2 * 864e5) + milliseconds2;
      default:
        throw new Error("Unknown unit " + units);
    }
  }
}
function makeAs(alias) {
  return function() {
    return this.as(alias);
  };
}
function clone$1() {
  return createDuration(this);
}
function get$2(units) {
  units = normalizeUnits(units);
  return this.isValid() ? this[units + "s"]() : NaN;
}
function makeGetter(name) {
  return function() {
    return this.isValid() ? this._data[name] : NaN;
  };
}
function weeks() {
  return absFloor(this.days() / 7);
}
function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale2) {
  return locale2.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
}
function relativeTime$1(posNegDuration, withoutSuffix, thresholds2, locale2) {
  var duration = createDuration(posNegDuration).abs(), seconds2 = round(duration.as("s")), minutes2 = round(duration.as("m")), hours2 = round(duration.as("h")), days2 = round(duration.as("d")), months2 = round(duration.as("M")), weeks2 = round(duration.as("w")), years2 = round(duration.as("y")), a = seconds2 <= thresholds2.ss && ["s", seconds2] || seconds2 < thresholds2.s && ["ss", seconds2] || minutes2 <= 1 && ["m"] || minutes2 < thresholds2.m && ["mm", minutes2] || hours2 <= 1 && ["h"] || hours2 < thresholds2.h && ["hh", hours2] || days2 <= 1 && ["d"] || days2 < thresholds2.d && ["dd", days2];
  if (thresholds2.w != null) {
    a = a || weeks2 <= 1 && ["w"] || weeks2 < thresholds2.w && ["ww", weeks2];
  }
  a = a || months2 <= 1 && ["M"] || months2 < thresholds2.M && ["MM", months2] || years2 <= 1 && ["y"] || ["yy", years2];
  a[2] = withoutSuffix;
  a[3] = +posNegDuration > 0;
  a[4] = locale2;
  return substituteTimeAgo.apply(null, a);
}
function getSetRelativeTimeRounding(roundingFunction) {
  if (roundingFunction === void 0) {
    return round;
  }
  if (typeof roundingFunction === "function") {
    round = roundingFunction;
    return true;
  }
  return false;
}
function getSetRelativeTimeThreshold(threshold, limit) {
  if (thresholds[threshold] === void 0) {
    return false;
  }
  if (limit === void 0) {
    return thresholds[threshold];
  }
  thresholds[threshold] = limit;
  if (threshold === "s") {
    thresholds.ss = limit - 1;
  }
  return true;
}
function humanize(argWithSuffix, argThresholds) {
  if (!this.isValid()) {
    return this.localeData().invalidDate();
  }
  var withSuffix = false, th = thresholds, locale2, output;
  if (typeof argWithSuffix === "object") {
    argThresholds = argWithSuffix;
    argWithSuffix = false;
  }
  if (typeof argWithSuffix === "boolean") {
    withSuffix = argWithSuffix;
  }
  if (typeof argThresholds === "object") {
    th = Object.assign({}, thresholds, argThresholds);
    if (argThresholds.s != null && argThresholds.ss == null) {
      th.ss = argThresholds.s - 1;
    }
  }
  locale2 = this.localeData();
  output = relativeTime$1(this, !withSuffix, th, locale2);
  if (withSuffix) {
    output = locale2.pastFuture(+this, output);
  }
  return locale2.postformat(output);
}
function sign(x) {
  return (x > 0) - (x < 0) || +x;
}
function toISOString$1() {
  if (!this.isValid()) {
    return this.localeData().invalidDate();
  }
  var seconds2 = abs$1(this._milliseconds) / 1e3, days2 = abs$1(this._days), months2 = abs$1(this._months), minutes2, hours2, years2, s, total = this.asSeconds(), totalSign, ymSign, daysSign, hmsSign;
  if (!total) {
    return "P0D";
  }
  minutes2 = absFloor(seconds2 / 60);
  hours2 = absFloor(minutes2 / 60);
  seconds2 %= 60;
  minutes2 %= 60;
  years2 = absFloor(months2 / 12);
  months2 %= 12;
  s = seconds2 ? seconds2.toFixed(3).replace(/\.?0+$/, "") : "";
  totalSign = total < 0 ? "-" : "";
  ymSign = sign(this._months) !== sign(total) ? "-" : "";
  daysSign = sign(this._days) !== sign(total) ? "-" : "";
  hmsSign = sign(this._milliseconds) !== sign(total) ? "-" : "";
  return totalSign + "P" + (years2 ? ymSign + years2 + "Y" : "") + (months2 ? ymSign + months2 + "M" : "") + (days2 ? daysSign + days2 + "D" : "") + (hours2 || minutes2 || seconds2 ? "T" : "") + (hours2 ? hmsSign + hours2 + "H" : "") + (minutes2 ? hmsSign + minutes2 + "M" : "") + (seconds2 ? hmsSign + s + "S" : "");
}
var hookCallback, some, momentProperties, updateInProgress, deprecations, keys, defaultCalendar, formattingTokens, localFormattingTokens, formatFunctions, formatTokenFunctions, defaultLongDateFormat, defaultInvalidDate, defaultOrdinal, defaultDayOfMonthOrdinalParse, defaultRelativeTime, aliases, priorities, match1, match2, match3, match4, match6, match1to2, match3to4, match5to6, match1to3, match1to4, match1to6, matchUnsigned, matchSigned, matchOffset, matchShortOffset, matchTimestamp, matchWord, match1to2NoLeadingZero, match1to2HasZero, regexes, tokens, YEAR, MONTH, DATE, HOUR, MINUTE, SECOND, MILLISECOND, WEEK, WEEKDAY, getSetYear, indexOf, defaultLocaleMonths, defaultLocaleMonthsShort, MONTHS_IN_FORMAT, defaultMonthsShortRegex, defaultMonthsRegex, defaultLocaleWeek, defaultLocaleWeekdays, defaultLocaleWeekdaysShort, defaultLocaleWeekdaysMin, defaultWeekdaysRegex, defaultWeekdaysShortRegex, defaultWeekdaysMinRegex, defaultLocaleMeridiemParse, getSetHour, baseConfig, locales, localeFamilies, globalLocale, extendedIsoRegex, basicIsoRegex, tzRegex, isoDates, isoTimes, aspNetJsonRegex, rfc2822, obsOffsets, prototypeMin, prototypeMax, now, ordering, chunkOffset, aspNetRegex, isoRegex, add, subtract, lang, MS_PER_SECOND, MS_PER_MINUTE, MS_PER_HOUR, MS_PER_400_YEARS, getSetDayOfMonth, getSetMinute, getSetSecond, token, getSetMillisecond, proto, proto$1, mathAbs, asMilliseconds, asSeconds, asMinutes, asHours, asDays, asWeeks, asMonths, asQuarters, asYears, valueOf$1, milliseconds, seconds, minutes, hours, days, months, years, round, thresholds, abs$1, proto$2, moment_default;
var init_moment = __esm({
  "node_modules/moment/dist/moment.js"() {
    if (Array.prototype.some) {
      some = Array.prototype.some;
    } else {
      some = function(fun) {
        var t = Object(this), len = t.length >>> 0, i;
        for (i = 0; i < len; i++) {
          if (i in t && fun.call(this, t[i], i, t)) {
            return true;
          }
        }
        return false;
      };
    }
    momentProperties = hooks.momentProperties = [];
    updateInProgress = false;
    deprecations = {};
    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;
    if (Object.keys) {
      keys = Object.keys;
    } else {
      keys = function(obj) {
        var i, res = [];
        for (i in obj) {
          if (hasOwnProp(obj, i)) {
            res.push(i);
          }
        }
        return res;
      };
    }
    defaultCalendar = {
      sameDay: "[Today at] LT",
      nextDay: "[Tomorrow at] LT",
      nextWeek: "dddd [at] LT",
      lastDay: "[Yesterday at] LT",
      lastWeek: "[Last] dddd [at] LT",
      sameElse: "L"
    };
    formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
    localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;
    formatFunctions = {};
    formatTokenFunctions = {};
    defaultLongDateFormat = {
      LTS: "h:mm:ss A",
      LT: "h:mm A",
      L: "MM/DD/YYYY",
      LL: "MMMM D, YYYY",
      LLL: "MMMM D, YYYY h:mm A",
      LLLL: "dddd, MMMM D, YYYY h:mm A"
    };
    defaultInvalidDate = "Invalid date";
    defaultOrdinal = "%d";
    defaultDayOfMonthOrdinalParse = /\d{1,2}/;
    defaultRelativeTime = {
      future: "in %s",
      past: "%s ago",
      s: "a few seconds",
      ss: "%d seconds",
      m: "a minute",
      mm: "%d minutes",
      h: "an hour",
      hh: "%d hours",
      d: "a day",
      dd: "%d days",
      w: "a week",
      ww: "%d weeks",
      M: "a month",
      MM: "%d months",
      y: "a year",
      yy: "%d years"
    };
    aliases = {
      D: "date",
      dates: "date",
      date: "date",
      d: "day",
      days: "day",
      day: "day",
      e: "weekday",
      weekdays: "weekday",
      weekday: "weekday",
      E: "isoWeekday",
      isoweekdays: "isoWeekday",
      isoweekday: "isoWeekday",
      DDD: "dayOfYear",
      dayofyears: "dayOfYear",
      dayofyear: "dayOfYear",
      h: "hour",
      hours: "hour",
      hour: "hour",
      ms: "millisecond",
      milliseconds: "millisecond",
      millisecond: "millisecond",
      m: "minute",
      minutes: "minute",
      minute: "minute",
      M: "month",
      months: "month",
      month: "month",
      Q: "quarter",
      quarters: "quarter",
      quarter: "quarter",
      s: "second",
      seconds: "second",
      second: "second",
      gg: "weekYear",
      weekyears: "weekYear",
      weekyear: "weekYear",
      GG: "isoWeekYear",
      isoweekyears: "isoWeekYear",
      isoweekyear: "isoWeekYear",
      w: "week",
      weeks: "week",
      week: "week",
      W: "isoWeek",
      isoweeks: "isoWeek",
      isoweek: "isoWeek",
      y: "year",
      years: "year",
      year: "year"
    };
    priorities = {
      date: 9,
      day: 11,
      weekday: 11,
      isoWeekday: 11,
      dayOfYear: 4,
      hour: 13,
      millisecond: 16,
      minute: 14,
      month: 8,
      quarter: 7,
      second: 15,
      weekYear: 1,
      isoWeekYear: 1,
      week: 5,
      isoWeek: 5,
      year: 1
    };
    match1 = /\d/;
    match2 = /\d\d/;
    match3 = /\d{3}/;
    match4 = /\d{4}/;
    match6 = /[+-]?\d{6}/;
    match1to2 = /\d\d?/;
    match3to4 = /\d\d\d\d?/;
    match5to6 = /\d\d\d\d\d\d?/;
    match1to3 = /\d{1,3}/;
    match1to4 = /\d{1,4}/;
    match1to6 = /[+-]?\d{1,6}/;
    matchUnsigned = /\d+/;
    matchSigned = /[+-]?\d+/;
    matchOffset = /Z|[+-]\d\d:?\d\d/gi;
    matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi;
    matchTimestamp = /[+-]?\d+(\.\d{1,3})?/;
    matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;
    match1to2NoLeadingZero = /^[1-9]\d?/;
    match1to2HasZero = /^([1-9]\d|\d)/;
    regexes = {};
    tokens = {};
    YEAR = 0;
    MONTH = 1;
    DATE = 2;
    HOUR = 3;
    MINUTE = 4;
    SECOND = 5;
    MILLISECOND = 6;
    WEEK = 7;
    WEEKDAY = 8;
    addFormatToken("Y", 0, 0, function() {
      var y = this.year();
      return y <= 9999 ? zeroFill(y, 4) : "+" + y;
    });
    addFormatToken(0, ["YY", 2], 0, function() {
      return this.year() % 100;
    });
    addFormatToken(0, ["YYYY", 4], 0, "year");
    addFormatToken(0, ["YYYYY", 5], 0, "year");
    addFormatToken(0, ["YYYYYY", 6, true], 0, "year");
    addRegexToken("Y", matchSigned);
    addRegexToken("YY", match1to2, match2);
    addRegexToken("YYYY", match1to4, match4);
    addRegexToken("YYYYY", match1to6, match6);
    addRegexToken("YYYYYY", match1to6, match6);
    addParseToken(["YYYYY", "YYYYYY"], YEAR);
    addParseToken("YYYY", function(input, array) {
      array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken("YY", function(input, array) {
      array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken("Y", function(input, array) {
      array[YEAR] = parseInt(input, 10);
    });
    hooks.parseTwoDigitYear = function(input) {
      return toInt(input) + (toInt(input) > 68 ? 1900 : 2e3);
    };
    getSetYear = makeGetSet("FullYear", true);
    if (Array.prototype.indexOf) {
      indexOf = Array.prototype.indexOf;
    } else {
      indexOf = function(o) {
        var i;
        for (i = 0; i < this.length; ++i) {
          if (this[i] === o) {
            return i;
          }
        }
        return -1;
      };
    }
    addFormatToken("M", ["MM", 2], "Mo", function() {
      return this.month() + 1;
    });
    addFormatToken("MMM", 0, 0, function(format2) {
      return this.localeData().monthsShort(this, format2);
    });
    addFormatToken("MMMM", 0, 0, function(format2) {
      return this.localeData().months(this, format2);
    });
    addRegexToken("M", match1to2, match1to2NoLeadingZero);
    addRegexToken("MM", match1to2, match2);
    addRegexToken("MMM", function(isStrict, locale2) {
      return locale2.monthsShortRegex(isStrict);
    });
    addRegexToken("MMMM", function(isStrict, locale2) {
      return locale2.monthsRegex(isStrict);
    });
    addParseToken(["M", "MM"], function(input, array) {
      array[MONTH] = toInt(input) - 1;
    });
    addParseToken(["MMM", "MMMM"], function(input, array, config, token2) {
      var month = config._locale.monthsParse(input, token2, config._strict);
      if (month != null) {
        array[MONTH] = month;
      } else {
        getParsingFlags(config).invalidMonth = input;
      }
    });
    defaultLocaleMonths = "January_February_March_April_May_June_July_August_September_October_November_December".split(
      "_"
    );
    defaultLocaleMonthsShort = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_");
    MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
    defaultMonthsShortRegex = matchWord;
    defaultMonthsRegex = matchWord;
    addFormatToken("w", ["ww", 2], "wo", "week");
    addFormatToken("W", ["WW", 2], "Wo", "isoWeek");
    addRegexToken("w", match1to2, match1to2NoLeadingZero);
    addRegexToken("ww", match1to2, match2);
    addRegexToken("W", match1to2, match1to2NoLeadingZero);
    addRegexToken("WW", match1to2, match2);
    addWeekParseToken(
      ["w", "ww", "W", "WW"],
      function(input, week, config, token2) {
        week[token2.substr(0, 1)] = toInt(input);
      }
    );
    defaultLocaleWeek = {
      dow: 0,
      // Sunday is the first day of the week.
      doy: 6
      // The week that contains Jan 6th is the first week of the year.
    };
    addFormatToken("d", 0, "do", "day");
    addFormatToken("dd", 0, 0, function(format2) {
      return this.localeData().weekdaysMin(this, format2);
    });
    addFormatToken("ddd", 0, 0, function(format2) {
      return this.localeData().weekdaysShort(this, format2);
    });
    addFormatToken("dddd", 0, 0, function(format2) {
      return this.localeData().weekdays(this, format2);
    });
    addFormatToken("e", 0, 0, "weekday");
    addFormatToken("E", 0, 0, "isoWeekday");
    addRegexToken("d", match1to2);
    addRegexToken("e", match1to2);
    addRegexToken("E", match1to2);
    addRegexToken("dd", function(isStrict, locale2) {
      return locale2.weekdaysMinRegex(isStrict);
    });
    addRegexToken("ddd", function(isStrict, locale2) {
      return locale2.weekdaysShortRegex(isStrict);
    });
    addRegexToken("dddd", function(isStrict, locale2) {
      return locale2.weekdaysRegex(isStrict);
    });
    addWeekParseToken(["dd", "ddd", "dddd"], function(input, week, config, token2) {
      var weekday = config._locale.weekdaysParse(input, token2, config._strict);
      if (weekday != null) {
        week.d = weekday;
      } else {
        getParsingFlags(config).invalidWeekday = input;
      }
    });
    addWeekParseToken(["d", "e", "E"], function(input, week, config, token2) {
      week[token2] = toInt(input);
    });
    defaultLocaleWeekdays = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_");
    defaultLocaleWeekdaysShort = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_");
    defaultLocaleWeekdaysMin = "Su_Mo_Tu_We_Th_Fr_Sa".split("_");
    defaultWeekdaysRegex = matchWord;
    defaultWeekdaysShortRegex = matchWord;
    defaultWeekdaysMinRegex = matchWord;
    addFormatToken("H", ["HH", 2], 0, "hour");
    addFormatToken("h", ["hh", 2], 0, hFormat);
    addFormatToken("k", ["kk", 2], 0, kFormat);
    addFormatToken("hmm", 0, 0, function() {
      return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });
    addFormatToken("hmmss", 0, 0, function() {
      return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });
    addFormatToken("Hmm", 0, 0, function() {
      return "" + this.hours() + zeroFill(this.minutes(), 2);
    });
    addFormatToken("Hmmss", 0, 0, function() {
      return "" + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });
    meridiem("a", true);
    meridiem("A", false);
    addRegexToken("a", matchMeridiem);
    addRegexToken("A", matchMeridiem);
    addRegexToken("H", match1to2, match1to2HasZero);
    addRegexToken("h", match1to2, match1to2NoLeadingZero);
    addRegexToken("k", match1to2, match1to2NoLeadingZero);
    addRegexToken("HH", match1to2, match2);
    addRegexToken("hh", match1to2, match2);
    addRegexToken("kk", match1to2, match2);
    addRegexToken("hmm", match3to4);
    addRegexToken("hmmss", match5to6);
    addRegexToken("Hmm", match3to4);
    addRegexToken("Hmmss", match5to6);
    addParseToken(["H", "HH"], HOUR);
    addParseToken(["k", "kk"], function(input, array, config) {
      var kInput = toInt(input);
      array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(["a", "A"], function(input, array, config) {
      config._isPm = config._locale.isPM(input);
      config._meridiem = input;
    });
    addParseToken(["h", "hh"], function(input, array, config) {
      array[HOUR] = toInt(input);
      getParsingFlags(config).bigHour = true;
    });
    addParseToken("hmm", function(input, array, config) {
      var pos = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos));
      array[MINUTE] = toInt(input.substr(pos));
      getParsingFlags(config).bigHour = true;
    });
    addParseToken("hmmss", function(input, array, config) {
      var pos1 = input.length - 4, pos2 = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos1));
      array[MINUTE] = toInt(input.substr(pos1, 2));
      array[SECOND] = toInt(input.substr(pos2));
      getParsingFlags(config).bigHour = true;
    });
    addParseToken("Hmm", function(input, array, config) {
      var pos = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos));
      array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken("Hmmss", function(input, array, config) {
      var pos1 = input.length - 4, pos2 = input.length - 2;
      array[HOUR] = toInt(input.substr(0, pos1));
      array[MINUTE] = toInt(input.substr(pos1, 2));
      array[SECOND] = toInt(input.substr(pos2));
    });
    defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    getSetHour = makeGetSet("Hours", true);
    baseConfig = {
      calendar: defaultCalendar,
      longDateFormat: defaultLongDateFormat,
      invalidDate: defaultInvalidDate,
      ordinal: defaultOrdinal,
      dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
      relativeTime: defaultRelativeTime,
      months: defaultLocaleMonths,
      monthsShort: defaultLocaleMonthsShort,
      week: defaultLocaleWeek,
      weekdays: defaultLocaleWeekdays,
      weekdaysMin: defaultLocaleWeekdaysMin,
      weekdaysShort: defaultLocaleWeekdaysShort,
      meridiemParse: defaultLocaleMeridiemParse
    };
    locales = {};
    localeFamilies = {};
    extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
    basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
    tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;
    isoDates = [
      ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
      ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
      ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
      ["GGGG-[W]WW", /\d{4}-W\d\d/, false],
      ["YYYY-DDD", /\d{4}-\d{3}/],
      ["YYYY-MM", /\d{4}-\d\d/, false],
      ["YYYYYYMMDD", /[+-]\d{10}/],
      ["YYYYMMDD", /\d{8}/],
      ["GGGG[W]WWE", /\d{4}W\d{3}/],
      ["GGGG[W]WW", /\d{4}W\d{2}/, false],
      ["YYYYDDD", /\d{7}/],
      ["YYYYMM", /\d{6}/, false],
      ["YYYY", /\d{4}/, false]
    ];
    isoTimes = [
      ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
      ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
      ["HH:mm:ss", /\d\d:\d\d:\d\d/],
      ["HH:mm", /\d\d:\d\d/],
      ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
      ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
      ["HHmmss", /\d\d\d\d\d\d/],
      ["HHmm", /\d\d\d\d/],
      ["HH", /\d\d/]
    ];
    aspNetJsonRegex = /^\/?Date\((-?\d+)/i;
    rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;
    obsOffsets = {
      UT: 0,
      GMT: 0,
      EDT: -4 * 60,
      EST: -5 * 60,
      CDT: -5 * 60,
      CST: -6 * 60,
      MDT: -6 * 60,
      MST: -7 * 60,
      PDT: -7 * 60,
      PST: -8 * 60
    };
    hooks.createFromInputFallback = deprecate(
      "value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",
      function(config) {
        config._d = /* @__PURE__ */ new Date(config._i + (config._useUTC ? " UTC" : ""));
      }
    );
    hooks.ISO_8601 = function() {
    };
    hooks.RFC_2822 = function() {
    };
    prototypeMin = deprecate(
      "moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",
      function() {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
          return other < this ? this : other;
        } else {
          return createInvalid();
        }
      }
    );
    prototypeMax = deprecate(
      "moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",
      function() {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
          return other > this ? this : other;
        } else {
          return createInvalid();
        }
      }
    );
    now = function() {
      return Date.now ? Date.now() : +/* @__PURE__ */ new Date();
    };
    ordering = [
      "year",
      "quarter",
      "month",
      "week",
      "day",
      "hour",
      "minute",
      "second",
      "millisecond"
    ];
    offset("Z", ":");
    offset("ZZ", "");
    addRegexToken("Z", matchShortOffset);
    addRegexToken("ZZ", matchShortOffset);
    addParseToken(["Z", "ZZ"], function(input, array, config) {
      config._useUTC = true;
      config._tzm = offsetFromString(matchShortOffset, input);
    });
    chunkOffset = /([\+\-]|\d\d)/gi;
    hooks.updateOffset = function() {
    };
    aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/;
    isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;
    add = createAdder(1, "add");
    subtract = createAdder(-1, "subtract");
    hooks.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
    hooks.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
    lang = deprecate(
      "moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",
      function(key) {
        if (key === void 0) {
          return this.localeData();
        } else {
          return this.locale(key);
        }
      }
    );
    MS_PER_SECOND = 1e3;
    MS_PER_MINUTE = 60 * MS_PER_SECOND;
    MS_PER_HOUR = 60 * MS_PER_MINUTE;
    MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
    addFormatToken("N", 0, 0, "eraAbbr");
    addFormatToken("NN", 0, 0, "eraAbbr");
    addFormatToken("NNN", 0, 0, "eraAbbr");
    addFormatToken("NNNN", 0, 0, "eraName");
    addFormatToken("NNNNN", 0, 0, "eraNarrow");
    addFormatToken("y", ["y", 1], "yo", "eraYear");
    addFormatToken("y", ["yy", 2], 0, "eraYear");
    addFormatToken("y", ["yyy", 3], 0, "eraYear");
    addFormatToken("y", ["yyyy", 4], 0, "eraYear");
    addRegexToken("N", matchEraAbbr);
    addRegexToken("NN", matchEraAbbr);
    addRegexToken("NNN", matchEraAbbr);
    addRegexToken("NNNN", matchEraName);
    addRegexToken("NNNNN", matchEraNarrow);
    addParseToken(
      ["N", "NN", "NNN", "NNNN", "NNNNN"],
      function(input, array, config, token2) {
        var era = config._locale.erasParse(input, token2, config._strict);
        if (era) {
          getParsingFlags(config).era = era;
        } else {
          getParsingFlags(config).invalidEra = input;
        }
      }
    );
    addRegexToken("y", matchUnsigned);
    addRegexToken("yy", matchUnsigned);
    addRegexToken("yyy", matchUnsigned);
    addRegexToken("yyyy", matchUnsigned);
    addRegexToken("yo", matchEraYearOrdinal);
    addParseToken(["y", "yy", "yyy", "yyyy"], YEAR);
    addParseToken(["yo"], function(input, array, config, token2) {
      var match;
      if (config._locale._eraYearOrdinalRegex) {
        match = input.match(config._locale._eraYearOrdinalRegex);
      }
      if (config._locale.eraYearOrdinalParse) {
        array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
      } else {
        array[YEAR] = parseInt(input, 10);
      }
    });
    addFormatToken(0, ["gg", 2], 0, function() {
      return this.weekYear() % 100;
    });
    addFormatToken(0, ["GG", 2], 0, function() {
      return this.isoWeekYear() % 100;
    });
    addWeekYearFormatToken("gggg", "weekYear");
    addWeekYearFormatToken("ggggg", "weekYear");
    addWeekYearFormatToken("GGGG", "isoWeekYear");
    addWeekYearFormatToken("GGGGG", "isoWeekYear");
    addRegexToken("G", matchSigned);
    addRegexToken("g", matchSigned);
    addRegexToken("GG", match1to2, match2);
    addRegexToken("gg", match1to2, match2);
    addRegexToken("GGGG", match1to4, match4);
    addRegexToken("gggg", match1to4, match4);
    addRegexToken("GGGGG", match1to6, match6);
    addRegexToken("ggggg", match1to6, match6);
    addWeekParseToken(
      ["gggg", "ggggg", "GGGG", "GGGGG"],
      function(input, week, config, token2) {
        week[token2.substr(0, 2)] = toInt(input);
      }
    );
    addWeekParseToken(["gg", "GG"], function(input, week, config, token2) {
      week[token2] = hooks.parseTwoDigitYear(input);
    });
    addFormatToken("Q", 0, "Qo", "quarter");
    addRegexToken("Q", match1);
    addParseToken("Q", function(input, array) {
      array[MONTH] = (toInt(input) - 1) * 3;
    });
    addFormatToken("D", ["DD", 2], "Do", "date");
    addRegexToken("D", match1to2, match1to2NoLeadingZero);
    addRegexToken("DD", match1to2, match2);
    addRegexToken("Do", function(isStrict, locale2) {
      return isStrict ? locale2._dayOfMonthOrdinalParse || locale2._ordinalParse : locale2._dayOfMonthOrdinalParseLenient;
    });
    addParseToken(["D", "DD"], DATE);
    addParseToken("Do", function(input, array) {
      array[DATE] = toInt(input.match(match1to2)[0]);
    });
    getSetDayOfMonth = makeGetSet("Date", true);
    addFormatToken("DDD", ["DDDD", 3], "DDDo", "dayOfYear");
    addRegexToken("DDD", match1to3);
    addRegexToken("DDDD", match3);
    addParseToken(["DDD", "DDDD"], function(input, array, config) {
      config._dayOfYear = toInt(input);
    });
    addFormatToken("m", ["mm", 2], 0, "minute");
    addRegexToken("m", match1to2, match1to2HasZero);
    addRegexToken("mm", match1to2, match2);
    addParseToken(["m", "mm"], MINUTE);
    getSetMinute = makeGetSet("Minutes", false);
    addFormatToken("s", ["ss", 2], 0, "second");
    addRegexToken("s", match1to2, match1to2HasZero);
    addRegexToken("ss", match1to2, match2);
    addParseToken(["s", "ss"], SECOND);
    getSetSecond = makeGetSet("Seconds", false);
    addFormatToken("S", 0, 0, function() {
      return ~~(this.millisecond() / 100);
    });
    addFormatToken(0, ["SS", 2], 0, function() {
      return ~~(this.millisecond() / 10);
    });
    addFormatToken(0, ["SSS", 3], 0, "millisecond");
    addFormatToken(0, ["SSSS", 4], 0, function() {
      return this.millisecond() * 10;
    });
    addFormatToken(0, ["SSSSS", 5], 0, function() {
      return this.millisecond() * 100;
    });
    addFormatToken(0, ["SSSSSS", 6], 0, function() {
      return this.millisecond() * 1e3;
    });
    addFormatToken(0, ["SSSSSSS", 7], 0, function() {
      return this.millisecond() * 1e4;
    });
    addFormatToken(0, ["SSSSSSSS", 8], 0, function() {
      return this.millisecond() * 1e5;
    });
    addFormatToken(0, ["SSSSSSSSS", 9], 0, function() {
      return this.millisecond() * 1e6;
    });
    addRegexToken("S", match1to3, match1);
    addRegexToken("SS", match1to3, match2);
    addRegexToken("SSS", match1to3, match3);
    for (token = "SSSS"; token.length <= 9; token += "S") {
      addRegexToken(token, matchUnsigned);
    }
    for (token = "S"; token.length <= 9; token += "S") {
      addParseToken(token, parseMs);
    }
    getSetMillisecond = makeGetSet("Milliseconds", false);
    addFormatToken("z", 0, 0, "zoneAbbr");
    addFormatToken("zz", 0, 0, "zoneName");
    proto = Moment.prototype;
    proto.add = add;
    proto.calendar = calendar$1;
    proto.clone = clone;
    proto.diff = diff;
    proto.endOf = endOf;
    proto.format = format;
    proto.from = from;
    proto.fromNow = fromNow;
    proto.to = to;
    proto.toNow = toNow;
    proto.get = stringGet;
    proto.invalidAt = invalidAt;
    proto.isAfter = isAfter;
    proto.isBefore = isBefore;
    proto.isBetween = isBetween;
    proto.isSame = isSame;
    proto.isSameOrAfter = isSameOrAfter;
    proto.isSameOrBefore = isSameOrBefore;
    proto.isValid = isValid$2;
    proto.lang = lang;
    proto.locale = locale;
    proto.localeData = localeData;
    proto.max = prototypeMax;
    proto.min = prototypeMin;
    proto.parsingFlags = parsingFlags;
    proto.set = stringSet;
    proto.startOf = startOf;
    proto.subtract = subtract;
    proto.toArray = toArray;
    proto.toObject = toObject;
    proto.toDate = toDate;
    proto.toISOString = toISOString;
    proto.inspect = inspect;
    if (typeof Symbol !== "undefined" && Symbol.for != null) {
      proto[Symbol.for("nodejs.util.inspect.custom")] = function() {
        return "Moment<" + this.format() + ">";
      };
    }
    proto.toJSON = toJSON;
    proto.toString = toString;
    proto.unix = unix;
    proto.valueOf = valueOf;
    proto.creationData = creationData;
    proto.eraName = getEraName;
    proto.eraNarrow = getEraNarrow;
    proto.eraAbbr = getEraAbbr;
    proto.eraYear = getEraYear;
    proto.year = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week = proto.weeks = getSetWeek;
    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
    proto.weeksInYear = getWeeksInYear;
    proto.weeksInWeekYear = getWeeksInWeekYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
    proto.date = getSetDayOfMonth;
    proto.day = proto.days = getSetDayOfWeek;
    proto.weekday = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset = getSetOffset;
    proto.utc = setOffsetToUTC;
    proto.local = setOffsetToLocal;
    proto.parseZone = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST = isDaylightSavingTime;
    proto.isLocal = isLocal;
    proto.isUtcOffset = isUtcOffset;
    proto.isUtc = isUtc;
    proto.isUTC = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates = deprecate(
      "dates accessor is deprecated. Use date instead.",
      getSetDayOfMonth
    );
    proto.months = deprecate(
      "months accessor is deprecated. Use month instead",
      getSetMonth
    );
    proto.years = deprecate(
      "years accessor is deprecated. Use year instead",
      getSetYear
    );
    proto.zone = deprecate(
      "moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",
      getSetZone
    );
    proto.isDSTShifted = deprecate(
      "isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",
      isDaylightSavingTimeShifted
    );
    proto$1 = Locale.prototype;
    proto$1.calendar = calendar;
    proto$1.longDateFormat = longDateFormat;
    proto$1.invalidDate = invalidDate;
    proto$1.ordinal = ordinal;
    proto$1.preparse = preParsePostFormat;
    proto$1.postformat = preParsePostFormat;
    proto$1.relativeTime = relativeTime;
    proto$1.pastFuture = pastFuture;
    proto$1.set = set;
    proto$1.eras = localeEras;
    proto$1.erasParse = localeErasParse;
    proto$1.erasConvertYear = localeErasConvertYear;
    proto$1.erasAbbrRegex = erasAbbrRegex;
    proto$1.erasNameRegex = erasNameRegex;
    proto$1.erasNarrowRegex = erasNarrowRegex;
    proto$1.months = localeMonths;
    proto$1.monthsShort = localeMonthsShort;
    proto$1.monthsParse = localeMonthsParse;
    proto$1.monthsRegex = monthsRegex;
    proto$1.monthsShortRegex = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;
    proto$1.weekdays = localeWeekdays;
    proto$1.weekdaysMin = localeWeekdaysMin;
    proto$1.weekdaysShort = localeWeekdaysShort;
    proto$1.weekdaysParse = localeWeekdaysParse;
    proto$1.weekdaysRegex = weekdaysRegex;
    proto$1.weekdaysShortRegex = weekdaysShortRegex;
    proto$1.weekdaysMinRegex = weekdaysMinRegex;
    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;
    getSetGlobalLocale("en", {
      eras: [
        {
          since: "0001-01-01",
          until: Infinity,
          offset: 1,
          name: "Anno Domini",
          narrow: "AD",
          abbr: "AD"
        },
        {
          since: "0000-12-31",
          until: -Infinity,
          offset: 1,
          name: "Before Christ",
          narrow: "BC",
          abbr: "BC"
        }
      ],
      dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
      ordinal: function(number) {
        var b = number % 10, output = toInt(number % 100 / 10) === 1 ? "th" : b === 1 ? "st" : b === 2 ? "nd" : b === 3 ? "rd" : "th";
        return number + output;
      }
    });
    hooks.lang = deprecate(
      "moment.lang is deprecated. Use moment.locale instead.",
      getSetGlobalLocale
    );
    hooks.langData = deprecate(
      "moment.langData is deprecated. Use moment.localeData instead.",
      getLocale
    );
    mathAbs = Math.abs;
    asMilliseconds = makeAs("ms");
    asSeconds = makeAs("s");
    asMinutes = makeAs("m");
    asHours = makeAs("h");
    asDays = makeAs("d");
    asWeeks = makeAs("w");
    asMonths = makeAs("M");
    asQuarters = makeAs("Q");
    asYears = makeAs("y");
    valueOf$1 = asMilliseconds;
    milliseconds = makeGetter("milliseconds");
    seconds = makeGetter("seconds");
    minutes = makeGetter("minutes");
    hours = makeGetter("hours");
    days = makeGetter("days");
    months = makeGetter("months");
    years = makeGetter("years");
    round = Math.round;
    thresholds = {
      ss: 44,
      // a few seconds to seconds
      s: 45,
      // seconds to minute
      m: 45,
      // minutes to hour
      h: 22,
      // hours to day
      d: 26,
      // days to month/week
      w: null,
      // weeks to month
      M: 11
      // months to year
    };
    abs$1 = Math.abs;
    proto$2 = Duration.prototype;
    proto$2.isValid = isValid$1;
    proto$2.abs = abs;
    proto$2.add = add$1;
    proto$2.subtract = subtract$1;
    proto$2.as = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds = asSeconds;
    proto$2.asMinutes = asMinutes;
    proto$2.asHours = asHours;
    proto$2.asDays = asDays;
    proto$2.asWeeks = asWeeks;
    proto$2.asMonths = asMonths;
    proto$2.asQuarters = asQuarters;
    proto$2.asYears = asYears;
    proto$2.valueOf = valueOf$1;
    proto$2._bubble = bubble;
    proto$2.clone = clone$1;
    proto$2.get = get$2;
    proto$2.milliseconds = milliseconds;
    proto$2.seconds = seconds;
    proto$2.minutes = minutes;
    proto$2.hours = hours;
    proto$2.days = days;
    proto$2.weeks = weeks;
    proto$2.months = months;
    proto$2.years = years;
    proto$2.humanize = humanize;
    proto$2.toISOString = toISOString$1;
    proto$2.toString = toISOString$1;
    proto$2.toJSON = toISOString$1;
    proto$2.locale = locale;
    proto$2.localeData = localeData;
    proto$2.toIsoString = deprecate(
      "toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",
      toISOString$1
    );
    proto$2.lang = lang;
    addFormatToken("X", 0, 0, "unix");
    addFormatToken("x", 0, 0, "valueOf");
    addRegexToken("x", matchSigned);
    addRegexToken("X", matchTimestamp);
    addParseToken("X", function(input, array, config) {
      config._d = new Date(parseFloat(input) * 1e3);
    });
    addParseToken("x", function(input, array, config) {
      config._d = new Date(toInt(input));
    });
    hooks.version = "2.30.1";
    setHookCallback(createLocal);
    hooks.fn = proto;
    hooks.min = min;
    hooks.max = max;
    hooks.now = now;
    hooks.utc = createUTC;
    hooks.unix = createUnix;
    hooks.months = listMonths;
    hooks.isDate = isDate;
    hooks.locale = getSetGlobalLocale;
    hooks.invalid = createInvalid;
    hooks.duration = createDuration;
    hooks.isMoment = isMoment;
    hooks.weekdays = listWeekdays;
    hooks.parseZone = createInZone;
    hooks.localeData = getLocale;
    hooks.isDuration = isDuration;
    hooks.monthsShort = listMonthsShort;
    hooks.weekdaysMin = listWeekdaysMin;
    hooks.defineLocale = defineLocale;
    hooks.updateLocale = updateLocale;
    hooks.locales = listLocales;
    hooks.weekdaysShort = listWeekdaysShort;
    hooks.normalizeUnits = normalizeUnits;
    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat = getCalendarFormat;
    hooks.prototype = proto;
    hooks.HTML5_FMT = {
      DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
      // <input type="datetime-local" />
      DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
      // <input type="datetime-local" step="1" />
      DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
      // <input type="datetime-local" step="0.001" />
      DATE: "YYYY-MM-DD",
      // <input type="date" />
      TIME: "HH:mm",
      // <input type="time" />
      TIME_SECONDS: "HH:mm:ss",
      // <input type="time" step="1" />
      TIME_MS: "HH:mm:ss.SSS",
      // <input type="time" step="0.001" />
      WEEK: "GGGG-[W]WW",
      // <input type="week" />
      MONTH: "YYYY-MM"
      // <input type="month" />
    };
    moment_default = hooks;
  }
});

// node_modules/vue3-persian-datetime-picker/dist/vue3-persian-datetime-picker.common.js
var require_vue3_persian_datetime_picker_common = __commonJS({
  "node_modules/vue3-persian-datetime-picker/dist/vue3-persian-datetime-picker.common.js"(exports, module2) {
    module2.exports = /******/
    function(modules) {
      var installedModules = {};
      function __webpack_require__(moduleId) {
        if (installedModules[moduleId]) {
          return installedModules[moduleId].exports;
        }
        var module3 = installedModules[moduleId] = {
          /******/
          i: moduleId,
          /******/
          l: false,
          /******/
          exports: {}
          /******/
        };
        modules[moduleId].call(module3.exports, module3, module3.exports, __webpack_require__);
        module3.l = true;
        return module3.exports;
      }
      __webpack_require__.m = modules;
      __webpack_require__.c = installedModules;
      __webpack_require__.d = function(exports2, name, getter) {
        if (!__webpack_require__.o(exports2, name)) {
          Object.defineProperty(exports2, name, { enumerable: true, get: getter });
        }
      };
      __webpack_require__.r = function(exports2) {
        if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
          Object.defineProperty(exports2, Symbol.toStringTag, { value: "Module" });
        }
        Object.defineProperty(exports2, "__esModule", { value: true });
      };
      __webpack_require__.t = function(value, mode) {
        if (mode & 1) value = __webpack_require__(value);
        if (mode & 8) return value;
        if (mode & 4 && typeof value === "object" && value && value.__esModule) return value;
        var ns = /* @__PURE__ */ Object.create(null);
        __webpack_require__.r(ns);
        Object.defineProperty(ns, "default", { enumerable: true, value });
        if (mode & 2 && typeof value != "string") for (var key in value) __webpack_require__.d(ns, key, (function(key2) {
          return value[key2];
        }).bind(null, key));
        return ns;
      };
      __webpack_require__.n = function(module3) {
        var getter = module3 && module3.__esModule ? (
          /******/
          function getDefault() {
            return module3["default"];
          }
        ) : (
          /******/
          function getModuleExports() {
            return module3;
          }
        );
        __webpack_require__.d(getter, "a", getter);
        return getter;
      };
      __webpack_require__.o = function(object, property) {
        return Object.prototype.hasOwnProperty.call(object, property);
      };
      __webpack_require__.p = "";
      return __webpack_require__(__webpack_require__.s = "fb15");
    }({
      /***/
      "24fb": (
        /***/
        function(module3, exports2, __webpack_require__) {
          "use strict";
          module3.exports = function(useSourceMap) {
            var list = [];
            list.toString = function toString2() {
              return this.map(function(item) {
                var content = cssWithMappingToString(item, useSourceMap);
                if (item[2]) {
                  return "@media ".concat(item[2], " {").concat(content, "}");
                }
                return content;
              }).join("");
            };
            list.i = function(modules, mediaQuery, dedupe) {
              if (typeof modules === "string") {
                modules = [[null, modules, ""]];
              }
              var alreadyImportedModules = {};
              if (dedupe) {
                for (var i = 0; i < this.length; i++) {
                  var id = this[i][0];
                  if (id != null) {
                    alreadyImportedModules[id] = true;
                  }
                }
              }
              for (var _i = 0; _i < modules.length; _i++) {
                var item = [].concat(modules[_i]);
                if (dedupe && alreadyImportedModules[item[0]]) {
                  continue;
                }
                if (mediaQuery) {
                  if (!item[2]) {
                    item[2] = mediaQuery;
                  } else {
                    item[2] = "".concat(mediaQuery, " and ").concat(item[2]);
                  }
                }
                list.push(item);
              }
            };
            return list;
          };
          function cssWithMappingToString(item, useSourceMap) {
            var content = item[1] || "";
            var cssMapping = item[3];
            if (!cssMapping) {
              return content;
            }
            if (useSourceMap && typeof btoa === "function") {
              var sourceMapping = toComment(cssMapping);
              var sourceURLs = cssMapping.sources.map(function(source) {
                return "/*# sourceURL=".concat(cssMapping.sourceRoot || "").concat(source, " */");
              });
              return [content].concat(sourceURLs).concat([sourceMapping]).join("\n");
            }
            return [content].join("\n");
          }
          function toComment(sourceMap) {
            var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
            var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
            return "/*# ".concat(data, " */");
          }
        }
      ),
      /***/
      "4635": (
        /***/
        function(module3, exports2, __webpack_require__) {
          var content = __webpack_require__("93e7");
          if (content.__esModule) content = content.default;
          if (typeof content === "string") content = [[module3.i, content, ""]];
          if (content.locals) module3.exports = content.locals;
          var add2 = __webpack_require__("499e").default;
          var update = add2("40b7c789", content, true, { "sourceMap": false, "shadowMode": false });
        }
      ),
      /***/
      "499e": (
        /***/
        function(module3, __webpack_exports__, __webpack_require__) {
          "use strict";
          __webpack_require__.r(__webpack_exports__);
          __webpack_require__.d(__webpack_exports__, "default", function() {
            return (
              /* binding */
              addStylesClient
            );
          });
          function listToStyles(parentId, list) {
            var styles = [];
            var newStyles = {};
            for (var i = 0; i < list.length; i++) {
              var item = list[i];
              var id = item[0];
              var css = item[1];
              var media = item[2];
              var sourceMap = item[3];
              var part = {
                id: parentId + ":" + i,
                css,
                media,
                sourceMap
              };
              if (!newStyles[id]) {
                styles.push(newStyles[id] = { id, parts: [part] });
              } else {
                newStyles[id].parts.push(part);
              }
            }
            return styles;
          }
          var hasDocument = typeof document !== "undefined";
          if (typeof DEBUG !== "undefined" && DEBUG) {
            if (!hasDocument) {
              throw new Error(
                "vue-style-loader cannot be used in a non-browser environment. Use { target: 'node' } in your Webpack config to indicate a server-rendering environment."
              );
            }
          }
          var stylesInDom = {
            /*
              [id: number]: {
                id: number,
                refs: number,
                parts: Array<(obj?: StyleObjectPart) => void>
              }
            */
          };
          var head = hasDocument && (document.head || document.getElementsByTagName("head")[0]);
          var singletonElement = null;
          var singletonCounter = 0;
          var isProduction = false;
          var noop = function() {
          };
          var options = null;
          var ssrIdKey = "data-vue-ssr-id";
          var isOldIE = typeof navigator !== "undefined" && /msie [6-9]\b/.test(navigator.userAgent.toLowerCase());
          function addStylesClient(parentId, list, _isProduction, _options) {
            isProduction = _isProduction;
            options = _options || {};
            var styles = listToStyles(parentId, list);
            addStylesToDom(styles);
            return function update(newList) {
              var mayRemove = [];
              for (var i = 0; i < styles.length; i++) {
                var item = styles[i];
                var domStyle = stylesInDom[item.id];
                domStyle.refs--;
                mayRemove.push(domStyle);
              }
              if (newList) {
                styles = listToStyles(parentId, newList);
                addStylesToDom(styles);
              } else {
                styles = [];
              }
              for (var i = 0; i < mayRemove.length; i++) {
                var domStyle = mayRemove[i];
                if (domStyle.refs === 0) {
                  for (var j = 0; j < domStyle.parts.length; j++) {
                    domStyle.parts[j]();
                  }
                  delete stylesInDom[domStyle.id];
                }
              }
            };
          }
          function addStylesToDom(styles) {
            for (var i = 0; i < styles.length; i++) {
              var item = styles[i];
              var domStyle = stylesInDom[item.id];
              if (domStyle) {
                domStyle.refs++;
                for (var j = 0; j < domStyle.parts.length; j++) {
                  domStyle.parts[j](item.parts[j]);
                }
                for (; j < item.parts.length; j++) {
                  domStyle.parts.push(addStyle(item.parts[j]));
                }
                if (domStyle.parts.length > item.parts.length) {
                  domStyle.parts.length = item.parts.length;
                }
              } else {
                var parts = [];
                for (var j = 0; j < item.parts.length; j++) {
                  parts.push(addStyle(item.parts[j]));
                }
                stylesInDom[item.id] = { id: item.id, refs: 1, parts };
              }
            }
          }
          function createStyleElement() {
            var styleElement = document.createElement("style");
            styleElement.type = "text/css";
            head.appendChild(styleElement);
            return styleElement;
          }
          function addStyle(obj) {
            var update, remove;
            var styleElement = document.querySelector("style[" + ssrIdKey + '~="' + obj.id + '"]');
            if (styleElement) {
              if (isProduction) {
                return noop;
              } else {
                styleElement.parentNode.removeChild(styleElement);
              }
            }
            if (isOldIE) {
              var styleIndex = singletonCounter++;
              styleElement = singletonElement || (singletonElement = createStyleElement());
              update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
              remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
            } else {
              styleElement = createStyleElement();
              update = applyToTag.bind(null, styleElement);
              remove = function() {
                styleElement.parentNode.removeChild(styleElement);
              };
            }
            update(obj);
            return function updateStyle(newObj) {
              if (newObj) {
                if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {
                  return;
                }
                update(obj = newObj);
              } else {
                remove();
              }
            };
          }
          var replaceText = /* @__PURE__ */ function() {
            var textStore = [];
            return function(index, replacement) {
              textStore[index] = replacement;
              return textStore.filter(Boolean).join("\n");
            };
          }();
          function applyToSingletonTag(styleElement, index, remove, obj) {
            var css = remove ? "" : obj.css;
            if (styleElement.styleSheet) {
              styleElement.styleSheet.cssText = replaceText(index, css);
            } else {
              var cssNode = document.createTextNode(css);
              var childNodes = styleElement.childNodes;
              if (childNodes[index]) styleElement.removeChild(childNodes[index]);
              if (childNodes.length) {
                styleElement.insertBefore(cssNode, childNodes[index]);
              } else {
                styleElement.appendChild(cssNode);
              }
            }
          }
          function applyToTag(styleElement, obj) {
            var css = obj.css;
            var media = obj.media;
            var sourceMap = obj.sourceMap;
            if (media) {
              styleElement.setAttribute("media", media);
            }
            if (options.ssrId) {
              styleElement.setAttribute(ssrIdKey, obj.id);
            }
            if (sourceMap) {
              css += "\n/*# sourceURL=" + sourceMap.sources[0] + " */";
              css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
            }
            if (styleElement.styleSheet) {
              styleElement.styleSheet.cssText = css;
            } else {
              while (styleElement.firstChild) {
                styleElement.removeChild(styleElement.firstChild);
              }
              styleElement.appendChild(document.createTextNode(css));
            }
          }
        }
      ),
      /***/
      "8875": (
        /***/
        function(module3, exports2, __webpack_require__) {
          var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;
          (function(root, factory) {
            if (true) {
              !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = factory, __WEBPACK_AMD_DEFINE_RESULT__ = typeof __WEBPACK_AMD_DEFINE_FACTORY__ === "function" ? __WEBPACK_AMD_DEFINE_FACTORY__.apply(exports2, __WEBPACK_AMD_DEFINE_ARRAY__) : __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__ !== void 0 && (module3.exports = __WEBPACK_AMD_DEFINE_RESULT__));
            } else {
            }
          })(typeof self !== "undefined" ? self : this, function() {
            function getCurrentScript() {
              var descriptor = Object.getOwnPropertyDescriptor(document, "currentScript");
              if (!descriptor && "currentScript" in document && document.currentScript) {
                return document.currentScript;
              }
              if (descriptor && descriptor.get !== getCurrentScript && document.currentScript) {
                return document.currentScript;
              }
              try {
                throw new Error();
              } catch (err) {
                var ieStackRegExp = /.*at [^(]*\((.*):(.+):(.+)\)$/ig, ffStackRegExp = /@([^@]*):(\d+):(\d+)\s*$/ig, stackDetails = ieStackRegExp.exec(err.stack) || ffStackRegExp.exec(err.stack), scriptLocation = stackDetails && stackDetails[1] || false, line = stackDetails && stackDetails[2] || false, currentLocation = document.location.href.replace(document.location.hash, ""), pageSource, inlineScriptSourceRegExp, inlineScriptSource, scripts = document.getElementsByTagName("script");
                if (scriptLocation === currentLocation) {
                  pageSource = document.documentElement.outerHTML;
                  inlineScriptSourceRegExp = new RegExp("(?:[^\\n]+?\\n){0," + (line - 2) + "}[^<]*<script>([\\d\\D]*?)<\\/script>[\\d\\D]*", "i");
                  inlineScriptSource = pageSource.replace(inlineScriptSourceRegExp, "$1").trim();
                }
                for (var i = 0; i < scripts.length; i++) {
                  if (scripts[i].readyState === "interactive") {
                    return scripts[i];
                  }
                  if (scripts[i].src === scriptLocation) {
                    return scripts[i];
                  }
                  if (scriptLocation === currentLocation && scripts[i].innerHTML && scripts[i].innerHTML.trim() === inlineScriptSource) {
                    return scripts[i];
                  }
                }
                return null;
              }
            }
            ;
            return getCurrentScript;
          });
        }
      ),
      /***/
      "8bbf": (
        /***/
        function(module3, exports2) {
          module3.exports = require_vue();
        }
      ),
      /***/
      "93e7": (
        /***/
        function(module3, exports2, __webpack_require__) {
          var ___CSS_LOADER_API_IMPORT___ = __webpack_require__("24fb");
          exports2 = ___CSS_LOADER_API_IMPORT___(false);
          exports2.push([module3.i, '.fade-enter-active,.fade-leave-active{transition:opacity .5s}.fade-enter-from,.fade-leave-active{opacity:0}.vpd-fade-scale-enter-active,.vpd-fade-scale-leave-active{transition:opacity .5s}.vpd-fade-scale-enter-from,.vpd-fade-scale-leave-active{opacity:0}.vpd-fade-scale-enter-from .vpd-content,.vpd-fade-scale-leave-active .vpd-content{transform:scale(.7);opacity:0}.slideX-enter-active,.slideX-leave-active{position:absolute;top:0;bottom:0;right:0;left:0;opacity:1;transform:translateX(0);transition:all .3s ease-out}.slideX-enter-from,.slideX-leave-to{opacity:0}.direction-next .slideX-leave-to{transform:translateX(-100%)}.direction-next .slideX-enter-from,.direction-prev .slideX-leave-to{transform:translateX(100%)}.direction-prev .slideX-enter-from{transform:translateX(-100%)}.slideY-enter-active,.slideY-leave-active{position:absolute;top:0;bottom:0;right:0;left:0;opacity:1;transform:translateY(0);transition:all .3s ease-in-out}.slideY-enter-from,.slideY-leave-to{opacity:0}.direction-next .slideY-leave-to{transform:translateY(100%)}.direction-next .slideY-enter-from,.direction-prev .slideY-leave-to{transform:translateY(-100%)}.direction-prev .slideY-enter-from{transform:translateY(100%)}.fade-transition{opacity:1;transition:all .3s ease}.fade-enter,.fade-leave{opacity:0}.fast-updating .slideY-enter-active,.fast-updating .slideY-leave-active{transition:all .17s ease-in-out}.fast-updating .direction-next .slideY-leave-to{transform:translateY(45%)}.fast-updating .direction-next .slideY-enter-from{transform:translateY(-5%)}.fast-updating .direction-prev .slideY-leave-to{transform:translateY(-45%)}.fast-updating .direction-prev .slideY-enter-from{transform:translateY(5%)}.vpd-dir-rtl .direction-next .slideX-leave-to{transform:translateX(100%)}.vpd-dir-rtl .direction-next .slideX-enter-from,.vpd-dir-rtl .direction-prev .slideX-leave-to{transform:translateX(-100%)}.vpd-dir-rtl .direction-prev .slideX-enter-from{transform:translateX(100%)}.vpd-main *,.vpd-wrapper *{box-sizing:border-box}.vpd-clearfix:after,.vpd-clearfix:before{content:" ";display:table}.vpd-clearfix:after{clear:both}.vpd-input-group{display:flex;position:relative}.vpd-input-group input{flex-grow:1;border:1px solid #dadada;border-right:none;border-top-right-radius:0;border-bottom-right-radius:0;line-height:30px;padding:0 10px}.vpd-input-group input:not(.vpd-is-editable){cursor:pointer}.vpd-input-group label{color:#fff;white-space:nowrap}.vpd-input-group label svg+span{display:inline-block;margin-right:4px;vertical-align:middle}.vpd-input-group.vpd-disabled input,.vpd-input-group.vpd-disabled label{cursor:default}.vpd-input-group .vpd-clear-btn{position:absolute;left:0;top:0;line-height:32px;width:30px;cursor:pointer;text-align:center;font-style:normal;font-family:monospace,sans-serif;opacity:.4}.vpd-input-group .vpd-clear-btn:hover{opacity:.7}.vpd-icon-btn{cursor:pointer;padding:0 10px;display:flex;justify-content:center;align-items:center}.vpd-wrapper{position:fixed;top:0;left:0;right:0;bottom:0;width:100%;height:100%;background-color:rgba(0,0,0,.5);z-index:9999}.vpd-container{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);user-select:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none}.vpd-content{opacity:1;transition:all .4s cubic-bezier(.25,.1,.17,1.84);text-align:right;direction:rtl;width:316px;background-color:#fff;box-shadow:5px 22px 95px -14px #000;cursor:default}.vpd-header{color:#fff;padding:10px 20px}.vpd-body,.vpd-header,.vpd-year-label{position:relative}.vpd-year-label{margin-bottom:2px;height:24px;opacity:.7;overflow:hidden;cursor:pointer;font-size:16px}.vpd-year-label>span{display:inline-block;padding:0 10px;line-height:22px;height:22px;border-width:1px;border-style:solid;border-radius:2px;transition:all .1s ease-out}.vpd-year-label>span:not(:hover){border-color:transparent!important;color:inherit!important}.vpd-date{position:relative;font-size:28px;line-height:40px;height:40px;overflow:hidden}.vpd-date span{display:block;height:inherit;line-height:inherit}.vpd-week{font-size:12px;padding:0 14px;line-height:20px;color:#b9b9b9;margin-bottom:10px;height:20px}.vpd-weekday{float:right;width:40px;text-align:center}.vpd-days{padding:0 18px;position:relative;overflow:hidden;transition:height .3s cubic-bezier(.75,.02,.27,.99)}.vpd-day{width:40px;height:40px;float:right;line-height:40px;position:relative}.vpd-day:not(.vpd-empty){cursor:pointer;transition:color .45s ease;text-align:center}.vpd-day[disabled=true]{cursor:default;color:#ccc}.vpd-day[disabled=true] .vpd-day-effect{background-color:transparent}.vpd-day[disabled=true] .vpd-day-text{color:#ccc}.vpd-day:not([disabled=true]):hover{color:#fff}.vpd-day:not([disabled=true]):hover .vpd-day-effect{transform:scale(1);opacity:.6}.vpd-day:not([disabled=true]).vpd-selected{color:#fff}.vpd-day:not([disabled=true]).vpd-selected .vpd-day-effect{transform:scale(1);opacity:1}.vpd-day:not([disabled=true]).vpd-range-between{color:#fff}.vpd-day:not([disabled=true]).vpd-range-between .vpd-day-effect{transform:scale(.75);opacity:1}.vpd-day:not([disabled=true]).vpd-range-hover{color:#fff}.vpd-day:not([disabled=true]).vpd-range-hover .vpd-day-effect{transform:scale(.7);opacity:.6}.vpd-day-effect{position:absolute;width:36px;height:36px;border-radius:50%;top:2px;left:2px;transform:scale(0);opacity:0;transition:all .45s ease}.vpd-controls,.vpd-day-text{position:relative}.vpd-controls{z-index:2;height:50px;line-height:50px;text-align:center}.vpd-controls button{position:relative;background-color:transparent;border:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;outline:none;cursor:pointer}.vpd-controls button[disabled=true]{opacity:.3;cursor:default}.vpd-next,.vpd-prev{width:50px;height:50px;line-height:50px}.vpd-next{float:right}.vpd-prev{float:left}.vpd-arrow{width:11px;height:11px}.vpd-month{position:relative;overflow:hidden}.vpd-month-label{position:absolute;top:0;left:50px;right:50px;overflow:hidden;width:95px;margin-left:auto;margin-right:auto;line-height:50px;height:50px;text-align:center;cursor:pointer}.vpd-month-label>span{display:inline-block;padding:0 5px;line-height:26px;height:26px;border-width:1px;border-style:solid;border-radius:2px;transition:all .1s ease-out;white-space:nowrap}.vpd-month-label>span:not(:hover){border-color:transparent!important;color:inherit!important}.vpd-actions{text-align:right;padding:8px}.vpd-actions button{border:none;background-color:transparent;display:inline-block;cursor:pointer;outline:none;font-size:14px;text-transform:uppercase;min-width:88px;text-align:center;-webkit-appearance:none;line-height:36px;height:36px;transition:all .3s ease}.vpd-actions button:hover{background-color:#f2f2f2}.vpd-actions button[disabled=true]{opacity:.6;cursor:default}.vpd-addon-list-content{direction:rtl}.vpd-addon-list-item{width:33.33333%;text-align:center;font-size:14px;height:44px;line-height:36px;transition:all .3s ease;color:#8a8a8a;cursor:pointer;float:right;border:4px solid #fff}.vpd-addon-list-item.vpd-selected,.vpd-addon-list-item:hover{background-color:#f9f9f9}.vpd-addon-list-item.vpd-selected{font-weight:700;background-color:#f5f5f5}.vpd-addon-list{width:100%;background-color:#fff;position:absolute;z-index:2;overflow:auto;top:0;bottom:52px;border-bottom:1px solid #eee;direction:ltr}.vpd-addon-list.vpd-can-close{padding-top:30px}.vpd-month-list{padding-top:15px}.vpd-month-list .vpd-addon-list-item{height:54px;line-height:46px}.vpd-addon-list-item[disabled=true]{opacity:.3;cursor:default!important;background-color:transparent!important}.vpd-close-addon{position:absolute;top:4px;left:4px;z-index:2;width:30px;height:30px;line-height:30px;color:#444;font-family:sans-serif;text-align:center;cursor:pointer;background-color:rgba(0,0,0,.1)}.vpd-time{-ms-user-select:none;user-select:none;-moz-user-select:none;-webkit-user-select:none}.vpd-time .vpd-time-h,.vpd-time .vpd-time-m{position:relative;margin-top:70px;float:left;width:50%;height:100%;text-align:center;color:#a2a2a2}.vpd-time .vpd-time-h .vpd-counter,.vpd-time .vpd-time-m .vpd-counter{font-size:90px;height:100px;line-height:100px;overflow:hidden;position:relative;direction:ltr;transition:opacity .3s ease-in-out}.vpd-time .vpd-time-h .vpd-counter-item,.vpd-time .vpd-time-m .vpd-counter-item{height:inherit;width:51px;display:inline-block;vertical-align:text-top;position:relative}.vpd-time .vpd-time-h:after{position:absolute;top:50%;right:0;content:":";font-size:70px;transform:translate(50%,-50%);transition:inherit}.vpd-time .vpd-down-arrow-btn,.vpd-time .vpd-up-arrow-btn{display:block;cursor:pointer;outline:none;height:34px}.vpd-time.vpd-disabled .vpd-counter-item{opacity:.5}.vpd-time-column .vpd-counter{position:relative}.vpd-time-column .vpd-counter input{position:absolute;z-index:5;border:none;background-color:transparent;top:0;left:0;width:100%;height:100%;text-align:center;outline:none;font-size:inherit;color:inherit;line-height:inherit;opacity:0;padding:5% 0 0 0}.vpd-time-column .vpd-counter input:focus{opacity:1}.vpd-time-column .vpd-counter input:focus:not(.is-empty)~div{opacity:0}.vpd-prev-step{position:absolute;top:0;left:0;width:30px;height:30px;text-align:center;padding:9px;cursor:pointer}.vpd-prev-step:hover{background-color:rgba(0,0,0,.2)}[data-type=time] .vpd-time .vpd-time-h,[data-type=time] .vpd-time .vpd-time-m{margin-top:40px}.vpd-is-inline{position:static;background-color:transparent;height:auto;width:auto;display:block;margin-top:2px}.vpd-is-inline .vpd-container{position:static;transform:none}.vpd-is-inline .vpd-content{box-shadow:0 0 1px -1px #000}.vpd-is-popover{display:inline-block;position:relative}.vpd-is-popover .vpd-wrapper{position:static;width:auto;height:0}.vpd-is-popover .vpd-wrapper .vpd-container{transform:none;top:auto;left:auto;z-index:500}.vpd-is-popover .vpd-wrapper .vpd-content{transition:none;box-shadow:0 3px 8px rgba(0,0,0,.4)}.vpd-is-popover[data-placement=top-left] .vpd-container{bottom:100%;left:0}.vpd-is-popover[data-placement=top-left] .vpd-content{box-shadow:0 -3px 8px rgba(0,0,0,.4)}.vpd-is-popover[data-placement=top-right] .vpd-container{bottom:100%;right:0}.vpd-is-popover[data-placement=top-right] .vpd-content{box-shadow:0 -3px 8px rgba(0,0,0,.4)}.vpd-is-popover[data-placement=bottom-left] .vpd-container{top:100%;left:0}.vpd-is-popover[data-placement=bottom-right] .vpd-container{top:100%;right:0}.vpd-is-popover[data-placement=left-top] .vpd-container{bottom:0;right:100%}.vpd-is-popover[data-placement=left-bottom] .vpd-container{top:0;right:100%}.vpd-is-popover[data-placement=right-top] .vpd-container{bottom:0;left:100%}.vpd-is-popover[data-placement=right-bottom] .vpd-container{top:0;left:100%}.vpd-no-footer .vpd-addon-list{bottom:0;border-bottom:none}.vpd-wrapper[data-type=datetime].vpd-compact-time .vpd-time{margin-top:10px;display:block!important;position:relative;border-top:1px solid #eee;overflow:hidden}.vpd-wrapper[data-type=datetime].vpd-compact-time .vpd-time .vpd-addon-list-content{display:flex;justify-content:center;direction:ltr}.vpd-wrapper[data-type=datetime].vpd-compact-time .vpd-time .vpd-counter-item{width:18px}.vpd-wrapper[data-type=datetime].vpd-compact-time .vpd-time .vpd-counter{height:30px;font-size:20px;line-height:34px;width:40px}.vpd-wrapper[data-type=datetime].vpd-compact-time .vpd-time .vpd-down-arrow-btn,.vpd-wrapper[data-type=datetime].vpd-compact-time .vpd-time .vpd-up-arrow-btn{position:absolute;top:0;height:26px;width:26px;margin:2px;border-radius:50%;display:flex;justify-content:center;align-items:center;background-color:rgba(0,0,0,.05)}.vpd-wrapper[data-type=datetime].vpd-compact-time .vpd-time .vpd-time-m{margin-top:0;float:none;width:100px}.vpd-wrapper[data-type=datetime].vpd-compact-time .vpd-time .vpd-time-m .vpd-up-arrow-btn{right:30px}.vpd-wrapper[data-type=datetime].vpd-compact-time .vpd-time .vpd-time-m .vpd-down-arrow-btn{right:0}.vpd-wrapper[data-type=datetime].vpd-compact-time .vpd-time .vpd-time-h{margin-top:0;float:none;width:100px}.vpd-wrapper[data-type=datetime].vpd-compact-time .vpd-time .vpd-time-h:after{font-size:20px}.vpd-wrapper[data-type=datetime].vpd-compact-time .vpd-time .vpd-time-h .vpd-counter{margin-left:auto}.vpd-wrapper[data-type=datetime].vpd-compact-time .vpd-time .vpd-time-h .vpd-up-arrow-btn{left:0}.vpd-wrapper[data-type=datetime].vpd-compact-time .vpd-time .vpd-time-h .vpd-down-arrow-btn{left:30px}.vpd-wrapper[data-type=datetime].vpd-compact-time .vpd-time svg{height:10px}.vpd-wrapper[data-type=datetime] .vpd-date{font-size:22px}.vpd-wrapper.vpd-is-range .vpd-date{font-size:16px}.vpd-wrapper.vpd-is-multiple .vpd-date{font-size:14px;white-space:normal;line-height:20px}@media screen and (max-height:460px){.vpd-wrapper{overflow:auto;text-align:center}.vpd-wrapper .vpd-container{position:relative;top:0;left:0;transform:none;display:inline-block;margin:20px auto}}.vpd-locales{list-style-type:none;padding:0;margin:0;position:absolute;left:14px;top:12px;line-height:24px;text-align:center;opacity:.7}.vpd-locales li{cursor:pointer}.vpd-simple-body .vpd-header{display:flex;padding:10px;justify-content:space-between}.vpd-simple-body .vpd-locales{position:static;padding:0 5px;line-height:unset}.vpd-simple-content{display:flex;justify-content:center;height:240px;direction:ltr}.vpd-simple-content .vpd-column{height:100%;flex-grow:1;display:flex;flex-flow:column;padding:5px}.vpd-simple-content .vpd-column .vpd-column-header{text-align:center;font-weight:700;color:#000;height:30px;line-height:30px}.vpd-simple-content .vpd-column .vpd-column-content{flex-grow:1;height:100%;overflow:auto;padding-right:4px;position:relative}.vpd-simple-content .vpd-column .vpd-column-content:after,.vpd-simple-content .vpd-column .vpd-column-content:before{display:block;height:80px;content:""}@media screen and (min-width:640px){.vpd-simple-content .vpd-column .vpd-column-content::-webkit-scrollbar{width:8px}.vpd-simple-content .vpd-column .vpd-column-content::-webkit-scrollbar-track{background:rgba(0,0,0,.05);border-radius:5px}.vpd-simple-content .vpd-column .vpd-column-content::-webkit-scrollbar-thumb{background:rgba(0,0,0,.2);border-radius:5px}.vpd-simple-content .vpd-column .vpd-column-content::-webkit-scrollbar-thumb:hover{background:rgba(0,0,0,.5)}}.vpd-simple-content .vpd-addon-list-item{width:100%;float:none!important;line-height:42px;height:44px;border:1px solid #fff}.vpd-simple-content .vpd-range-first{border-radius:40px 40px 0 0}.vpd-simple-content .vpd-range-between{font-weight:700;background-color:#f5f5f5}.vpd-simple-content .vpd-range-last{border-radius:0 0 40px 40px}.vpd-simple-content .vpd-range-last.vpd-range-first{border-radius:40px}.vpd-simple-content .vpd-column.vpd-is-mounted .vpd-selected:not(.vpd-range-first):not(.vpd-range-last):not([disabled=true]){position:sticky;top:0;bottom:0}.vpd-is-multiple .vpd-simple-content .vpd-column .vpd-selected{position:static!important}.vpd-dir-ltr .vpd-actions,.vpd-dir-ltr .vpd-addon-list-content,.vpd-dir-ltr .vpd-content{direction:ltr}.vpd-dir-ltr .vpd-actions,.vpd-dir-ltr .vpd-content{text-align:left;font-family:sans-serif}.vpd-dir-ltr .vpd-month-label{font-size:90%}.vpd-dir-ltr .vpd-addon-list-item,.vpd-dir-ltr .vpd-day,.vpd-dir-ltr .vpd-weekday{float:left}.vpd-dir-ltr .vpd-locales{left:auto;right:14px}.vpd-dir-rtl .vpd-next,.vpd-dir-rtl .vpd-prev{transform:rotateY(180deg)}.vpd-dir-rtl .vpd-next{float:left}.vpd-dir-rtl .vpd-prev{float:right}', ""]);
          module3.exports = exports2;
        }
      ),
      /***/
      "b9b3": (
        /***/
        function(module3, exports2) {
          module3.exports = require_moment_jalaali();
        }
      ),
      /***/
      "c32d": (
        /***/
        function(module3, exports2) {
          module3.exports = (init_moment(), __toCommonJS(moment_exports));
        }
      ),
      /***/
      "fb15": (
        /***/
        function(module3, __webpack_exports__, __webpack_require__) {
          "use strict";
          __webpack_require__.r(__webpack_exports__);
          if (typeof window !== "undefined") {
            var currentScript = window.document.currentScript;
            if (true) {
              var getCurrentScript = __webpack_require__("8875");
              currentScript = getCurrentScript();
              if (!("currentScript" in document)) {
                Object.defineProperty(document, "currentScript", { get: getCurrentScript });
              }
            }
            var src = currentScript && currentScript.src.match(/(.+\/)[^/]+\.js(\?.*)?$/);
            if (src) {
              __webpack_require__.p = src[1];
            }
          }
          var setPublicPath = null;
          var external_commonjs_vue_commonjs2_vue_root_Vue_ = __webpack_require__("8bbf");
          var _hoisted_1 = Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createTextVNode"])("x");
          var _hoisted_2 = {
            ref: "container",
            class: "vpd-container"
          };
          var _hoisted_3 = {
            class: "vpd-content"
          };
          var _hoisted_4 = {
            class: "vpd-body"
          };
          var _hoisted_5 = {
            class: "vpd-clearfix vpd-week"
          };
          var _hoisted_6 = {
            key: 1,
            style: {
              "height": "250px"
            }
          };
          var _hoisted_7 = {
            class: "vpd-addon-list-content"
          };
          var _hoisted_8 = {
            class: "vpd-addon-list-content"
          };
          var _hoisted_9 = Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createTextVNode"])("x");
          var _hoisted_10 = {
            key: 0
          };
          var _hoisted_11 = {
            key: 3,
            class: "vpd-actions"
          };
          function render(_ctx, _cache, $props, $setup, $data, $options) {
            var _component_time_icon = Object(external_commonjs_vue_commonjs2_vue_root_Vue_["resolveComponent"])("time-icon");
            var _component_calendar_icon = Object(external_commonjs_vue_commonjs2_vue_root_Vue_["resolveComponent"])("calendar-icon");
            var _component_locale_change = Object(external_commonjs_vue_commonjs2_vue_root_Vue_["resolveComponent"])("locale-change");
            var _component_simple_mode = Object(external_commonjs_vue_commonjs2_vue_root_Vue_["resolveComponent"])("simple-mode");
            var _component_arrow = Object(external_commonjs_vue_commonjs2_vue_root_Vue_["resolveComponent"])("arrow");
            var _component_time_section = Object(external_commonjs_vue_commonjs2_vue_root_Vue_["resolveComponent"])("time-section");
            return Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])("span", {
              class: ["vpd-main", {
                "vpd-is-popover": $options.isPopover
              }],
              "data-type": $props.type,
              "data-placement": $data.popoverPlace,
              "data-locale": $data.localeData.name,
              "data-locale-dir": $data.localeData.config.dir
            }, [!$options.customInputElement ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])("span", {
              key: 0,
              ref: "inputGroup",
              class: ["vpd-input-group", {
                "vpd-disabled": $props.disabled
              }]
            }, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])("label", {
              for: $options.id,
              class: "vpd-icon-btn",
              style: {
                "background-color": $props.color
              },
              onClick: _cache[1] || (_cache[1] = Object(external_commonjs_vue_commonjs2_vue_root_Vue_["withModifiers"])(function($event) {
                return $data.visible = !$data.visible;
              }, ["prevent", "stop"]))
            }, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["renderSlot"])(_ctx.$slots, "label", {}, function() {
              return [$props.type === "time" ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])(_component_time_icon, {
                key: 0,
                width: "16px",
                height: "16px"
              })) : (Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])(_component_calendar_icon, {
                key: 1,
                width: "16px",
                height: "16px"
              })), $props.label ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])("span", {
                key: 2,
                textContent: Object(external_commonjs_vue_commonjs2_vue_root_Vue_["toDisplayString"])($props.label)
              }, null, 8, ["textContent"])) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createCommentVNode"])("", true)];
            })], 12, ["for"]), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])("input", Object(external_commonjs_vue_commonjs2_vue_root_Vue_["mergeProps"])({
              id: $options.id,
              ref: "input",
              type: "text",
              name: $props.name,
              class: [$props.inputClass, {
                "vpd-is-editable": $props.editable
              }],
              placeholder: $props.placeholder,
              value: $options.displayValue,
              disabled: $props.disabled
            }, $props.inputAttrs, {
              onFocus: _cache[2] || (_cache[2] = function() {
                return $options.focus && $options.focus.apply($options, arguments);
              }),
              onBlur: _cache[3] || (_cache[3] = function() {
                return $options.setOutput && $options.setOutput.apply($options, arguments);
              }),
              onKeydown: _cache[4] || (_cache[4] = Object(external_commonjs_vue_commonjs2_vue_root_Vue_["withKeys"])(function() {
                return $options.setOutput && $options.setOutput.apply($options, arguments);
              }, ["enter"]))
            }), null, 16, ["id", "name", "placeholder", "value", "disabled"]), $props.altName ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])("input", {
              key: 0,
              type: "hidden",
              name: $props.altName,
              value: $options.altFormatted
            }, null, 8, ["name", "value"])) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createCommentVNode"])("", true), $props.clearable && !$props.disabled && $options.displayValue ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])("i", {
              key: 1,
              class: "vpd-clear-btn",
              onClick: _cache[5] || (_cache[5] = function() {
                return $options.clearValue && $options.clearValue.apply($options, arguments);
              })
            }, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["renderSlot"])(_ctx.$slots, "clear-btn", {
              vm: $options.vm
            }, function() {
              return [_hoisted_1];
            })])) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createCommentVNode"])("", true)], 2)) : $props.altName ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])("input", {
              key: 1,
              type: "hidden",
              name: $props.altName,
              value: $options.altFormatted
            }, null, 8, ["name", "value"])) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createCommentVNode"])("", true), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])(external_commonjs_vue_commonjs2_vue_root_Vue_["Transition"], {
              name: $options.isPopover ? "" : "vpd-fade-scale"
            }, {
              default: Object(external_commonjs_vue_commonjs2_vue_root_Vue_["withCtx"])(function() {
                return [$data.visible ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])("div", {
                  key: 0,
                  ref: "picker",
                  class: ["vpd-wrapper", "vpd-dir-".concat($data.localeData.config.dir), {
                    "vpd-is-range": $props.range,
                    "vpd-is-inline": $props.inline,
                    "vpd-is-multiple": $props.multiple,
                    "vpd-compact-time": $options.isCompactTime,
                    "vpd-no-footer": $props.autoSubmit && !$options.hasStep("t")
                  }],
                  "data-type": $props.type,
                  onClick: _cache[17] || (_cache[17] = Object(external_commonjs_vue_commonjs2_vue_root_Vue_["withModifiers"])(function() {
                    return $options.wrapperClick && $options.wrapperClick.apply($options, arguments);
                  }, ["self"]))
                }, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])("div", _hoisted_2, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])("div", _hoisted_3, [!$props.simple ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])("div", {
                  key: 0,
                  class: "vpd-header",
                  style: {
                    "background-color": $props.color
                  }
                }, [["date", "datetime", "year-month"].indexOf($props.type) !== -1 ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])("div", {
                  key: 0,
                  class: ["vpd-year-label", $data.directionClass],
                  onClick: _cache[6] || (_cache[6] = function($event) {
                    return $options.goStep("y");
                  })
                }, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])(external_commonjs_vue_commonjs2_vue_root_Vue_["Transition"], {
                  name: "slideY"
                }, {
                  default: Object(external_commonjs_vue_commonjs2_vue_root_Vue_["withCtx"])(function() {
                    return [(Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])("span", {
                      key: $options.selectedDate.xYear()
                    }, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["renderSlot"])(_ctx.$slots, "header-year", {
                      vm: $options.vm,
                      selectedDate: $options.selectedDate
                    }, function() {
                      return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createTextVNode"])(Object(external_commonjs_vue_commonjs2_vue_root_Vue_["toDisplayString"])($options.convertToLocaleNumber($options.selectedDate.xYear())), 1)];
                    })]))];
                  }),
                  _: 3
                })], 2)) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createCommentVNode"])("", true), $props.type !== "year-month" ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])("div", {
                  key: 1,
                  class: ["vpd-date", $data.directionClass]
                }, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])(external_commonjs_vue_commonjs2_vue_root_Vue_["Transition"], {
                  name: "slideY"
                }, {
                  default: Object(external_commonjs_vue_commonjs2_vue_root_Vue_["withCtx"])(function() {
                    return [(Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])("span", {
                      key: $options.formattedDate
                    }, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["renderSlot"])(_ctx.$slots, "header-date", {
                      vm: $options.vm,
                      formattedDate: $options.formattedDate
                    }, function() {
                      return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createTextVNode"])(Object(external_commonjs_vue_commonjs2_vue_root_Vue_["toDisplayString"])($options.convertToLocaleNumber($options.formattedDate)), 1)];
                    })]))];
                  }),
                  _: 3
                })], 2)) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createCommentVNode"])("", true), $data.locales.length > 1 ? Object(external_commonjs_vue_commonjs2_vue_root_Vue_["renderSlot"])(_ctx.$slots, "locales", Object(external_commonjs_vue_commonjs2_vue_root_Vue_["mergeProps"])({
                  key: 2
                }, {
                  vm: $options.vm,
                  locales: $data.locales,
                  setLocale: $options.setLocale
                }), function() {
                  return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])(_component_locale_change, {
                    "locale-data": $data.localeData,
                    core: $data.core,
                    locales: $data.locales,
                    class: "vpd-locales",
                    onChange: $options.setLocale
                  }, null, 8, ["locale-data", "core", "locales", "onChange"])];
                }) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createCommentVNode"])("", true)], 4)) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createCommentVNode"])("", true), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])("div", _hoisted_4, [$props.simple ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])(_component_simple_mode, {
                  key: 0,
                  lang: $options.lang,
                  core: $data.core,
                  range: $props.range,
                  color: $props.color,
                  locales: $data.locales,
                  visible: $data.visible,
                  multiple: $props.multiple,
                  years: $options.years,
                  months: $options.months,
                  "month-days": $options.monthDays,
                  "has-step": $options.hasStep,
                  "selected-dates": $data.selectedDates,
                  "formatted-date": $options.formattedDate,
                  "set-locale": $options.setLocale,
                  "convert-to-locale-number": $options.convertToLocaleNumber,
                  onSelectYear: $options.selectYear,
                  onSelectMonth: $options.selectMonth,
                  onSelectDay: $options.selectDay
                }, {
                  "header-date": Object(external_commonjs_vue_commonjs2_vue_root_Vue_["withCtx"])(function(slotData) {
                    return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["renderSlot"])(_ctx.$slots, "header-date", slotData)];
                  }),
                  locales: Object(external_commonjs_vue_commonjs2_vue_root_Vue_["withCtx"])(function(slotData) {
                    return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["renderSlot"])(_ctx.$slots, "locales", slotData)];
                  }),
                  "year-item": Object(external_commonjs_vue_commonjs2_vue_root_Vue_["withCtx"])(function(slotData) {
                    return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["renderSlot"])(_ctx.$slots, "year-item", slotData)];
                  }),
                  "month-item": Object(external_commonjs_vue_commonjs2_vue_root_Vue_["withCtx"])(function(slotData) {
                    return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["renderSlot"])(_ctx.$slots, "month-item", slotData)];
                  }),
                  "day-item": Object(external_commonjs_vue_commonjs2_vue_root_Vue_["withCtx"])(function(slotData) {
                    return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["renderSlot"])(_ctx.$slots, "day-item", slotData)];
                  }),
                  _: 3
                }, 8, ["lang", "core", "range", "color", "locales", "visible", "multiple", "years", "months", "month-days", "has-step", "selected-dates", "formatted-date", "set-locale", "convert-to-locale-number", "onSelectYear", "onSelectMonth", "onSelectDay"])) : (Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])(external_commonjs_vue_commonjs2_vue_root_Vue_["Fragment"], {
                  key: 1
                }, [$options.hasStep("d") ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])(external_commonjs_vue_commonjs2_vue_root_Vue_["Fragment"], {
                  key: 0
                }, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])("div", {
                  class: ["vpd-controls", $data.directionClassDate]
                }, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])("button", {
                  type: "button",
                  class: "vpd-next",
                  title: $options.lang.nextMonth,
                  disabled: $options.nextMonthDisabled,
                  onClick: _cache[7] || (_cache[7] = function() {
                    return $options.nextMonth && $options.nextMonth.apply($options, arguments);
                  })
                }, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["renderSlot"])(_ctx.$slots, "next-month", {}, function() {
                  return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])(_component_arrow, {
                    width: "10",
                    fill: "#000",
                    direction: "right",
                    style: {
                      "vertical-align": "middle"
                    }
                  })];
                })], 8, ["title", "disabled"]), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])("button", {
                  type: "button",
                  class: "vpd-prev",
                  title: $options.lang.prevMonth,
                  disabled: $options.prevMonthDisabled,
                  onClick: _cache[8] || (_cache[8] = function() {
                    return $options.prevMonth && $options.prevMonth.apply($options, arguments);
                  })
                }, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["renderSlot"])(_ctx.$slots, "prev-month", {}, function() {
                  return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])(_component_arrow, {
                    width: "10",
                    fill: "#000",
                    direction: "left",
                    style: {
                      "vertical-align": "middle"
                    }
                  })];
                })], 8, ["title", "disabled"]), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])(external_commonjs_vue_commonjs2_vue_root_Vue_["Transition"], {
                  name: "slideX"
                }, {
                  default: Object(external_commonjs_vue_commonjs2_vue_root_Vue_["withCtx"])(function() {
                    return [(Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])("div", {
                      key: $data.date.xMonth(),
                      class: "vpd-month-label",
                      onClick: _cache[9] || (_cache[9] = function($event) {
                        return $options.goStep("m");
                      })
                    }, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["renderSlot"])(_ctx.$slots, "month-name", {
                      vm: $options.vm,
                      date: $data.date,
                      color: $props.color
                    }, function() {
                      return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])("span", {
                        style: {
                          "border-color": $props.color,
                          color: $props.color
                        },
                        textContent: Object(external_commonjs_vue_commonjs2_vue_root_Vue_["toDisplayString"])($options.convertToLocaleNumber($data.date.xFormat("jMMMM jYYYY")))
                      }, null, 12, ["textContent"])];
                    })]))];
                  }),
                  _: 3
                })], 2), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])("div", {
                  class: ["vpd-clearfix", ["vpd-month", $data.directionClassDate]]
                }, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])("div", _hoisted_5, [(Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(true), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])(external_commonjs_vue_commonjs2_vue_root_Vue_["Fragment"], null, Object(external_commonjs_vue_commonjs2_vue_root_Vue_["renderList"])($options.weekDays, function(day, i) {
                  return Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])("div", {
                    key: "".concat(i, "-").concat(day),
                    class: "vpd-weekday"
                  }, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["renderSlot"])(_ctx.$slots, "weekday", {
                    vm: $options.vm,
                    day
                  }, function() {
                    return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createTextVNode"])(Object(external_commonjs_vue_commonjs2_vue_root_Vue_["toDisplayString"])(day), 1)];
                  })]);
                }), 128))]), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])("div", {
                  class: "vpd-days",
                  style: {
                    height: $options.month.length * 40 + "px"
                  },
                  onMouseleave: _cache[10] || (_cache[10] = function($event) {
                    return $data.hoveredItem = null;
                  })
                }, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])(external_commonjs_vue_commonjs2_vue_root_Vue_["Transition"], {
                  name: "slideX",
                  class: $data.directionClassDate
                }, {
                  default: Object(external_commonjs_vue_commonjs2_vue_root_Vue_["withCtx"])(function() {
                    return [(Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])("div", {
                      key: $data.date.xMonth()
                    }, [(Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(true), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])(external_commonjs_vue_commonjs2_vue_root_Vue_["Fragment"], null, Object(external_commonjs_vue_commonjs2_vue_root_Vue_["renderList"])($options.monthDays, function(m, mi) {
                      return Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])("div", {
                        key: mi,
                        class: "vpd-clearfix"
                      }, [(Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(true), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])(external_commonjs_vue_commonjs2_vue_root_Vue_["Fragment"], null, Object(external_commonjs_vue_commonjs2_vue_root_Vue_["renderList"])(m, function(day, di) {
                        return Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])("div", Object(external_commonjs_vue_commonjs2_vue_root_Vue_["mergeProps"])({
                          key: di,
                          class: ["vpd-day", {
                            "vpd-selected": day.selected,
                            "vpd-empty": day.date == null,
                            "vpd-range-first": day.isFirst,
                            "vpd-range-last": day.isLast,
                            "vpd-range-between": day.isBetween,
                            "vpd-range-hover": $data.hoveredItem && day.isHover
                          }, day.attributes.class]
                        }, day.attributes, {
                          disabled: day.disabled,
                          onClick: function onClick($event) {
                            return $options.selectDay(day);
                          },
                          onMouseover: function onMouseover($event) {
                            return $data.hoveredItem = day.date;
                          }
                        }), [day.date != null ? Object(external_commonjs_vue_commonjs2_vue_root_Vue_["renderSlot"])(_ctx.$slots, "day-item", Object(external_commonjs_vue_commonjs2_vue_root_Vue_["mergeProps"])({
                          key: 0
                        }, {
                          vm: $options.vm,
                          day,
                          color: $props.color
                        }), function() {
                          return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])("span", {
                            class: "vpd-day-effect",
                            style: {
                              "background-color": $props.color
                            }
                          }, null, 4), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])("span", {
                            class: "vpd-day-text",
                            textContent: Object(external_commonjs_vue_commonjs2_vue_root_Vue_["toDisplayString"])($options.convertToLocaleNumber(day.formatted))
                          }, null, 8, ["textContent"])];
                        }) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createCommentVNode"])("", true)], 16, ["disabled", "onClick", "onMouseover"]);
                      }), 128))]);
                    }), 128))]))];
                  }),
                  _: 3
                }, 8, ["class"])], 36)], 2)], 64)) : (Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])("div", _hoisted_6)), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])(external_commonjs_vue_commonjs2_vue_root_Vue_["Transition"], {
                  name: "fade"
                }, {
                  default: Object(external_commonjs_vue_commonjs2_vue_root_Vue_["withCtx"])(function() {
                    return [$options.hasStep("y") ? Object(external_commonjs_vue_commonjs2_vue_root_Vue_["withDirectives"])((Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])("div", {
                      key: 0,
                      ref: "year",
                      class: ["vpd-addon-list", {
                        "vpd-can-close": $data.steps.length > 1
                      }]
                    }, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])("div", _hoisted_7, [(Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(true), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])(external_commonjs_vue_commonjs2_vue_root_Vue_["Fragment"], null, Object(external_commonjs_vue_commonjs2_vue_root_Vue_["renderList"])($options.years, function(year, yi) {
                      return Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])("div", Object(external_commonjs_vue_commonjs2_vue_root_Vue_["mergeProps"])({
                        key: yi
                      }, year.attributes, {
                        class: ["vpd-addon-list-item", {
                          "vpd-selected": year.selected
                        }, year.attributes.class],
                        style: [{
                          color: year.selected ? $props.color : ""
                        }, year.attributes.style],
                        disabled: year.disabled,
                        onClick: function onClick($event) {
                          return $options.selectYear(year);
                        }
                      }), [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["renderSlot"])(_ctx.$slots, "year-item", {
                        vm: $options.vm,
                        year,
                        color: $props.color
                      }, function() {
                        return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createTextVNode"])(Object(external_commonjs_vue_commonjs2_vue_root_Vue_["toDisplayString"])($options.convertToLocaleNumber(year.xFormat("jYYYY"))), 1)];
                      })], 16, ["disabled", "onClick"]);
                    }), 128))])], 2)), [[external_commonjs_vue_commonjs2_vue_root_Vue_["vShow"], $options.currentStep === "y"]]) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createCommentVNode"])("", true)];
                  }),
                  _: 3
                }), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])(external_commonjs_vue_commonjs2_vue_root_Vue_["Transition"], {
                  name: "fade"
                }, {
                  default: Object(external_commonjs_vue_commonjs2_vue_root_Vue_["withCtx"])(function() {
                    return [$options.hasStep("m") ? Object(external_commonjs_vue_commonjs2_vue_root_Vue_["withDirectives"])((Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])("div", {
                      key: 0,
                      ref: "month",
                      class: ["vpd-addon-list vpd-month-list", {
                        "vpd-can-close": $data.steps.length > 1
                      }]
                    }, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])("div", _hoisted_8, [(Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(true), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])(external_commonjs_vue_commonjs2_vue_root_Vue_["Fragment"], null, Object(external_commonjs_vue_commonjs2_vue_root_Vue_["renderList"])($options.months, function(monthItem, mi) {
                      return Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])("div", Object(external_commonjs_vue_commonjs2_vue_root_Vue_["mergeProps"])({
                        key: mi
                      }, monthItem.attributes, {
                        class: ["vpd-addon-list-item", {
                          "vpd-selected": monthItem.selected
                        }, monthItem.attributes.class],
                        disabled: monthItem.disabled,
                        style: [{
                          color: monthItem.selected ? $props.color : ""
                        }, monthItem.attributes.style],
                        onClick: function onClick($event) {
                          return $options.selectMonth(monthItem);
                        }
                      }), [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["renderSlot"])(_ctx.$slots, "month-item", {
                        vm: $options.vm,
                        monthItem,
                        color: $props.color
                      }, function() {
                        return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createTextVNode"])(Object(external_commonjs_vue_commonjs2_vue_root_Vue_["toDisplayString"])(monthItem.xFormat("jMMMM")), 1)];
                      })], 16, ["disabled", "onClick"]);
                    }), 128))])], 2)), [[external_commonjs_vue_commonjs2_vue_root_Vue_["vShow"], $options.currentStep === "m"]]) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createCommentVNode"])("", true)];
                  }),
                  _: 3
                }), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])(external_commonjs_vue_commonjs2_vue_root_Vue_["Transition"], {
                  name: "fade"
                }, {
                  default: Object(external_commonjs_vue_commonjs2_vue_root_Vue_["withCtx"])(function() {
                    return [$data.steps.length > 1 && $options.currentStep !== "d" && $options.hasStep("d") ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])("span", {
                      key: 0,
                      class: "vpd-close-addon",
                      onClick: _cache[11] || (_cache[11] = function($event) {
                        return $options.goStep("d");
                      })
                    }, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["renderSlot"])(_ctx.$slots, "close-btn", {
                      vm: $options.vm
                    }, function() {
                      return [_hoisted_9];
                    })])) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createCommentVNode"])("", true)];
                  }),
                  _: 3
                })], 64)), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])(external_commonjs_vue_commonjs2_vue_root_Vue_["Transition"], {
                  name: "fade"
                }, {
                  default: Object(external_commonjs_vue_commonjs2_vue_root_Vue_["withCtx"])(function() {
                    return [$options.hasStep("t") ? Object(external_commonjs_vue_commonjs2_vue_root_Vue_["withDirectives"])((Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])(_component_time_section, {
                      key: 0,
                      ref: "time",
                      date: $data.date,
                      "onUpdate:date": _cache[12] || (_cache[12] = function($event) {
                        return $data.date = $event;
                      }),
                      time: $data.time,
                      "onUpdate:time": _cache[13] || (_cache[13] = function($event) {
                        return $data.time = $event;
                      }),
                      "is-more": $options.isMore,
                      "is-lower": $options.isLower,
                      "min-date": $data.minDate,
                      "max-date": $data.maxDate,
                      "jump-minute": $props.jumpMinute,
                      "round-minute": $props.roundMinute,
                      "get-highlights": $options.getHighlights,
                      "selected-dates": $data.selectedDates,
                      "convert-to-locale-number": $options.convertToLocaleNumber
                    }, null, 8, ["date", "time", "is-more", "is-lower", "min-date", "max-date", "jump-minute", "round-minute", "get-highlights", "selected-dates", "convert-to-locale-number"])), [[external_commonjs_vue_commonjs2_vue_root_Vue_["vShow"], $options.currentStep === "t"]]) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createCommentVNode"])("", true)];
                  }),
                  _: 1
                }), $props.autoSubmit && !$options.hasStep("t") ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])(external_commonjs_vue_commonjs2_vue_root_Vue_["Fragment"], {
                  key: 2
                }, [!$props.simple ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])("br", _hoisted_10)) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createCommentVNode"])("", true)], 64)) : (Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])("div", _hoisted_11, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["renderSlot"])(_ctx.$slots, "submit-btn", {
                  vm: $options.vm,
                  canSubmit: $options.canSubmit,
                  color: $props.color,
                  submit: $options.submit,
                  lang: $options.lang
                }, function() {
                  return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])("button", {
                    type: "button",
                    disabled: !$options.canSubmit,
                    style: {
                      color: $props.color
                    },
                    onClick: _cache[14] || (_cache[14] = function() {
                      return $options.submit && $options.submit.apply($options, arguments);
                    }),
                    textContent: Object(external_commonjs_vue_commonjs2_vue_root_Vue_["toDisplayString"])($options.lang.submit)
                  }, null, 12, ["disabled", "textContent"])];
                }), !$props.inline ? Object(external_commonjs_vue_commonjs2_vue_root_Vue_["renderSlot"])(_ctx.$slots, "cancel-btn", Object(external_commonjs_vue_commonjs2_vue_root_Vue_["mergeProps"])({
                  key: 0
                }, {
                  vm: $options.vm,
                  color: $props.color,
                  lang: $options.lang
                }), function() {
                  return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])("button", {
                    type: "button",
                    style: {
                      color: $props.color
                    },
                    onClick: _cache[15] || (_cache[15] = function($event) {
                      return $data.visible = false;
                    }),
                    textContent: Object(external_commonjs_vue_commonjs2_vue_root_Vue_["toDisplayString"])($options.lang.cancel)
                  }, null, 12, ["textContent"])];
                }) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createCommentVNode"])("", true), $props.showNowBtn && $options.canGoToday ? Object(external_commonjs_vue_commonjs2_vue_root_Vue_["renderSlot"])(_ctx.$slots, "now-btn", Object(external_commonjs_vue_commonjs2_vue_root_Vue_["mergeProps"])({
                  key: 1
                }, {
                  vm: $options.vm,
                  color: $props.color,
                  goToday: $options.goToday,
                  lang: $options.lang
                }), function() {
                  return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])("button", {
                    type: "button",
                    style: {
                      color: $props.color
                    },
                    onClick: _cache[16] || (_cache[16] = function() {
                      return $options.goToday && $options.goToday.apply($options, arguments);
                    }),
                    textContent: Object(external_commonjs_vue_commonjs2_vue_root_Vue_["toDisplayString"])($options.lang.now)
                  }, null, 12, ["textContent"])];
                }) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createCommentVNode"])("", true)]))])])], 512)], 10, ["data-type"])) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createCommentVNode"])("", true)];
              }),
              _: 3
            }, 8, ["name"])], 10, ["data-type", "data-placement", "data-locale", "data-locale-dir"]);
          }
          var style = __webpack_require__("4635");
          function Arrowvue_type_template_id_64cd1f1b_render(_ctx, _cache, $props, $setup, $data, $options) {
            return Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])("svg", {
              version: "1.1",
              xmlns: "http://www.w3.org/2000/svg",
              viewBox: "0 0 129 129",
              width: "30",
              height: "30",
              perspectiveAspectRato: "none",
              style: {
                transform: "rotate(".concat($options.rotation, "deg)")
              }
            }, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])("path", {
              fill: $props.fill,
              d: "M88.6 121.3c.8.8 1.8 1.2 2.9 1.2s2.1-.4 2.9-1.2a4.1 4.1 0 0 0 0-5.8l-51-51 51-51a4.1 4.1 0 0 0-5.8-5.8l-54\n      53.9a4.1 4.1 0 0 0 0 5.8l54 53.9z"
            }, null, 8, ["fill"])], 4);
          }
          var Arrowvue_type_script_lang_js = {
            props: {
              fill: {
                type: String,
                default: "#a2a2a2"
              },
              direction: {
                type: String,
                default: "up"
              }
            },
            computed: {
              rotation: function rotation() {
                return {
                  up: 90,
                  left: 0,
                  right: 180,
                  down: -90
                }[this.direction];
              }
            }
          };
          Arrowvue_type_script_lang_js.render = Arrowvue_type_template_id_64cd1f1b_render;
          var Arrow = Arrowvue_type_script_lang_js;
          var TimeIconvue_type_template_id_18ace668_hoisted_1 = Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])("path", {
            d: "M256 8C119 8 8 119 8 256S119 504 256 504 504 393 504 256 393 8 256 8zM313.1 358.1L224.9 294C221.8 291.7 220\n      288.1 220 284.3V116C220 109.4 225.4 104 232 104H280C286.6 104 292 109.4 292 116V253.7L355.5 299.9C360.9 303.8\n      362 311.3 358.1 316.7L329.9 355.5C326 360.8 318.5 362 313.1 358.1z"
          }, null, -1);
          function TimeIconvue_type_template_id_18ace668_render(_ctx, _cache, $props, $setup, $data, $options) {
            return Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])("svg", {
              version: "1.1",
              role: "presentation",
              width: "16",
              height: "16",
              fill: $props.fill,
              viewBox: "0 0 512 512"
            }, [TimeIconvue_type_template_id_18ace668_hoisted_1], 8, ["fill"]);
          }
          var TimeIconvue_type_script_lang_js = {
            props: {
              fill: {
                type: String,
                default: "#f9f9f9"
              }
            }
          };
          TimeIconvue_type_script_lang_js.render = TimeIconvue_type_template_id_18ace668_render;
          var TimeIcon = TimeIconvue_type_script_lang_js;
          var CalendarIconvue_type_template_id_66b1c474_hoisted_1 = Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])("path", {
            d: "M436 160H12C5.4 160 0 154.6 0 148V112C0 85.5 21.5 64 48 64H96V12C96 5.4 101.4 0 108 0H148C154.6 0 160 5.4 160\n      12V64H288V12C288 5.4 293.4 0 300 0H340C346.6 0 352 5.4 352 12V64H400C426.5 64 448 85.5 448 112V148C448 154.6\n      442.6 160 436 160zM12 192H436C442.6 192 448 197.4 448 204V464C448 490.5 426.5 512 400 512H48C21.5 512 0 490.5 0\n      464V204C0 197.4 5.4 192 12 192zM128 396C128 389.4 122.6 384 116 384H76C69.4 384 64 389.4 64 396V436C64 442.6 69.4\n      448 76 448H116C122.6 448 128 442.6 128 436V396zM128 268C128 261.4 122.6 256 116 256H76C69.4 256 64 261.4 64\n      268V308C64 314.6 69.4 320 76 320H116C122.6 320 128 314.6 128 308V268zM256 396C256 389.4 250.6 384 244\n      384H204C197.4 384 192 389.4 192 396V436C192 442.6 197.4 448 204 448H244C250.6 448 256 442.6 256 436V396zM256\n      268C256 261.4 250.6 256 244 256H204C197.4 256 192 261.4 192 268V308C192 314.6 197.4 320 204 320H244C250.6 320 256\n      314.6 256 308V268zM384 396C384 389.4 378.6 384 372 384H332C325.4 384 320 389.4 320 396V436C320 442.6 325.4 448\n      332 448H372C378.6 448 384 442.6 384 436V396zM384 268C384 261.4 378.6 256 372 256H332C325.4 256 320 261.4 320\n      268V308C320 314.6 325.4 320 332 320H372C378.6 320 384 314.6 384 308V268z"
          }, null, -1);
          function CalendarIconvue_type_template_id_66b1c474_render(_ctx, _cache, $props, $setup, $data, $options) {
            return Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])("svg", {
              version: "1.1",
              width: "14",
              height: "16",
              viewBox: "0 0 448 512",
              xmlns: "http://www.w3.org/2000/svg",
              fill: $props.fill
            }, [CalendarIconvue_type_template_id_66b1c474_hoisted_1], 8, ["fill"]);
          }
          var CalendarIconvue_type_script_lang_js = {
            props: {
              fill: {
                type: String,
                default: "#f9f9f9"
              }
            }
          };
          CalendarIconvue_type_script_lang_js.render = CalendarIconvue_type_template_id_66b1c474_render;
          var CalendarIcon = CalendarIconvue_type_script_lang_js;
          function LocaleChangevue_type_template_id_c540a4ec_render(_ctx, _cache, $props, $setup, $data, $options) {
            return Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])("ul", null, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])("li", {
              onClick: _cache[1] || (_cache[1] = function($event) {
                return _ctx.$emit("change", $options.activeItem);
              }),
              textContent: Object(external_commonjs_vue_commonjs2_vue_root_Vue_["toDisplayString"])($options.label)
            }, null, 8, ["textContent"])]);
          }
          var LocaleChangevue_type_script_lang_js = {
            name: "LocaleChange",
            props: {
              locales: {
                type: Array,
                default: function _default() {
                  return [];
                }
              },
              core: {
                type: Object,
                default: function _default() {
                  return {};
                }
              },
              localeData: {
                type: Object,
                default: function _default() {
                  return {};
                }
              }
            },
            emits: ["change"],
            computed: {
              activeItem: function activeItem() {
                var activeIndex = this.locales.indexOf(this.localeData.name) + 1;
                if (activeIndex === this.locales.length) activeIndex = 0;
                return String(this.locales[activeIndex]);
              },
              label: function label() {
                return this.core.localesConfig[this.activeItem].lang.label || this.activeItem.toUpperCase();
              }
            }
          };
          LocaleChangevue_type_script_lang_js.render = LocaleChangevue_type_template_id_c540a4ec_render;
          var LocaleChange = LocaleChangevue_type_script_lang_js;
          var TimeSectionvue_type_template_id_eaee77d4_hoisted_1 = {
            class: "vpd-addon-list-content"
          };
          function TimeSectionvue_type_template_id_eaee77d4_render(_ctx, _cache, $props, $setup, $data, $options) {
            var _component_time_column = Object(external_commonjs_vue_commonjs2_vue_root_Vue_["resolveComponent"])("time-column");
            return Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])("div", {
              class: ["vpd-addon-list vpd-time", {
                "vpd-disabled": $props.isDisableTime
              }]
            }, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])("div", TimeSectionvue_type_template_id_eaee77d4_hoisted_1, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])(_component_time_column, {
              ref: "hour",
              modelValue: $options.hourModel,
              "onUpdate:modelValue": _cache[1] || (_cache[1] = function($event) {
                return $options.hourModel = $event;
              }),
              class: "vpd-time-h",
              attributes: $options.timeAttributes,
              formatter: $props.convertToLocaleNumber,
              onFilled: $options.focusNext
            }, null, 8, ["modelValue", "attributes", "formatter", "onFilled"]), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])(_component_time_column, {
              ref: "minute",
              modelValue: $options.minuteModel,
              "onUpdate:modelValue": _cache[2] || (_cache[2] = function($event) {
                return $options.minuteModel = $event;
              }),
              class: "vpd-time-m",
              jump: $props.jumpMinute,
              attributes: $options.timeAttributes,
              formatter: $props.convertToLocaleNumber
            }, null, 8, ["modelValue", "jump", "attributes", "formatter"])])], 2);
          }
          function TimeColumnvue_type_template_id_13b8ce82_render(_ctx, _cache, $props, $setup, $data, $options) {
            var _component_arrow = Object(external_commonjs_vue_commonjs2_vue_root_Vue_["resolveComponent"])("arrow");
            var _component_btn = Object(external_commonjs_vue_commonjs2_vue_root_Vue_["resolveComponent"])("btn");
            return Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])("div", {
              class: ["vpd-time-column", $data.classFastCounter]
            }, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])(_component_btn, {
              class: "vpd-up-arrow-btn",
              onUpdate: _cache[1] || (_cache[1] = function($event) {
                return $options.update(1);
              }),
              onFastUpdate: $options.fastUpdateCounter
            }, {
              default: Object(external_commonjs_vue_commonjs2_vue_root_Vue_["withCtx"])(function() {
                return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])(_component_arrow, {
                  width: "20",
                  direction: "up"
                })];
              }),
              _: 1
            }, 8, ["onFastUpdate"]), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])("div", {
              class: ["vpd-counter", [$data.directionClass, {
                "vpd-is-focused": $data.isInputFocused
              }]],
              onMousewheel: _cache[9] || (_cache[9] = Object(external_commonjs_vue_commonjs2_vue_root_Vue_["withModifiers"])(function($event) {
                return $options.wheelUpdate($event);
              }, ["stop", "prevent"])),
              onDOMMouseScroll: _cache[10] || (_cache[10] = Object(external_commonjs_vue_commonjs2_vue_root_Vue_["withModifiers"])(function($event) {
                return $options.wheelUpdate($event);
              }, ["stop", "prevent"]))
            }, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["withDirectives"])(Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])("input", {
              ref: "input",
              "onUpdate:modelValue": _cache[2] || (_cache[2] = function($event) {
                return $data.inputValue = $event;
              }),
              type: "tel",
              maxlength: _ctx.selfValue.length,
              class: {
                "is-empty": !$data.inputValue.length
              },
              onInput: _cache[3] || (_cache[3] = function() {
                return $options.onInputChange && $options.onInputChange.apply($options, arguments);
              }),
              onFocus: _cache[4] || (_cache[4] = function($event) {
                return $data.isInputFocused = true;
              }),
              onBlur: _cache[5] || (_cache[5] = function($event) {
                return $data.isInputFocused = false;
              }),
              onKeydown: [_cache[6] || (_cache[6] = Object(external_commonjs_vue_commonjs2_vue_root_Vue_["withKeys"])(Object(external_commonjs_vue_commonjs2_vue_root_Vue_["withModifiers"])(function($event) {
                return $options.update(1);
              }, ["prevent"]), ["up"])), _cache[7] || (_cache[7] = Object(external_commonjs_vue_commonjs2_vue_root_Vue_["withKeys"])(Object(external_commonjs_vue_commonjs2_vue_root_Vue_["withModifiers"])(function($event) {
                return $options.update(-1);
              }, ["prevent"]), ["down"])), _cache[8] || (_cache[8] = Object(external_commonjs_vue_commonjs2_vue_root_Vue_["withKeys"])(Object(external_commonjs_vue_commonjs2_vue_root_Vue_["withModifiers"])(function() {
                return $options.onInputSubmit && $options.onInputSubmit.apply($options, arguments);
              }, ["prevent"]), ["enter"]))]
            }, null, 42, ["maxlength"]), [[external_commonjs_vue_commonjs2_vue_root_Vue_["vModelText"], $data.inputValue]]), (Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(true), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])(external_commonjs_vue_commonjs2_vue_root_Vue_["Fragment"], null, Object(external_commonjs_vue_commonjs2_vue_root_Vue_["renderList"])(_ctx.modelValue.toString().split(""), function(item, i) {
              return Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])("div", Object(external_commonjs_vue_commonjs2_vue_root_Vue_["mergeProps"])({
                key: "h__".concat(i),
                class: "vpd-counter-item"
              }, $props.attributes), [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])(external_commonjs_vue_commonjs2_vue_root_Vue_["Transition"], {
                name: "slideY"
              }, {
                default: Object(external_commonjs_vue_commonjs2_vue_root_Vue_["withCtx"])(function() {
                  return [(Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])("span", {
                    key: "".concat(item, "__").concat(i, "_h"),
                    style: {
                      transition: "all " + $data.transitionSpeed + "ms ease-in-out"
                    },
                    textContent: Object(external_commonjs_vue_commonjs2_vue_root_Vue_["toDisplayString"])($props.formatter(item))
                  }, null, 12, ["textContent"]))];
                }),
                _: 2
              }, 1024)], 16);
            }), 128))], 34), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])(_component_btn, {
              class: "vpd-down-arrow-btn",
              onUpdate: _cache[11] || (_cache[11] = function($event) {
                return $options.update(-1);
              }),
              onFastUpdate: $options.fastUpdateCounter
            }, {
              default: Object(external_commonjs_vue_commonjs2_vue_root_Vue_["withCtx"])(function() {
                return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])(_component_arrow, {
                  width: "20",
                  direction: "down"
                })];
              }),
              _: 1
            }, 8, ["onFastUpdate"])], 2);
          }
          function Btnvue_type_template_id_2ca2ab3f_render(_ctx, _cache, $props, $setup, $data, $options) {
            return Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])("div", {
              onMousedown: _cache[1] || (_cache[1] = function() {
                return $options.down && $options.down.apply($options, arguments);
              }),
              onTouchstart: _cache[2] || (_cache[2] = function() {
                return $options.down && $options.down.apply($options, arguments);
              }),
              onMouseup: _cache[3] || (_cache[3] = function() {
                return $options.click && $options.click.apply($options, arguments);
              })
            }, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["renderSlot"])(_ctx.$slots, "default")], 32);
          }
          var Btnvue_type_script_lang_js = {
            name: "Btn",
            emits: ["update", "fastUpdate"],
            data: function data() {
              return {
                interval: false,
                timeout: false,
                intervalDelay: 150
              };
            },
            mounted: function mounted() {
              var _this = this;
              document.addEventListener("mouseup", function() {
                if (_this.timeout || _this.interval) _this.up();
              });
              document.addEventListener("touchend", function() {
                if (_this.timeout || _this.interval) _this.up();
              });
            },
            methods: {
              click: function click() {
                if (!this.interval) {
                  this.$emit("update", 1);
                }
              },
              down: function down() {
                var _this2 = this;
                window.clearTimeout(this.timeout);
                window.clearInterval(this.interval);
                this.interval = false;
                this.timeout = window.setTimeout(function() {
                  _this2.intervalFn();
                }, 600);
              },
              up: function up() {
                window.clearTimeout(this.timeout);
                window.clearInterval(this.interval);
                this.$emit("fastUpdate", false);
                this.timeout = false;
                this.interval = false;
                this.intervalDelay = 150;
              },
              intervalFn: function intervalFn() {
                var _this3 = this;
                this.interval = window.setTimeout(function() {
                  _this3.$emit("update", 1);
                  _this3.$emit("fastUpdate", true);
                  _this3.intervalFn();
                  if (_this3.intervalDelay > 30) _this3.intervalDelay -= 3;
                }, this.intervalDelay);
              }
            }
          };
          Btnvue_type_script_lang_js.render = Btnvue_type_template_id_2ca2ab3f_render;
          var Btn = Btnvue_type_script_lang_js;
          function _typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              _typeof = function _typeof2(obj2) {
                return typeof obj2;
              };
            } else {
              _typeof = function _typeof2(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return _typeof(obj);
          }
          var utils_toString = Object.prototype.toString, utils_hasOwnProperty = Object.prototype.hasOwnProperty;
          var tools = {
            isFunction: function isFunction2(obj) {
              return utils_toString.call(obj) === "[object Function]";
            },
            isArray: function isArray2(obj) {
              return utils_toString.call(obj) === "[object Array]";
            },
            isPlainObject: function isPlainObject(obj) {
              if (!obj || utils_toString.call(obj) !== "[object Object]" || obj.nodeType || obj.setInterval) {
                return false;
              }
              if (obj.constructor && !utils_hasOwnProperty.call(obj, "constructor") && !utils_hasOwnProperty.call(obj.constructor.prototype, "isPrototypeOf")) {
                return false;
              }
              var key;
              for (key in obj) {
                ;
              }
              return key === void 0 || utils_hasOwnProperty.call(obj, key);
            }
          };
          var extend2 = function extend3() {
            var options, name, src2, copy, copyIsArray, clone3, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
            if (typeof target === "boolean") {
              deep = target;
              target = arguments[1] || {};
              i = 2;
            }
            if (_typeof(target) !== "object" && !tools.isFunction(target)) {
              target = {};
            }
            if (length === i) {
              target = this;
              --i;
            }
            for (; i < length; i++) {
              if ((options = arguments[i]) !== null) {
                for (name in options) {
                  src2 = target[name];
                  copy = options[name];
                  if (target === copy) {
                    continue;
                  }
                  if (deep && copy && (tools.isPlainObject(copy) || (copyIsArray = tools.isArray(copy)))) {
                    if (copyIsArray) {
                      copyIsArray = false;
                      clone3 = src2 && tools.isArray(src2) ? src2 : [];
                    } else {
                      clone3 = src2 && tools.isPlainObject(src2) ? src2 : {};
                    }
                    target[name] = extend3(deep, clone3, copy);
                  } else if (copy !== void 0) {
                    target[name] = copy;
                  }
                }
              }
            }
            return target;
          };
          var cloneDates = function cloneDates2(arr) {
            return arr.map(function(d) {
              return d.clone();
            });
          };
          var isSameDay = function isSameDay2(a, b) {
            a = a.clone().set({
              h: 12,
              m: 0
            });
            return Math.abs(a.diff(b, "hours")) < 20;
          };
          var clone2 = function clone3(obj) {
            return JSON.parse(JSON.stringify(obj));
          };
          var scrollIntoCenter = function scrollIntoCenter2(element) {
            var duration = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 200;
            var callback = arguments.length > 2 ? arguments[2] : void 0;
            var parent = element.parentNode;
            var startingTop = parent.scrollTop;
            var parentCenter = parent.offsetHeight / 2;
            var elementCenter = element.offsetHeight / 2;
            var distance = element.offsetTop - startingTop - parentCenter + elementCenter;
            var start;
            var done = function done2() {
              if (typeof callback === "function") {
                callback();
              }
            };
            if (!duration) {
              parent.scrollTo(0, startingTop + distance);
              done();
              return;
            }
            window.requestAnimationFrame(function step(timestamp) {
              if (!start) start = timestamp;
              var time = timestamp - start;
              var percent = Math.min(time / duration, 1);
              parent.scrollTo(0, startingTop + distance * percent);
              if (time < duration) {
                window.requestAnimationFrame(step);
              } else {
                done();
              }
            });
          };
          var addEventListener = function addEventListener2(el, type, handler) {
            if (typeof el === "string") el = document.querySelector(el);
            if (!el) throw new Error("Cant find custom element: " + el);
            if (el.addEventListener) el.addEventListener(type, handler, true);
            else el.attachEvent("on" + type, handler, true);
          };
          var addLiveEvent = function addLiveEvent2(selector, event2, callback, context) {
            addEventListener(context || document, event2, function(e) {
              if (e.target.closest(selector)) callback.call(e.target, e);
            });
          };
          var utils = {
            extend: extend2,
            clone: clone2
          };
          var modelMixin = {
            props: {
              modelValue: {
                type: [String, Number, Array, Object, Boolean],
                default: ""
              }
            },
            emits: ["update:modelValue"],
            data: function data() {
              return {
                selfValue: ""
              };
            },
            watch: {
              modelValue: {
                handler: function handler(val) {
                  if (this.selfValue !== val) this.selfValue = val;
                },
                immediate: true,
                deep: true
              },
              selfValue: function selfValue(val) {
                if (val !== this.modelValue) this.$emit("update:modelValue", val);
              }
            }
          };
          var popupRouteChanger = {
            data: function data() {
              return {
                routerQueryName: null
              };
            },
            mounted: function mounted() {
              this.initRouter();
            },
            methods: {
              initRouter: function initRouter() {
                var _this = this;
                var isSet = function isSet2(prop) {
                  return prop || typeof prop === "string";
                };
                var useRouter = this.useRouter;
                if (!isSet(useRouter) || this.isPopover || this.inline || !this.$router) return;
                this.$watch("visible", this.onVisibleChange);
                this.$watch(function() {
                  return _this.$route.query;
                }, this.onRouteChange, {
                  deep: true,
                  immediate: true
                });
                this.routerQueryName = typeof useRouter === "string" && useRouter ? useRouter : this.id;
              },
              onVisibleChange: function onVisibleChange(visible) {
                var currentRoute = this.$route;
                var query = clone2(currentRoute.query || {});
                if (visible) {
                  query[this.routerQueryName] = "active";
                  this.$router.push({
                    query
                  });
                } else if (query[this.routerQueryName]) {
                  this.$router.back();
                }
              },
              onRouteChange: function onRouteChange() {
                var visible = !!this.$route.query[this.routerQueryName];
                if (visible && this.disabled) return;
                this.visible = visible;
              }
            }
          };
          var TimeColumnvue_type_script_lang_js = {
            name: "TimeColumn",
            components: {
              Btn,
              Arrow
            },
            mixins: [modelMixin],
            props: {
              jump: {
                type: Number,
                default: 1
              },
              formatter: {
                type: Function,
                default: null
              },
              attributes: {
                type: Object,
                default: function _default() {
                  return {};
                }
              }
            },
            emits: ["filled"],
            data: function data() {
              return {
                directionClass: "direction-next",
                classFastCounter: "",
                transitionSpeed: 300,
                timeout: false,
                lastUpdate: (/* @__PURE__ */ new Date()).getTime(),
                isInputFocused: false,
                inputValue: ""
              };
            },
            watch: {
              selfValue: {
                handler: function handler(val, old) {
                  var _this = this;
                  if (old) this.setDirection(val, old);
                  this.inputValue = this.selfValue;
                  this.$nextTick(function() {
                    if (_this.modelValue.toString() !== _this.selfValue.toString()) _this.selfValue = _this.modelValue;
                  });
                },
                immediate: true
              },
              isInputFocused: function isInputFocused(focused) {
                var _this2 = this;
                if (focused) {
                  this.inputValue = this.selfValue;
                  this.$nextTick(function() {
                    _this2.$refs.input.select();
                  });
                } else if (this.inputValue) {
                  this.onInputSubmit();
                }
              }
            },
            methods: {
              update: function update(value) {
                var _this3 = this;
                this.selfValue = +this.selfValue + value * this.jump;
                var now2 = (/* @__PURE__ */ new Date()).getTime(), def = now2 - this.lastUpdate;
                if (20 < def && def < 300) this.transitionSpeed = def;
                this.lastUpdate = now2;
                window.clearTimeout(this.timeout);
                this.timeout = window.setTimeout(function() {
                  _this3.transitionSpeed = 300;
                }, 300);
              },
              wheelUpdate: function wheelUpdate(e) {
                var delta = this.jump;
                var goUp = (e.wheelDeltaY || -e.detail) > 0;
                this.update(goUp ? delta : -delta);
              },
              fastUpdateCounter: function fastUpdateCounter(e) {
                if (!e) this.transitionSpeed = 300;
                this.classFastCounter = e ? "fast-updating" : "";
              },
              setDirection: function setDirection(val, old) {
                if (val * 1 === old * 1) return;
                this.directionClass = val > old ? "direction-next" : "direction-prev";
              },
              onInputSubmit: function onInputSubmit() {
                this.selfValue = this.inputValue;
                this.transitionSpeed = 0;
              },
              onInputChange: function onInputChange(event2) {
                if (event2.target.value.length >= this.selfValue.length) this.$emit("filled");
              }
            }
          };
          TimeColumnvue_type_script_lang_js.render = TimeColumnvue_type_template_id_13b8ce82_render;
          var TimeColumn = TimeColumnvue_type_script_lang_js;
          var TimeSectionvue_type_script_lang_js = {
            name: "TimeSection",
            components: {
              TimeColumn
            },
            props: {
              date: {
                type: Object,
                default: function _default() {
                  return {};
                }
              },
              time: {
                type: Object,
                default: function _default() {
                  return {};
                }
              },
              jumpMinute: {
                type: Number,
                default: 1
              },
              roundMinute: {
                type: Boolean,
                default: false
              },
              isDisableTime: {
                type: Boolean,
                default: false
              },
              getHighlights: {
                type: Function,
                default: null
              },
              isMore: {
                type: Function,
                default: null
              },
              isLower: {
                type: Function,
                default: null
              },
              minDate: {
                type: [Object, Boolean],
                default: false
              },
              maxDate: {
                type: [Object, Boolean],
                default: false
              },
              selectedDates: {
                type: Array,
                default: function _default() {
                  return [];
                }
              },
              convertToLocaleNumber: {
                type: Function,
                default: null
              }
            },
            emits: ["update:date", "update:time"],
            computed: {
              timeAttributes: function timeAttributes() {
                return this.getHighlights("t", this.time);
              },
              hourModel: {
                get: function get2() {
                  return this.time.format("HH");
                },
                set: function set2(val) {
                  this.setTime(val, "hours");
                }
              },
              minuteModel: {
                get: function get2() {
                  return this.time.format("mm");
                },
                set: function set2(val) {
                  this.setTime(val, "minutes");
                }
              }
            },
            watch: {
              time: {
                handler: function handler() {
                  if (this.roundMinute) {
                    var time = this.time.clone();
                    var jm = this.jumpMinute;
                    var m = (jm - time.minute() % jm) % jm;
                    time.add({
                      m
                    });
                    if (time.valueOf() !== this.time.valueOf()) {
                      this.$emit("update:time", time);
                      this.selectedDates.forEach(function(d) {
                        return d.set({
                          m: time.minute()
                        });
                      });
                    }
                  }
                },
                immediate: true
              }
            },
            methods: {
              setTime: function setTime(v, k) {
                var time = this.time.clone();
                time.set(k, v);
                if (this.type !== "time") {
                  var date = this.date.clone();
                  time.set({
                    year: date.year(),
                    month: date.month(),
                    date: date.date()
                  });
                  date.set({
                    hour: time.hour(),
                    minute: time.minute()
                  });
                  this.$emit("update:date", date);
                }
                if (this.isLower(time)) time = this.minDate.clone();
                if (this.isMore(time)) time = this.maxDate.clone();
                this.$emit("update:time", time);
              },
              focusNext: function focusNext() {
                this.$refs.minute.$el.querySelector("input").focus();
              }
            }
          };
          TimeSectionvue_type_script_lang_js.render = TimeSectionvue_type_template_id_eaee77d4_render;
          var TimeSection = TimeSectionvue_type_script_lang_js;
          var SimpleModevue_type_template_id_c05f7324_hoisted_1 = {
            class: "vpd-simple-body"
          };
          function SimpleModevue_type_template_id_c05f7324_render(_ctx, _cache, $props, $setup, $data, $options) {
            var _component_locale_change = Object(external_commonjs_vue_commonjs2_vue_root_Vue_["resolveComponent"])("locale-change");
            var _component_simple_mode_column = Object(external_commonjs_vue_commonjs2_vue_root_Vue_["resolveComponent"])("simple-mode-column");
            return Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])("div", SimpleModevue_type_template_id_c05f7324_hoisted_1, [$options.showHeader ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])("div", {
              key: 0,
              class: "vpd-header",
              style: {
                "background-color": $props.color
              }
            }, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])("div", null, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["renderSlot"])(_ctx.$slots, "header-date", {
              vm: $data.vm,
              formattedDate: $props.formattedDate
            }, function() {
              return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createTextVNode"])(Object(external_commonjs_vue_commonjs2_vue_root_Vue_["toDisplayString"])($props.convertToLocaleNumber($props.formattedDate)), 1)];
            })]), $props.locales.length > 1 ? Object(external_commonjs_vue_commonjs2_vue_root_Vue_["renderSlot"])(_ctx.$slots, "locales", Object(external_commonjs_vue_commonjs2_vue_root_Vue_["mergeProps"])({
              key: 0
            }, {
              vm: $data.vm,
              locales: $props.locales,
              setLocale: $props.setLocale
            }), function() {
              return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])(_component_locale_change, {
                "locale-data": $props.core.locale,
                core: $props.core,
                locales: $props.locales,
                class: "vpd-locales",
                onChange: $props.setLocale
              }, null, 8, ["locale-data", "core", "locales", "onChange"])];
            }) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createCommentVNode"])("", true)], 4)) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createCommentVNode"])("", true), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])("div", {
              class: "vpd-simple-content",
              onMouseleave: _cache[1] || (_cache[1] = function($event) {
                return _ctx.$emit("update:hovered-item", null);
              })
            }, [$props.hasStep("y") ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])(_component_simple_mode_column, {
              key: 0,
              label: $props.lang.year,
              value: $options.selectedYear,
              locale: $props.core.locale.name
            }, {
              default: Object(external_commonjs_vue_commonjs2_vue_root_Vue_["withCtx"])(function() {
                return [(Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(true), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])(external_commonjs_vue_commonjs2_vue_root_Vue_["Fragment"], null, Object(external_commonjs_vue_commonjs2_vue_root_Vue_["renderList"])($props.years, function(year, yi) {
                  return Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])("div", Object(external_commonjs_vue_commonjs2_vue_root_Vue_["mergeProps"])({
                    key: yi
                  }, year.attributes, {
                    class: ["vpd-addon-list-item", {
                      "vpd-selected": year.selected
                    }, year.attributes.class],
                    style: [{
                      color: year.selected ? $props.color : ""
                    }, year.attributes.style],
                    disabled: year.disabled,
                    onClick: function onClick($event) {
                      return _ctx.$emit("select-year", year);
                    }
                  }), [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["renderSlot"])(_ctx.$slots, "year-item", {
                    vm: $data.vm,
                    year,
                    color: $props.color
                  }, function() {
                    return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createTextVNode"])(Object(external_commonjs_vue_commonjs2_vue_root_Vue_["toDisplayString"])($props.convertToLocaleNumber(year.xFormat("jYYYY"))), 1)];
                  })], 16, ["disabled", "onClick"]);
                }), 128))];
              }),
              _: 3
            }, 8, ["label", "value", "locale"])) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createCommentVNode"])("", true), $props.hasStep("m") ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])(_component_simple_mode_column, {
              key: 1,
              label: $props.lang.month,
              value: $options.selectedMonth,
              locale: $props.core.locale.name
            }, {
              default: Object(external_commonjs_vue_commonjs2_vue_root_Vue_["withCtx"])(function() {
                return [(Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(true), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])(external_commonjs_vue_commonjs2_vue_root_Vue_["Fragment"], null, Object(external_commonjs_vue_commonjs2_vue_root_Vue_["renderList"])($props.months, function(month, mi) {
                  return Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])("div", Object(external_commonjs_vue_commonjs2_vue_root_Vue_["mergeProps"])({
                    key: mi
                  }, month.attributes, {
                    class: ["vpd-addon-list-item", {
                      "vpd-selected": month.selected
                    }, month.attributes.class],
                    disabled: month.disabled,
                    style: [{
                      color: month.selected ? $props.color : ""
                    }, month.attributes.style],
                    onClick: function onClick($event) {
                      return _ctx.$emit("select-month", month);
                    }
                  }), [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["renderSlot"])(_ctx.$slots, "month-item", {
                    vm: $data.vm,
                    monthItem: month,
                    color: $props.color
                  }, function() {
                    return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createTextVNode"])(Object(external_commonjs_vue_commonjs2_vue_root_Vue_["toDisplayString"])(month.xFormat("jMMMM")), 1)];
                  })], 16, ["disabled", "onClick"]);
                }), 128))];
              }),
              _: 3
            }, 8, ["label", "value", "locale"])) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createCommentVNode"])("", true), $props.hasStep("d") ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])(_component_simple_mode_column, {
              key: 2,
              label: $props.lang.day,
              value: $options.selectedDay,
              locale: $props.core.locale.name
            }, {
              default: Object(external_commonjs_vue_commonjs2_vue_root_Vue_["withCtx"])(function() {
                return [(Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(true), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])(external_commonjs_vue_commonjs2_vue_root_Vue_["Fragment"], null, Object(external_commonjs_vue_commonjs2_vue_root_Vue_["renderList"])($options.days, function(day, di) {
                  return Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])("div", Object(external_commonjs_vue_commonjs2_vue_root_Vue_["mergeProps"])({
                    key: di,
                    class: ["vpd-addon-list-item", {
                      "vpd-selected": day.selected,
                      "vpd-empty": day.date == null,
                      "vpd-range-first": day.isFirst,
                      "vpd-range-last": day.isLast,
                      "vpd-range-between": day.isBetween,
                      "vpd-range-hover": $props.hoveredItem && day.isHover
                    }, day.attributes.class]
                  }, day.attributes, {
                    style: [{
                      color: day.selected || day.isBetween ? $props.color : ""
                    }, day.attributes.style],
                    disabled: day.disabled,
                    onClick: function onClick($event) {
                      return _ctx.$emit("select-day", day);
                    },
                    onMouseover: function onMouseover($event) {
                      return _ctx.$emit("update:hovered-item", day.date);
                    }
                  }), [day.date != null ? Object(external_commonjs_vue_commonjs2_vue_root_Vue_["renderSlot"])(_ctx.$slots, "day-item", Object(external_commonjs_vue_commonjs2_vue_root_Vue_["mergeProps"])({
                    key: 0
                  }, {
                    vm: $data.vm,
                    day,
                    color: $props.color
                  }), function() {
                    return [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createTextVNode"])(Object(external_commonjs_vue_commonjs2_vue_root_Vue_["toDisplayString"])($props.convertToLocaleNumber(day.formatted)), 1)];
                  }) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createCommentVNode"])("", true)], 16, ["disabled", "onClick", "onMouseover"]);
                }), 128))];
              }),
              _: 3
            }, 8, ["label", "value", "locale"])) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createCommentVNode"])("", true)], 32)]);
          }
          var SimpleModeColumnvue_type_template_id_0bd5271a_hoisted_1 = {
            ref: "content",
            class: "vpd-column-content"
          };
          function SimpleModeColumnvue_type_template_id_0bd5271a_render(_ctx, _cache, $props, $setup, $data, $options) {
            return Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])("div", {
              class: ["vpd-column", {
                "vpd-is-mounted": $data.isMounted
              }],
              onMousewheel: _cache[1] || (_cache[1] = Object(external_commonjs_vue_commonjs2_vue_root_Vue_["withModifiers"])(function() {
              }, ["stop"]))
            }, [$props.label ? (Object(external_commonjs_vue_commonjs2_vue_root_Vue_["openBlock"])(), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createBlock"])("div", {
              key: 0,
              class: "vpd-column-header",
              textContent: Object(external_commonjs_vue_commonjs2_vue_root_Vue_["toDisplayString"])($props.label)
            }, null, 8, ["textContent"])) : Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createCommentVNode"])("", true), Object(external_commonjs_vue_commonjs2_vue_root_Vue_["createVNode"])("div", SimpleModeColumnvue_type_template_id_0bd5271a_hoisted_1, [Object(external_commonjs_vue_commonjs2_vue_root_Vue_["renderSlot"])(_ctx.$slots, "default")], 512)], 34);
          }
          var SimpleModeColumnvue_type_script_lang_js = {
            name: "SimpleModeColumn",
            props: {
              label: {
                type: String,
                default: null
              },
              locale: {
                type: String,
                default: null
              },
              value: {
                type: [String, Number],
                default: null
              }
            },
            data: function data() {
              return {
                isMounted: false
              };
            },
            watch: {
              value: function value() {
                this.scrollIntoView(200);
              },
              locale: function locale2() {
                this.scrollIntoView(200);
              }
            },
            mounted: function mounted() {
              this.scrollIntoView(0);
            },
            methods: {
              scrollIntoView: function scrollIntoView(duration) {
                var _this = this;
                try {
                  this.isMounted = false;
                  this.$nextTick(function() {
                    var activeElement = _this.$refs.content.querySelector(".vpd-selected") || _this.$refs.content.querySelector(".vpd-addon-list-item:not([disabled])");
                    if (activeElement) scrollIntoCenter(activeElement, duration, function() {
                      _this.isMounted = true;
                    });
                  });
                } catch (e) {
                  console.warn(e);
                }
              }
            }
          };
          SimpleModeColumnvue_type_script_lang_js.render = SimpleModeColumnvue_type_template_id_0bd5271a_render;
          var SimpleModeColumn = SimpleModeColumnvue_type_script_lang_js;
          var SimpleModevue_type_script_lang_js = {
            name: "SimpleMode",
            components: {
              LocaleChange,
              SimpleModeColumn
            },
            props: {
              visible: {
                type: Boolean,
                default: false
              },
              multiple: {
                type: Boolean,
                default: false
              },
              range: {
                type: Boolean,
                default: false
              },
              lang: {
                type: Object,
                default: null
              },
              color: {
                type: String,
                default: null
              },
              hasStep: {
                type: Function,
                default: null
              },
              years: {
                type: Array,
                default: function _default() {
                  return [];
                }
              },
              months: {
                type: Array,
                default: function _default() {
                  return [];
                }
              },
              monthDays: {
                type: Array,
                default: function _default() {
                  return [];
                }
              },
              selectedDates: {
                type: Array,
                default: function _default() {
                  return [];
                }
              },
              formattedDate: {
                type: String,
                default: null
              },
              hoveredItem: {
                type: Date,
                default: null
              },
              locales: {
                type: Array,
                default: function _default() {
                  return [];
                }
              },
              core: {
                type: Object,
                default: null
              },
              setLocale: {
                type: Function,
                default: null
              },
              convertToLocaleNumber: {
                type: Function,
                default: null
              }
            },
            emits: ["select-day", "update:hovered-item", "select-month", "select-year"],
            data: function data() {
              return {
                vm: this
              };
            },
            computed: {
              days: function days2() {
                var days3 = [];
                this.monthDays.forEach(function(week) {
                  week.forEach(function(day) {
                    if (day.date) days3.push(day);
                  });
                });
                return days3;
              },
              selectedYear: function selectedYear() {
                var year = this.years.find(function(year2) {
                  return year2.selected;
                });
                return year ? year.xFormat("YYYY") : "";
              },
              selectedMonth: function selectedMonth() {
                var month = this.months.find(function(month2) {
                  return month2.selected;
                });
                return month ? month.xFormat("MM") : "";
              },
              selectedDay: function selectedDay() {
                var day = this.days.find(function(day2) {
                  return day2.selected;
                }) || {};
                return day && day.date ? day.date.getDate() : "";
              },
              showHeader: function showHeader() {
                var selectedDatesLength = this.selectedDates.length;
                return this.locales.length > 1 || selectedDatesLength > 1 || this.range && selectedDatesLength || this.multiple && selectedDatesLength;
              }
            }
          };
          SimpleModevue_type_script_lang_js.render = SimpleModevue_type_template_id_c05f7324_render;
          var SimpleMode = SimpleModevue_type_script_lang_js;
          var external_moment_ = __webpack_require__("c32d");
          var external_moment_default = __webpack_require__.n(external_moment_);
          var external_moment_jalaali_ = __webpack_require__("b9b3");
          var external_moment_jalaali_default = __webpack_require__.n(external_moment_jalaali_);
          var symbolMap = {
            "1": "۱",
            "2": "۲",
            "3": "۳",
            "4": "۴",
            "5": "۵",
            "6": "۶",
            "7": "۷",
            "8": "۸",
            "9": "۹",
            "0": "۰"
          }, numberMap = {
            "۱": "1",
            "۲": "2",
            "۳": "3",
            "۴": "4",
            "۵": "5",
            "۶": "6",
            "۷": "7",
            "۸": "8",
            "۹": "9",
            "۰": "0"
          };
          var moment_locale_fa = {
            months: "ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),
            monthsShort: "ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),
            weekdays: "یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),
            weekdaysShort: "یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),
            weekdaysMin: "ی_د_س_چ_پ_ج_ش".split("_"),
            weekdaysParseExact: true,
            longDateFormat: {
              LT: "HH:mm",
              LTS: "HH:mm:ss",
              L: "DD/MM/YYYY",
              LL: "D MMMM YYYY",
              LLL: "D MMMM YYYY HH:mm",
              LLLL: "dddd, D MMMM YYYY HH:mm"
            },
            meridiemParse: /قبل از ظهر|بعد از ظهر/,
            isPM: function isPM(input) {
              return /بعد از ظهر/.test(input);
            },
            meridiem: function meridiem2(hour) {
              if (hour < 12) {
                return "قبل از ظهر";
              } else {
                return "بعد از ظهر";
              }
            },
            calendar: {
              sameDay: "[امروز ساعت] LT",
              nextDay: "[فردا ساعت] LT",
              nextWeek: "dddd [ساعت] LT",
              lastDay: "[دیروز ساعت] LT",
              lastWeek: "dddd [پیش] [ساعت] LT",
              sameElse: "L"
            },
            relativeTime: {
              future: "در %s",
              past: "%s پیش",
              s: "چند ثانیه",
              ss: "ثانیه d%",
              m: "یک دقیقه",
              mm: "%d دقیقه",
              h: "یک ساعت",
              hh: "%d ساعت",
              d: "یک روز",
              dd: "%d روز",
              M: "یک ماه",
              MM: "%d ماه",
              y: "یک سال",
              yy: "%d سال"
            },
            preparse: function preparse(string) {
              return string.replace(/[۰-۹]/g, function(match) {
                return numberMap[match];
              }).replace(/،/g, ",");
            },
            postformat: function postformat(string) {
              return string.replace(/\d/g, function(match) {
                return symbolMap[match];
              }).replace(/,/g, "،");
            },
            dayOfMonthOrdinalParse: /\d{1,2}م/,
            ordinal: "%dم",
            week: {
              dow: 6,
              // Saturday is the first day of the week.
              doy: 12
              // The week that contains Jan 1st is the first week of the year.
            }
          };
          external_moment_jalaali_default.a.updateLocale("en", {
            weekdaysMin: "S_M_T_W_T_F_S".split("_")
          });
          external_moment_jalaali_default.a.updateLocale("fa", moment_locale_fa);
          external_moment_jalaali_default.a.loadPersian({
            dialect: "persian-modern"
          });
          external_moment_jalaali_default.a.daysInMonth = function(year, month) {
            return external_moment_jalaali_default()({
              year,
              month
            }).daysInMonth();
          };
          var localMethods = {
            fa: {
              daysInMonth: "jDaysInMonth",
              year: "jYear",
              month: "jMonth",
              date: "jDate",
              day: "day"
            },
            en: {
              daysInMonth: "daysInMonth",
              year: "year",
              month: "month",
              date: "date",
              day: "day"
            }
          };
          var localesConfig = {
            fa: {
              dow: 6,
              dir: "rtl",
              displayFormat: null,
              lang: {
                label: "شمسی",
                submit: "تایید",
                cancel: "انصراف",
                now: "اکنون",
                nextMonth: "ماه بعد",
                prevMonth: "ماه قبل",
                year: "سال",
                month: "ماه",
                day: "روز"
              }
            },
            en: {
              dow: 0,
              dir: "ltr",
              displayFormat: null,
              lang: {
                label: "میلادی",
                submit: "Select",
                cancel: "Cancel",
                now: "Now",
                nextMonth: "Next month",
                prevMonth: "Previous month",
                year: "Year",
                month: "Month",
                day: "Day"
              }
            }
          };
          var core_Core = function Core(defaultLocaleName, defaultOptions) {
            "use strict";
            var Instance = {
              moment: external_moment_jalaali_default.a,
              momentBase: external_moment_default.a,
              locale: {
                name: "fa",
                config: {}
              },
              localesConfig: {},
              setLocalesConfig: null,
              changeLocale: null,
              getWeekArray: null,
              getYearsList: null,
              getMonthsList: null
            };
            var xDaysInMonth;
            Instance.changeLocale = function changeLocale() {
              var localeName = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "fa";
              var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
              var locale2 = this.locale;
              var config = utils.clone(localesConfig[localeName] || localesConfig.en);
              var methods = localMethods[localeName] || localMethods.en;
              options = options[localeName] || {};
              if (!localesConfig[localeName]) options = utils.extend(true, {}, utils.clone(localesConfig.en), options);
              locale2.name = localeName;
              locale2.config = utils.extend(true, config, options);
              xDaysInMonth = external_moment_jalaali_default.a[methods.daysInMonth];
              function addMethods(date) {
                if (date === void 0) return;
                var nameInLocale = function nameInLocale2(name) {
                  if (locale2.name !== "fa") name = name.replace(/j/g, "");
                  return name;
                };
                date.xYear = external_moment_jalaali_default.a.fn[methods.year];
                date.xMonth = external_moment_jalaali_default.a.fn[methods.month];
                date.xDate = external_moment_jalaali_default.a.fn[methods.date];
                date.xFormat = function(format2) {
                  return this.format(nameInLocale(format2));
                };
                date.xStartOf = function(value) {
                  return this.startOf(methods[value]);
                };
                date.xEndOf = function(value) {
                  return this.endOf(methods[value]);
                };
                date.xAdd = function(amount, key) {
                  return this.add(amount, methods[key]);
                };
                date.clone = function() {
                  return Instance.moment(this.toDate());
                };
              }
              this.moment = function() {
                var date = external_moment_jalaali_default.a.apply(null, arguments);
                date.locale(locale2.name);
                addMethods(date);
                return date;
              };
            };
            Instance.setLocalesConfig = function(config) {
              var defaults2 = utils.clone(localesConfig);
              for (var key in config) {
                if (config.hasOwnProperty(key) && defaults2[key] === void 0) defaults2[key] = utils.extend(true, {}, utils.clone(defaults2.en), {
                  lang: {
                    label: key
                  }
                }, config[key]);
              }
              this.localesConfig = utils.extend(true, defaults2, config);
            };
            Instance.getWeekArray = function getWeekArray(date) {
              var _this = this;
              function addWeek(weekArray2, week2) {
                var emptyDays = 7 - week2.length;
                for (var i2 = 0; i2 < emptyDays; ++i2) {
                  week2[weekArray2.length ? "push" : "unshift"](null);
                }
                weekArray2.push(week2);
              }
              date.set({
                h: 12,
                m: 0
              });
              var daysInMonth2 = xDaysInMonth(date.xYear(), date.xMonth());
              var day = date.clone().xDate(1);
              var dayArray = [day.toDate()];
              for (var i = 2; i <= daysInMonth2; i++) {
                dayArray.push(day.xAdd(1, "day").toDate());
              }
              var weekArray = [];
              var week = [];
              dayArray.forEach(function(day2) {
                if (week.length > 0 && day2.getDay() === _this.locale.config.dow) {
                  addWeek(weekArray, week);
                  week = [];
                }
                week.push(day2);
                if (dayArray.indexOf(day2) === dayArray.length - 1) {
                  addWeek(weekArray, week);
                }
              });
              return weekArray;
            };
            Instance.getYearsList = function getYearsList(from2, to2) {
              var range = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;
              var date = arguments.length > 3 ? arguments[3] : void 0;
              var years2 = [];
              if (range) {
                var year = getYear(date);
                from2 = year - range;
                to2 = year + range;
              }
              for (var i = from2; i <= to2; i++) {
                years2.push(i);
              }
              return years2;
            };
            Instance.getMonthsList = function getMonthsList(minDate, maxDate, date) {
              var list = [], min2 = minDate ? minDate.clone().xStartOf("month") : -Infinity, max2 = maxDate ? maxDate.clone().xEndOf("month") : Infinity;
              for (var i = 0; i < 12; i++) {
                var month = date.clone().xMonth(i);
                var start = month.clone().xStartOf("month");
                var end = month.clone().xEndOf("month");
                month.disabled = start < min2 || end > max2;
                list.push(month);
              }
              return list;
            };
            Instance.changeLocale(defaultLocaleName, defaultOptions);
            return Instance;
          };
          var core = core_Core;
          function Vue3PersianDatetimePickervue_type_script_lang_js_typeof(obj) {
            "@babel/helpers - typeof";
            if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
              Vue3PersianDatetimePickervue_type_script_lang_js_typeof = function _typeof2(obj2) {
                return typeof obj2;
              };
            } else {
              Vue3PersianDatetimePickervue_type_script_lang_js_typeof = function _typeof2(obj2) {
                return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
              };
            }
            return Vue3PersianDatetimePickervue_type_script_lang_js_typeof(obj);
          }
          function _slicedToArray(arr, i) {
            return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
          }
          function _nonIterableRest() {
            throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
          }
          function _unsupportedIterableToArray(o, minLen) {
            if (!o) return;
            if (typeof o === "string") return _arrayLikeToArray(o, minLen);
            var n = Object.prototype.toString.call(o).slice(8, -1);
            if (n === "Object" && o.constructor) n = o.constructor.name;
            if (n === "Map" || n === "Set") return Array.from(o);
            if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
          }
          function _arrayLikeToArray(arr, len) {
            if (len == null || len > arr.length) len = arr.length;
            for (var i = 0, arr2 = new Array(len); i < len; i++) {
              arr2[i] = arr[i];
            }
            return arr2;
          }
          function _iterableToArrayLimit(arr, i) {
            var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
            if (_i == null) return;
            var _arr = [];
            var _n = true;
            var _d = false;
            var _s, _e;
            try {
              for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
                _arr.push(_s.value);
                if (i && _arr.length === i) break;
              }
            } catch (err) {
              _d = true;
              _e = err;
            } finally {
              try {
                if (!_n && _i["return"] != null) _i["return"]();
              } finally {
                if (_d) throw _e;
              }
            }
            return _arr;
          }
          function _arrayWithHoles(arr) {
            if (Array.isArray(arr)) return arr;
          }
          var Vue3PersianDatetimePickervue_type_script_lang_js = {
            name: "Vue3PersianDatetimePicker",
            components: {
              SimpleMode,
              TimeSection,
              LocaleChange,
              Arrow,
              CalendarIcon,
              TimeIcon
            },
            mixins: [popupRouteChanger],
            props: {
              /**
               * Default input value
               * @type Number String
               * @default []
               * @example 1396/08/01 22:45 | 2017/07/07 20:45 | {unix} | 20:45
               */
              modelValue: {
                type: [Number, String, Date, Array],
                default: ""
              },
              /**
               * Initial value of picker (if value is empty)
               * @type Number String
               * @default []
               * @example 1370/01/01 22:45 | 2017/01/01 20:45 | {unix} | 20:45
               * @version 1.0.9
               */
              initialValue: {
                type: [Number, String],
                default: ""
              },
              /**
               * Format for {value}
               * @type String
               * @default Null
               * @example jYYYY/jMM/jDD HH:mm | YYYY/MM/DD HH:mm | x | unix | HH:mm
               * @if empty {inputFormat} = {format}
               * @see https://github.com/jalaali/moment-jalaali
               */
              inputFormat: {
                type: String,
                default: ""
              },
              /**
               * Format only to display the date in the field
               * @type String
               * @default Null
               * @example jYYYY/jMM/jDD HH:mm | YYYY/MM/DD HH:mm | x | unix | HH:mm
               * @if empty {displayFormat} = {format}
               * @see https://github.com/jalaali/moment-jalaali
               */
              displayFormat: {
                type: String,
                default: ""
              },
              /**
               * Format for output value
               * @type String
               * @default Null
               * @example jYYYY/jMM/jDD HH:mm | YYYY/MM/DD HH:mm | x | date | HH:mm
               * @if empty, it will be built according to the type of picker:
               *
               * --- time:     HH:mm
               * --- datetime: jYYYY/jMM/jDD HH:mm
               * --- date:     jYYYY/jMM/jDD
               * --- year:     jYYYY
               * --- month:    jMM
               *
               * @see https://github.com/jalaali/moment-jalaali
               */
              format: {
                type: String,
                default: ""
              },
              /**
               * Step to view on startup
               * @type String
               * @default "day"
               * @supported day | month | year | time
               * @example year
               * @desc {year} will show the "year" panel at first
               */
              view: {
                type: String,
                default: "day"
              },
              /**
               * The picker type
               * @type String
               * @default "date"
               * @supported date | datetime | year | month | time
               */
              type: {
                type: String,
                default: "date"
              },
              /**
               * The minimum of selectable period
               * Based on {inputFormat}
               * @type String
               * @default Null
               * @example 1396/08/01 22:45 | 22:45
               */
              min: {
                type: [String],
                default: ""
              },
              /**
               * The maximum of selectable period
               * Based on {inputFormat}
               * @type String
               * @default Null
               * @example 1396/08/01 22:45 | 22:45
               */
              max: {
                type: [String],
                default: ""
              },
              /**
               * Editable input or just readonly
               * @type Boolean
               * @default False
               * @if false, the picker will shown on input focus
               * @if true, the picker will shown on label click
               * @note if use <... :editable="true"> with <... :element="...">
               *     then you have to control the <... :show="true or false">
               */
              editable: {
                type: Boolean,
                default: false
              },
              /**
               * @deprecated
               * The specified input element ID
               * @type String
               * @default Undefined
               * @desc Sometimes you don't want to use picker default input,
               * so you can use our own input element with "id" attribute
               * and use <... element="the_id_of_input">
               */
              element: {
                type: String,
                default: void 0
              },
              /**
               * New version of `element`
               * @type String (DOMString containing a selector list)
               * @desc use this instead of `element`,
               * this custom input does not need v-model, and it will be automatically updated
               * also supports `display-format`
               * @example .my-custom-input | #my-custom-input | div.foo > input
               * @version 2.10.0
               */
              customInput: {
                type: String,
                default: void 0
              },
              /**
               * The form input name when not using {element}
               * @type String
               * @default Undefined
               */
              name: {
                type: String,
                default: void 0
              },
              /**
               * The form input className when not using {element}
               * @type String
               * @default "form-control"
               */
              inputClass: {
                type: String,
                default: "form-control"
              },
              /**
               * The form input placeholder when not using {element}
               * @type String
               * @default Null
               */
              placeholder: {
                type: String,
                default: ""
              },
              /**
               * The name of hidden input element
               * @type String
               * @default Null
               * @if empty, the hidden input will not be created
               */
              altName: {
                type: String,
                default: ""
              },
              /**
               * Format for hidden input
               * @type String
               * @default Null
               * @example YYYY-MM-DD HH:mm:ss [GMT]ZZ
               * @if empty, it will be built according to the type of picker:
               *
               * --- time:     HH:mm:ss [GMT]ZZ
               * --- datetime: YYYY-MM-DD HH:mm:ss [GMT]ZZ
               * --- date:     YYYY-MM-DD
               * --- year:     YYYY
               * --- month:    MM
               */
              altFormat: {
                type: String,
                default: ""
              },
              /**
               * Show or hide the picker
               * @type Boolean
               * @default False
               */
              show: {
                type: Boolean,
                default: false
              },
              /**
               * Primary color of picker
               * @type String
               */
              color: {
                type: String,
                default: "#417df4"
              },
              /**
               * Auto submit and hide picker when date selected
               * @type Boolean
               * @default False
               */
              autoSubmit: {
                type: Boolean,
                default: false
              },
              /**
               * Auto submit when clicking the wrapper
               * @type Boolean
               * @default false
               * @version 1.0.6
               */
              wrapperSubmit: {
                type: Boolean,
                default: false
              },
              /**
               * Place to append picker
               * @type String query selector
               * @default null
               * @desc If you want to append picker to another container like 'body',
               * pass the container as append-to="body",  append-to="#app",  append-to="#my-container"
               * @example 'body', '.main-container', '#app' ...
               * @version 1.1.1
               */
              appendTo: {
                type: String,
                default: null
              },
              /**
               * Disable or enable the datepicker
               * @type Boolean
               * @default false
               * @version 1.1.4
               */
              disabled: {
                type: Boolean,
                default: false
              },
              /**
               * Disabling
               * @type Array, String, Function, RegExp
               * @default undefined
               * @desc disable some dates
               * @example ['1397/02/02', '1390/10/10'] - "1397/05/20" - /1397\/05\/(.*)/ ...
               * @version 1.1.4
               */
              disable: {
                type: [Array, String, Function, RegExp],
                default: void 0
              },
              /**
               * Label
               * @type String
               * @version 1.1.4
               */
              label: {
                type: String,
                default: ""
              },
              /**
               * Highlight items
               * @type Function
               * @desc This prop accepts only function that return an object of attributes.
               * @version 1.1.5
               */
              highlight: {
                type: Function,
                default: null
              },
              /**
               * Change minutes by step
               * @type Number
               * @default 1
               * @version: 1.1.6
               */
              jumpMinute: {
                type: Number,
                default: 1
              },
              /**
               * Round minutes when jumpMinute is grater than 1
               * @example when jumpMinute = 15 thin will result: 13:00, 13:15, 13:30, 13:45 ...
               * @type Boolean
               * @default false
               * @version: 1.1.6
               */
              roundMinute: {
                type: Boolean,
                default: false
              },
              /**
               * Show clear button
               * @type Boolean
               * @default false
               * @version 1.1.6
               */
              clearable: {
                type: Boolean,
                default: false
              },
              /**
               * Inline mode
               * @type Boolean
               * @default false
               * @version 1.1.6
               */
              inline: {
                type: Boolean,
                default: false
              },
              /**
               * Locales config ("fa" for jalali and "en" for gregorian)
               * @type String
               * @default fa
               * @example fa | en | fa,en | en,fa
               * @supported fa,en
               * @version 2.0.0
               */
              locale: {
                type: String,
                default: "fa"
              },
              /**
               * Locale configuration
               * @type Object
               * @default {}
               * @version 2.0.0
               * @example
               * {
               *  fa: {
               *      dow: 6,             --first day of week
               *      dir: 'rtl',         --language direction
               *      lang: {
               *           label:     "شمسی",
               *           submit:    "تایید",
               *           cancel:    "انصراف",
               *           now:       "اکنون",
               *           nextMonth: "ماه بعد",
               *           prevMonth: "ماه قبل",
               *      }
               *  },
               *  en: { ... }
               * }
               */
              localeConfig: {
                type: Object,
                default: function _default() {
                  return {};
                }
              },
              /**
               * Timezone configuration
               * @type String | Boolean | Function
               * @default false
               * @example true | false | +03:30 | +04:30
               * @version 2.1.0
               */
              timezone: {
                type: [Boolean, String, Function],
                default: false
              },
              /**
               * Show or hide NOW button
               * @type Boolean
               * @default true
               * @version 2.1.6
               */
              showNowBtn: {
                type: Boolean,
                default: true
              },
              /**
               * Convert to locale numbers or not
               * @type Boolean
               * @default false
               * @example <date-picker convert-numbers />
               * @version 2.3.0
               */
              convertNumbers: {
                type: Boolean,
                default: false
              },
              /**
               * Display the time on the front page
               * @type Boolean
               * @default false
               * @example <date-picker compact-time />
               * @version 2.4.0
               */
              compactTime: {
                type: Boolean,
                default: false
              },
              /**
               * Enable or disable range mode
               * @type Boolean
               * @default false
               * @example <date-picker range />
               * @version 2.5.0
               */
              range: {
                type: Boolean,
                default: false
              },
              /**
               * Enable or disable multiple mode
               * @type Boolean
               * @default false
               * @example <date-picker multiple />
               * @version 2.6.0
               */
              multiple: {
                type: Boolean,
                default: false
              },
              /**
               * Enable or disable popover mode
               * @type Boolean | String
               * @accepted:
               *    true | false
               *    top-left | top-right | bottom-right | bottom-left
               *    left-top | left-bottom | right-top | right-bottom
               * @default false
               * @example <date-picker popover />
               * @example <date-picker popover="top-left" />
               * @version 2.6.0
               */
              popover: {
                type: [Boolean, String],
                default: false
              },
              /**
               * If you want to change route address in open/close action,
               * then enable this prop
               * @type Boolean | String
               * @default false
               * @example <date-picker use-router />          => example.com/home?vpd-75454=active
               * @example <date-picker use-router="foo" />    => example.com/home?vpd-foo=active
               * @example <date-picker id="bar" use-router /> => example.com/home?vpd-bar=active
               */
              useRouter: {
                type: [Boolean, String],
                default: false
              },
              /**
               * Enable or disable simple mode
               * @type Boolean
               * @default false
               * @example <date-picker simple />
               */
              simple: {
                type: Boolean,
                default: false
              },
              /**
               * Additional attributes for input element
               * @type Object
               * @default null
               * @example <date-picker :input-attrs="{ foo: 'bar' }" />
               * @version 2.9.0
               */
              inputAttrs: {
                type: Object,
                default: null
              }
            },
            emits: ["update:modelValue", "locale-change", "change", "open", "close", "year-change", "month-change", "next-month", "prev-month"],
            data: function data() {
              var defaultLocale = this.locale.split(",")[0];
              var coreModule = new core(defaultLocale, this.localeConfig);
              return {
                core: coreModule,
                now: coreModule.moment(),
                date: {},
                selectedDates: [],
                hoveredItem: null,
                visible: false,
                directionClass: "",
                directionClassDate: "",
                steps: ["y", "m", "d", "t"],
                step: 0,
                shortCodes: {
                  year: "y",
                  month: "m",
                  day: "d",
                  time: "t"
                },
                time: {},
                minDate: false,
                maxDate: false,
                output: [],
                updateNowInterval: null,
                locales: ["fa"],
                localeData: coreModule.locale,
                windowWidth: window.innerWidth,
                popoverPlace: "bottom-right"
              };
            },
            computed: {
              vm: function vm() {
                return this;
              },
              id: function id() {
                var randId = Math.round(Math.random() * 1e6);
                return "vpd-".concat(this.$attrs.id || randId);
              },
              currentStep: function currentStep() {
                return this.steps[this.step];
              },
              selectedDate: function selectedDate() {
                var dates = this.selectedDates;
                return dates.length ? dates[dates.length - 1] : this.date;
              },
              formattedDate: function formattedDate() {
                var format2 = "";
                if (this.hasStep("y")) format2 = "jYYYY";
                if (this.hasStep("m")) format2 += " jMMMM ";
                if (this.hasStep("d")) {
                  format2 = this.isDataArray ? "jD jMMMM jYYYY" : "ddd jD jMMMM";
                }
                if (this.hasStep("t")) format2 += " HH:mm ";
                if (!format2) return "";
                var separator = this.multiple ? " | " : " ~ ";
                return this.selectedDates.map(function(d) {
                  return d.xFormat(format2);
                }).join(separator);
              },
              month: function month() {
                var _this = this;
                if (!this.hasStep("d")) return [];
                var min2 = this.minDate ? this.minDate.clone().startOf("day") : -Infinity;
                var max2 = this.maxDate ? this.maxDate.clone().endOf("day") : Infinity;
                return this.core.getWeekArray(this.date.clone()).map(function(weekItem) {
                  return weekItem.map(function(day) {
                    var data = {
                      date: day,
                      formatted: "",
                      selected: false,
                      disabled: false,
                      attributes: {}
                    };
                    if (!day) return data;
                    var dayMoment = _this.core.moment(day);
                    data.formatted = dayMoment.xDate();
                    data.selected = _this.selectedDates.find(function(item) {
                      return isSameDay(item, day);
                    });
                    data.disabled = _this.minDate && dayMoment.clone().startOf("day") < min2 || _this.maxDate && dayMoment.clone().endOf("day") > max2 || _this.checkDisable("d", dayMoment);
                    if (_this.range && !data.disabled) {
                      var _this$selectedDates = _slicedToArray(_this.selectedDates, 2), start = _this$selectedDates[0], end = _this$selectedDates[1];
                      data.isFirst = data.selected && start && isSameDay(start, day);
                      data.isLast = data.selected && end && isSameDay(end, day);
                      data.isBetween = !data.selected && start && end && day > start && day < end;
                    }
                    data.attributes = _this.getHighlights("d", dayMoment);
                    return data;
                  });
                });
              },
              monthDays: function monthDays() {
                var _this2 = this;
                if (!this.range || this.selectedDates.length !== 1 || !this.hoveredItem) return this.month;
                var dates = [this.hoveredItem, this.selectedDates[0]];
                dates.sort(function(a, b) {
                  return a - b;
                });
                var start = dates[0], end = dates[1];
                return this.month.map(function(weekItem) {
                  return weekItem.map(function(data) {
                    if (!data.date) return data;
                    if (_this2.range && !data.disabled) {
                      var day = data.date;
                      data.isHover = !data.selected && day > start && day < end;
                    }
                    return data;
                  });
                });
              },
              years: function years2() {
                var _this3 = this;
                var isYearSectionVisible = this.currentStep === "y" || this.simple;
                if (!this.hasStep("y") || !isYearSectionVisible) return [];
                var moment = this.core.moment;
                var min2 = this.minDate ? this.minDate : moment("1300", "jYYYY");
                var max2 = this.maxDate ? this.maxDate : min2.clone().add(150, "year");
                var cy = this.date.xYear();
                return this.core.getYearsList(min2.xYear(), max2.xYear()).reverse().map(function(item) {
                  var year = moment().xYear(item);
                  year.selected = cy === item;
                  year.disabled = _this3.checkDisable("y", item);
                  year.attributes = _this3.getHighlights("y", item);
                  return year;
                });
              },
              months: function months2() {
                var _this4 = this;
                if (this.hasStep("m")) {
                  var date = this.date.clone().xStartOf("month");
                  var months3 = this.core.getMonthsList(this.minDate, this.maxDate, date);
                  months3.forEach(function(m) {
                    m.selected = _this4.date.xMonth() === m.xMonth();
                    m.disabled = m.disabled || _this4.checkDisable("m", m);
                    m.attributes = _this4.getHighlights("m", m);
                  });
                  return months3;
                }
                return [];
              },
              prevMonthDisabled: function prevMonthDisabled() {
                return this.hasStep("d") && this.minDate && this.minDate.clone().xStartOf("month") >= this.date.clone().xStartOf("month");
              },
              nextMonthDisabled: function nextMonthDisabled() {
                return this.hasStep("d") && this.maxDate && this.maxDate.clone().xStartOf("month") <= this.date.clone().xStartOf("month");
              },
              canGoToday: function canGoToday() {
                if (!this.minDate && !this.maxDate) return true;
                var now2 = this.now, min2 = this.minDate && this.minDate <= now2, max2 = this.maxDate && now2 <= this.maxDate;
                if (this.type === "time") {
                  if (this.minDate) {
                    min2 = now2.clone().hour(this.minDate.hour()).minute(this.minDate.minute());
                    min2 = min2 <= now2;
                  }
                  if (this.maxDate) {
                    max2 = this.now.clone().hour(this.maxDate.hour()).minute(this.maxDate.minute());
                    max2 = now2 <= max2;
                  }
                }
                if (this.minDate && this.maxDate) return min2 && max2;
                if (this.minDate) return min2;
                if (this.maxDate) return max2;
                return false;
              },
              altFormatted: function altFormatted() {
                var format2 = this.altFormat;
                if (format2 === "" || format2 === void 0) {
                  switch (this.type) {
                    case "time":
                      format2 = "HH:mm:ss [GMT]ZZ";
                      break;
                    case "datetime":
                      format2 = "YYYY-MM-DD HH:mm:ss [GMT]ZZ";
                      break;
                    case "date":
                      format2 = "YYYY-MM-DD";
                      break;
                    case "year":
                      format2 = "YYYY";
                      break;
                    case "month":
                      format2 = "MM";
                      break;
                    case "year-month":
                      format2 = "YYYY-MM";
                      break;
                  }
                }
                return this.output.map(function(d) {
                  return d.format(format2);
                }).join(" ~ ");
              },
              selfFormat: function selfFormat() {
                var format2 = this.format;
                if (["", void 0, "date"].indexOf(format2) !== -1) {
                  switch (this.type) {
                    case "time":
                      format2 = "HH:mm";
                      break;
                    case "datetime":
                      format2 = "jYYYY/jMM/jDD HH:mm";
                      break;
                    case "date":
                      format2 = "jYYYY/jMM/jDD";
                      break;
                    case "year":
                      format2 = "jYYYY";
                      break;
                    case "month":
                      format2 = "jMM";
                      break;
                    case "year-month":
                      format2 = "jYYYY/jMM";
                      break;
                  }
                }
                return format2;
              },
              selfInputFormat: function selfInputFormat() {
                return this.inputFormat === "" || this.inputFormat === void 0 ? this.selfFormat : this.inputFormat;
              },
              outputValue: function outputValue() {
                var _this5 = this;
                var output = cloneDates(this.output);
                var format2 = this.selfFormat;
                var isDate2 = this.modelValue instanceof Date || this.format === "date";
                return output.map(function(item) {
                  ;
                  /j\w/.test(format2) && item.locale("fa");
                  _this5.setTimezone(item, "out");
                  return isDate2 ? item.toDate() : item.format(format2);
                });
              },
              selfDisplayFormat: function selfDisplayFormat() {
                var format2 = this.displayFormat || this.selfFormat;
                var localeFormat = this.localeData.config.displayFormat;
                if (localeFormat) {
                  return typeof localeFormat === "function" ? localeFormat(this) : localeFormat;
                }
                if (this.localeData.name !== "fa") {
                  format2 = format2.replace(/j/g, "");
                }
                return format2;
              },
              displayValue: function displayValue() {
                var _this6 = this;
                var format2 = this.selfDisplayFormat;
                return this.output.map(function(item) {
                  var output = item.clone();
                  /j\w/.test(format2) && output.locale("fa");
                  return _this6.convertToLocaleNumber(output.format(format2));
                }).join(" ~ ");
              },
              isDisableTime: function isDisableTime() {
                return this.hasStep("t") && this.checkDisable("t", this.time);
              },
              canSubmit: function canSubmit() {
                if (!this.disable) return true;
                var can = true;
                if (this.hasStep("t")) can = !this.isDisableTime;
                if (can && this.type !== "time") can = !this.checkDisable("d", this.date);
                return can;
              },
              weekDays: function weekDays() {
                var names = JSON.parse(JSON.stringify(this.core.moment().localeData().weekdaysMin()));
                var dow = this.core.locale.config.dow;
                while (dow > 0) {
                  names.push(names.shift());
                  dow--;
                }
                return names;
              },
              lang: function lang2() {
                return this.localeData.config.lang;
              },
              isPopover: function isPopover() {
                return (this.popover === "" || this.popover) && this.windowWidth > 480;
              },
              isDataArray: function isDataArray() {
                return this.range || this.multiple;
              },
              isCompactTime: function isCompactTime() {
                return this.compactTime || this.type === "datetime" && this.simple;
              },
              customInputElement: function customInputElement() {
                if (this.element) return "#".concat(this.element);
                return this.customInput;
              }
            },
            watch: {
              type: {
                handler: "setType",
                immediate: true
              },
              view: {
                handler: "setView",
                immediate: true
              },
              modelValue: {
                handler: "updateDates",
                immediate: true
              },
              min: {
                handler: "setMinMax",
                immediate: true
              },
              max: {
                handler: "setMinMax",
                immediate: true
              },
              timezone: {
                handler: "updateDates"
              },
              inline: {
                handler: function handler(val) {
                  if (!this.disabled) this.visible = !!val;
                },
                immediate: true
              },
              disabled: {
                handler: function handler(val) {
                  if (val) this.visible = false;
                  else if (this.inline) this.visible = true;
                },
                immediate: true
              },
              selectedDate: function selectedDate(val, old) {
                this.setDirection("directionClass", val, old);
              },
              date: function date(val, old) {
                this.setDirection("directionClassDate", val, old);
                if (this.isLower(this.date)) this.date = this.minDate.clone();
                if (this.isMore(this.date)) this.date = this.maxDate.clone();
              },
              visible: function visible(val) {
                var _this7 = this;
                if (val) {
                  if (this.disabled) return this.visible = false;
                  if (this.type === "datetime" && this.view === "day") this.goStep("d");
                  if (this.view !== "day") this.goStep(this.shortCodes[this.view] || "d");
                  this.$nextTick(function() {
                    if (_this7.appendTo) {
                      try {
                        var container = document.querySelector(_this7.appendTo);
                        container.appendChild(_this7.$refs.picker);
                      } catch (er) {
                        console.warn('Cannot append picker to "'.concat(_this7.appendTo, '"!'));
                      }
                    }
                  });
                  this.checkScroll();
                  this.setPlacement();
                  this.$emit("open", this);
                } else {
                  if (this.inline && !this.disabled) return this.visible = true;
                  this.$emit("close", this);
                }
              },
              show: function show(val) {
                this.visible = val;
              },
              locale: {
                immediate: true,
                handler: function handler(val) {
                  var locales2 = val.toString().split(",");
                  this.locales = locales2.length ? locales2 : ["fa"];
                  if (this.core.locale.name !== this.locales[0]) this.setLocale(this.locales[0]);
                }
              },
              localeConfig: {
                deep: true,
                immediate: true,
                handler: function handler(config) {
                  this.core.setLocalesConfig(config);
                  this.setLocale(this.localeData.name);
                }
              },
              "localeData.name": function localeDataName() {
                this.$emit("locale-change", this.localeData);
                this.setMinMax();
              },
              displayValue: {
                immediate: true,
                handler: function handler(displayValue) {
                  if (!this.customInput) return;
                  var customInput = document.querySelector(this.customInput);
                  if (customInput) customInput.value = displayValue;
                }
              }
            },
            created: function created() {
              var _this8 = this;
              this.updateNowInterval = setInterval(function() {
                _this8.now = _this8.core.moment();
              }, 1e3);
            },
            mounted: function mounted() {
              var _this9 = this;
              this.$nextTick(function() {
                if (_this9.customInputElement && !_this9.editable) addLiveEvent(_this9.customInputElement, "click", _this9.focus);
                if (_this9.customInput && _this9.editable) addLiveEvent(_this9.customInput, "blur", _this9.setOutput);
              });
              document.body.addEventListener("keydown", function(e) {
                e = e || event;
                var code = e.keyCode;
                if ((code === 9 || code === 27) && _this9.visible) _this9.visible = false;
              });
              window.addEventListener("resize", this.onWindowResize, true);
              window.addEventListener("mousedown", this.onWindowClick, true);
            },
            onBeforeUnmount: function onBeforeUnmount() {
              window.clearInterval(this.updateNowInterval);
              window.removeEventListener("resize", this.onWindowResize, true);
              window.removeEventListener("mousedown", this.onWindowClick, true);
              var picker = this.$refs.picker;
              if (this.appendTo && picker && picker.$el && picker.$el.parentNode) {
                picker.$el.parentNode.removeChild(picker.$el);
              }
            },
            methods: {
              nextStep: function nextStep(fromStep) {
                var _this10 = this;
                var checkAndSubmit = function checkAndSubmit2() {
                  var minLengthToSubmit = _this10.range ? 2 : _this10.multiple ? 0 : 1;
                  var passSelected = _this10.selectedDates.length >= minLengthToSubmit;
                  if ((_this10.autoSubmit || _this10.inline) && passSelected) {
                    _this10.submit(!_this10.multiple);
                  }
                };
                if (this.simple) {
                  if (this.type === "date" && fromStep === "day" || this.type === "year-month" && fromStep === "month" || this.type === "year" || this.type === "month") checkAndSubmit();
                  return;
                }
                var step = this.step + 1;
                if (this.isCompactTime && this.type === "datetime") step += 1;
                if (this.steps.length <= step) {
                  checkAndSubmit();
                } else {
                  this.step++;
                  this.goStep(this.step);
                }
              },
              goStep: function goStep(i) {
                this.step = typeof i === "number" ? i : this.steps.indexOf(i);
                this.checkScroll();
              },
              checkScroll: function checkScroll() {
                var _this11 = this;
                var step = this.currentStep;
                if (step === "y" || step === "m" && this.visible) {
                  setTimeout(function() {
                    var container = _this11.$refs[{
                      y: "year",
                      m: "month"
                    }[step]];
                    if (container) {
                      var selected = container.querySelector(".vpd-selected");
                      if (selected && "scrollIntoView" in selected) {
                        try {
                          selected.scrollIntoView({
                            block: "center"
                          });
                        } catch (er) {
                          selected.scrollIntoView();
                        }
                      }
                    }
                  }, 100);
                }
              },
              nextMonth: function nextMonth() {
                this.date = this.date.clone().xAdd(1, "month");
                this.$emit("next-month", this.date.clone());
              },
              prevMonth: function prevMonth() {
                this.date = this.date.clone().xAdd(-1, "month");
                this.$emit("prev-month", this.date.clone());
              },
              selectDay: function selectDay(day) {
                if (!day.date || day.disabled) return;
                var date = this.core.moment(day.date);
                date.set({
                  hour: this.time.hour(),
                  minute: this.time.minute(),
                  second: 0
                });
                this.date = date.clone();
                this.time = date.clone();
                if (this.range) {
                  var length = this.selectedDates.length;
                  if (!length || length > 1) {
                    this.selectedDates = [date.clone()];
                  } else {
                    this.selectedDates.push(date.clone());
                    this.selectedDates.sort(function(a, b) {
                      return a - b;
                    });
                  }
                } else if (this.multiple) {
                  var exists = this.selectedDates.findIndex(function(d) {
                    return d.valueOf() === date.valueOf();
                  });
                  if (exists > -1) {
                    this.selectedDates.splice(exists, 1);
                  } else {
                    this.selectedDates.push(date.clone());
                  }
                } else {
                  this.selectedDates = [date.clone()];
                }
                this.nextStep("day");
              },
              selectYear: function selectYear(year) {
                if (year.disabled) return;
                this.date = this.date.clone().xYear(year.xYear());
                if (["year", "year-month"].indexOf(this.type) !== -1) this.selectedDates = [this.date.clone()];
                this.$emit("year-change", year);
                this.nextStep("year");
              },
              selectMonth: function selectMonth(month) {
                if (month.disabled) return;
                this.date = this.date.clone().xMonth(month.xMonth());
                if (["month", "year-month"].indexOf(this.type) !== -1) this.selectedDates = [this.date.clone()];
                this.$emit("month-change", month);
                this.nextStep("month");
              },
              submit: function submit() {
                var _this12 = this;
                var close = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : true;
                var steps = this.steps.length - 1;
                var selected = this.selectedDates;
                if (this.isCompactTime && this.type === "datetime") steps -= 1;
                if (this.step < steps && !this.simple) return this.nextStep();
                if (this.hasStep("t")) {
                  var t = {
                    hour: this.time.hour(),
                    minute: this.time.minute()
                  };
                  this.date = this.date.set(t).clone();
                  this.selectedDates = selected.map(function(d) {
                    return d.set(t).clone();
                  });
                }
                if (["year", "month", "year-month"].indexOf(this.type) !== -1) this.selectedDates = selected.map(function() {
                  return _this12.date.clone();
                });
                if (this.range && selected.length > 1) {
                  selected[0].xStartOf("day");
                  selected[1].xEndOf("day");
                }
                this.output = cloneDates(selected);
                if (close) this.visible = false;
                if (this.isDataArray) {
                  this.$emit("update:modelValue", this.outputValue);
                  this.$emit("change", cloneDates(selected));
                } else {
                  this.$emit("update:modelValue", this.outputValue[0]);
                  this.$emit("change", selected[0].clone());
                }
              },
              updateDates: function updateDates(payload) {
                var _this13 = this;
                if (!payload) payload = this.isDataArray ? [] : "";
                if (this.date.clone && payload.toString() === this.outputValue.toString()) return;
                var payloadIsArray = payload instanceof Array;
                var getDate = function getDate2(input) {
                  var index = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
                  var date;
                  var startValue = _this13.modelValue instanceof Array ? _this13.modelValue[index] : _this13.modelValue;
                  try {
                    var isObject2 = Vue3PersianDatetimePickervue_type_script_lang_js_typeof(input) === "object";
                    if (input instanceof Date) {
                      date = _this13.getMoment(input);
                    } else if (input && isObject2 && "clone" in input) {
                      date = input.clone();
                    } else if (null === input || !isObject2) {
                      date = _this13.getMoment(input || startValue || _this13.initialValue);
                    }
                    date = date.isValid() ? date : _this13.core.moment();
                  } catch (e) {
                    date = _this13.core.moment();
                  }
                  _this13.setTimezone(date, "in");
                  return date;
                };
                if (payloadIsArray) {
                  this.date = getDate(payload[0]);
                  this.selectedDates = payload.map(getDate);
                } else {
                  this.date = getDate(payload);
                }
                if (!this.hasStep("t")) this.date.set({
                  hour: 0,
                  minute: 0,
                  second: 0
                });
                if (this.isLower(this.date)) {
                  this.date = this.minDate.clone();
                } else if (this.isMore(this.date)) {
                  this.date = this.maxDate.clone();
                }
                if (!payloadIsArray) this.selectedDates = [this.date.clone()];
                this.time = this.date.clone();
                if (this.modelValue !== "" && this.modelValue !== null && this.modelValue.length) {
                  this.output = cloneDates(this.selectedDates);
                } else {
                  this.output = [];
                }
              },
              goToday: function goToday() {
                var now2 = this.core.moment();
                if (!this.hasStep("t")) now2.set({
                  hour: 0,
                  minute: 0,
                  second: 0
                });
                this.date = now2.clone();
                this.time = now2.clone();
                this.selectedDates = [now2.clone()];
              },
              setType: function setType() {
                switch (this.type) {
                  case "date":
                    this.steps = ["y", "m", "d"];
                    this.goStep("d");
                    break;
                  case "datetime":
                    this.steps = ["y", "m", "d", "t"];
                    this.goStep("d");
                    break;
                  case "year":
                    this.steps = ["y"];
                    this.goStep("y");
                    break;
                  case "month":
                    this.steps = ["m"];
                    this.goStep("m");
                    break;
                  case "time":
                    this.steps = ["t"];
                    this.goStep("t");
                    break;
                  case "year-month":
                    this.steps = ["y", "m"];
                    this.goStep("y");
                    break;
                }
              },
              setView: function setView() {
                var s = this.shortCodes[this.view];
                if (this.hasStep(s)) this.goStep(s);
              },
              setDirection: function setDirection(prop, val, old) {
                this[prop] = val > old ? "direction-next" : "direction-prev";
              },
              setMinMax: function setMinMax() {
                var min2 = this.getMoment(this.min), max2 = this.getMoment(this.max);
                this.minDate = this.min && min2.isValid() ? min2 : false;
                this.maxDate = this.max && max2.isValid() ? max2 : false;
              },
              getMoment: function getMoment(date) {
                var d, moment = this.core.moment;
                if (date instanceof Date) return moment(date);
                if (this.selfInputFormat === "x" || this.selfInputFormat === "unix") {
                  d = moment(date.toString().length === 10 ? date * 1e3 : date * 1);
                } else {
                  try {
                    if (date) {
                      var a = moment(date, this.selfInputFormat);
                      var b = moment(date, this.selfFormat);
                      var now2 = moment(), year = now2.xYear();
                      if (this.type === "month") {
                        a.xYear(year);
                        b.xYear(year);
                      } else if (this.type === "time") {
                        a = now2.clone().set({
                          h: a.hour(),
                          m: a.minute(),
                          s: 0
                        });
                        b = a.clone();
                      }
                      if (a.year() !== b.year() && a.year() < 1900) {
                        d = b.clone();
                      } else {
                        d = a.clone();
                      }
                    } else {
                      d = moment();
                    }
                  } catch (er) {
                    d = moment();
                  }
                }
                return d;
              },
              focus: function focus(e) {
                if (this.editable) {
                  if (this.$refs.input) this.$refs.input.focus();
                } else {
                  if (e) {
                    e.preventDefault();
                    e.stopPropagation();
                    e.target.blur();
                    this.visible = !this.visible;
                  } else {
                    this.visible = true;
                  }
                  return false;
                }
              },
              hasStep: function hasStep(step) {
                return this.steps.indexOf(step) !== -1;
              },
              setOutput: function setOutput(e) {
                var _this14 = this;
                if (!this.editable) return;
                var value = e.target.value.split("~");
                var output = value.map(function(item) {
                  item = "".concat(item).replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
                  if (item === "") return null;
                  try {
                    var date = _this14.core.moment(item, _this14.selfDisplayFormat);
                    return date.isValid() ? date : null;
                  } catch (er) {
                    return null;
                  }
                });
                this.output = output.filter(function(d) {
                  return d;
                });
                this.output.sort(function(a, b) {
                  return a - b;
                });
                if (this.output.length) {
                  this.updateDates(cloneDates(this.output));
                  this.submit();
                } else {
                  this.$emit("update:modelValue", this.isDataArray ? [] : null);
                  this.$emit("change", this.isDataArray ? [] : null);
                }
              },
              wrapperClick: function wrapperClick() {
                this.visible = false;
                if (this.wrapperSubmit && this.canSubmit) {
                  this.submit();
                }
              },
              applyDevFn: function applyDevFn(fn, k) {
                var result = false;
                var args = Array.prototype.splice.call(arguments, 2);
                try {
                  args.push({
                    y: "year",
                    m: "month",
                    d: "day",
                    t: "time"
                  }[k]);
                  result = fn.apply(null, args);
                } catch (er) {
                  console.error(er);
                }
                return result;
              },
              checkDisable: function checkDisable(item, value) {
                var _this15 = this;
                var thisDisable = this.disable;
                if (!thisDisable) return false;
                var type = Vue3PersianDatetimePickervue_type_script_lang_js_typeof(thisDisable);
                var checkString = function checkString2(filter, str, date) {
                  if (filter instanceof RegExp) return filter.test(str);
                  if (filter === str) return true;
                  if (item === "d") {
                    var length = filter.length;
                    return str.substr(0, length) === filter || date.clone().locale("en").format("dddd") === filter;
                  }
                  return false;
                };
                var check = function check2(date, dateFormatted) {
                  var matches = false;
                  if (type === "function") {
                    return _this15.applyDevFn(thisDisable, item, dateFormatted, date.clone());
                  } else if (Object.prototype.toString.call(thisDisable) === "[object Array]") {
                    var ii = thisDisable.length;
                    for (var i = 0; i < ii; i++) {
                      matches = checkString(thisDisable[i], dateFormatted, date);
                      if (matches) break;
                    }
                    return matches;
                  } else if (type === "string" || thisDisable instanceof RegExp) {
                    return checkString(thisDisable, dateFormatted, date);
                  }
                  return false;
                };
                var format2 = this.selfFormat;
                if (item === "y") {
                  value = this.core.moment(value, "jYYYY");
                } else if (item === "d") {
                  format2 = format2.replace(/(H(H?))|(h(h?))?(:?)m(m?)(:?)(s(s?))?/g, "");
                }
                return check(value, value.format(format2));
              },
              getHighlights: function getHighlights(item, value) {
                var highlight = this.highlight;
                if (!highlight || typeof highlight !== "function") return {};
                if (item === "y") value = this.core.moment(value, "jYYYY");
                return this.applyDevFn(highlight, item, value.format(this.selfFormat), value.clone()) || {};
              },
              isLower: function isLower(date) {
                return this.minDate && date < this.minDate;
              },
              isMore: function isMore(date) {
                return this.maxDate && date > this.maxDate;
              },
              clearValue: function clearValue() {
                if (this.disabled) return;
                this.output = [];
                this.$emit("update:modelValue", this.isDataArray ? [] : "");
                this.$emit("change", this.isDataArray ? [] : null);
              },
              setLocale: function setLocale(locale2) {
                this.core.changeLocale(locale2, this.localeConfig);
                this.date = this.date.clone();
                this.selectedDates = this.selectedDates.map(function(d) {
                  return d.clone();
                });
              },
              setTimezone: function setTimezone(date, mode) {
                var tz = this.timezone;
                if (tz) {
                  var r = mode === "in" ? 1 : -1;
                  var moment = this.core.momentBase;
                  if (typeof tz === "string") {
                    var t = moment().utc().format("YYYY-MM-DDTHH:mm:ss") + tz;
                    date.add(moment.parseZone(t).utcOffset() * r, "minutes");
                  } else if (typeof tz === "boolean" && tz) {
                    date.subtract(new Date(date).getTimezoneOffset() * r, "minutes");
                  } else if (typeof tz === "function") {
                    date = tz(date, mode, this);
                  }
                }
                return date.clone();
              },
              convertToLocaleNumber: function convertToLocaleNumber(value) {
                if (this.convertNumbers && this.locale === "fa") {
                  return "".concat(value).replace(/\d+/g, function(digit) {
                    var ret = "";
                    for (var i = 0, len = digit.length; i < len; i++) {
                      ret += String.fromCharCode(digit.charCodeAt(i) + 1728);
                    }
                    return ret;
                  });
                }
                return value;
              },
              onWindowResize: function onWindowResize() {
                this.windowWidth = window.innerWidth;
              },
              onWindowClick: function onWindowClick(event2) {
                var _this16 = this;
                if (this.isPopover && this.$refs.picker && this.$refs.inputGroup) {
                  var isOnPicker = this.$refs.picker.contains(event2.target);
                  var isOnInput = this.$refs.inputGroup.contains(event2.target);
                  if (isOnPicker) event2.preventDefault();
                  if (!isOnPicker && !isOnInput) {
                    setTimeout(function() {
                      return _this16.visible = false;
                    }, this.editable ? 500 : 0);
                  }
                }
              },
              setPlacement: function setPlacement() {
                var _this17 = this;
                if (!this.isPopover) return;
                var allowed = ["top-left", "top-right", "bottom-right", "bottom-left", "left-top", "left-bottom", "right-top", "right-bottom"];
                if (allowed.indexOf(this.popover) !== -1) return this.popoverPlace = this.popover;
                this.popoverPlace = "bottom-right";
                this.$nextTick(function() {
                  var placement = ["bottom", "right"];
                  var container = _this17.$refs.container;
                  var rect = container.getBoundingClientRect();
                  var left = rect.left;
                  var bottom = window.innerHeight - rect.bottom;
                  if (bottom <= 0) placement[0] = "top";
                  if (left <= 0) placement[1] = "left";
                  _this17.popoverPlace = placement.join("-");
                });
              }
            },
            install: function install(Vue, options) {
              var component = this;
              options = extend2({
                name: "data-picker",
                props: {}
              }, options);
              for (var k in options.props) {
                if (component.props.hasOwnProperty(k)) {
                  component.props[k].default = options.props[k];
                }
              }
              Vue.component(options.name, component);
            }
          };
          Vue3PersianDatetimePickervue_type_script_lang_js.render = render;
          var Vue3PersianDatetimePicker = Vue3PersianDatetimePickervue_type_script_lang_js;
          var entry_lib = __webpack_exports__["default"] = Vue3PersianDatetimePicker;
        }
      )
      /******/
    })["default"];
  }
});
export default require_vue3_persian_datetime_picker_common();
/*! Bundled license information:

moment/moment.js:
  (*! moment.js *)
  (*! version : 2.30.1 *)
  (*! authors : Tim Wood, Iskren Chernev, Moment.js contributors *)
  (*! license : MIT *)
  (*! momentjs.com *)

moment/dist/moment.js:
  (*! moment.js *)
  (*! version : 2.30.1 *)
  (*! authors : Tim Wood, Iskren Chernev, Moment.js contributors *)
  (*! license : MIT *)
  (*! momentjs.com *)

vue3-persian-datetime-picker/dist/vue3-persian-datetime-picker.common.js:
  (*! moment.js locale configuration *)
*/
//# sourceMappingURL=vue3-persian-datetime-picker.js.map
